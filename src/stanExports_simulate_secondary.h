// Generated by rstantools.  Do not edit by hand.

/*
    EpiNow2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiNow2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiNow2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_simulate_secondary_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 443> locations_array__ =
  {" (found before start of program)",
  " (in 'simulate_secondary', line 686, column 2 to column 48)",
  " (in 'simulate_secondary', line 688, column 11 to column 12)",
  " (in 'simulate_secondary', line 688, column 4 to line 691, column 6)",
  " (in 'simulate_secondary', line 692, column 11 to column 12)",
  " (in 'simulate_secondary', line 692, column 4 to line 695, column 6)",
  " (in 'simulate_secondary', line 697, column 13 to column 14)",
  " (in 'simulate_secondary', line 697, column 6 to column 26)",
  " (in 'simulate_secondary', line 698, column 13 to column 14)",
  " (in 'simulate_secondary', line 698, column 6 to column 23)",
  " (in 'simulate_secondary', line 699, column 13 to column 14)",
  " (in 'simulate_secondary', line 699, column 6 to column 48)",
  " (in 'simulate_secondary', line 703, column 8 to column 39)",
  " (in 'simulate_secondary', line 702, column 13 to line 704, column 7)",
  " (in 'simulate_secondary', line 701, column 8 to column 63)",
  " (in 'simulate_secondary', line 700, column 21 to line 702, column 7)",
  " (in 'simulate_secondary', line 700, column 6 to line 704, column 7)",
  " (in 'simulate_secondary', line 714, column 8 to column 39)",
  " (in 'simulate_secondary', line 713, column 13 to line 715, column 7)",
  " (in 'simulate_secondary', line 706, column 15 to column 43)",
  " (in 'simulate_secondary', line 706, column 8 to line 711, column 10)",
  " (in 'simulate_secondary', line 712, column 8 to column 77)",
  " (in 'simulate_secondary', line 705, column 20 to line 713, column 7)",
  " (in 'simulate_secondary', line 705, column 6 to line 715, column 7)",
  " (in 'simulate_secondary', line 717, column 6 to line 720, column 8)",
  " (in 'simulate_secondary', line 723, column 8 to column 98)",
  " (in 'simulate_secondary', line 722, column 27 to line 724, column 7)",
  " (in 'simulate_secondary', line 722, column 6 to line 724, column 7)",
  " (in 'simulate_secondary', line 727, column 15 to column 43)",
  " (in 'simulate_secondary', line 727, column 8 to line 732, column 10)",
  " (in 'simulate_secondary', line 733, column 8 to line 735, column 10)",
  " (in 'simulate_secondary', line 726, column 20 to line 736, column 7)",
  " (in 'simulate_secondary', line 726, column 6 to line 736, column 7)",
  " (in 'simulate_secondary', line 738, column 6 to line 740, column 8)",
  " (in 'simulate_secondary', line 696, column 19 to line 741, column 5)",
  " (in 'simulate_secondary', line 696, column 4 to line 741, column 5)",
  " (in 'simulate_secondary', line 687, column 2 to line 742, column 3)",
  " (in 'simulate_secondary', line 606, column 2 to column 8)",
  " (in 'simulate_secondary', line 607, column 2 to column 8)",
  " (in 'simulate_secondary', line 608, column 2 to column 8)",
  " (in 'simulate_secondary', line 609, column 2 to column 16)",
  " (in 'simulate_secondary', line 611, column 8 to column 13)",
  " (in 'simulate_secondary', line 611, column 2 to column 34)",
  " (in 'simulate_secondary', line 612, column 9 to column 10)",
  " (in 'simulate_secondary', line 612, column 12 to column 13)",
  " (in 'simulate_secondary', line 612, column 2 to column 23)",
  " (in 'simulate_secondary', line 614, column 0 to column 17)",
  " (in 'simulate_secondary', line 615, column 0 to column 15)",
  " (in 'simulate_secondary', line 616, column 0 to column 13)",
  " (in 'simulate_secondary', line 617, column 0 to column 26)",
  " (in 'simulate_secondary', line 618, column 0 to column 12)",
  " (in 'simulate_secondary', line 619, column 0 to column 29)",
  " (in 'simulate_secondary', line 621, column 0 to column 23)",
  " (in 'simulate_secondary', line 622, column 0 to column 25)",
  " (in 'simulate_secondary', line 623, column 0 to column 26)",
  " (in 'simulate_secondary', line 624, column 6 to column 15)",
  " (in 'simulate_secondary', line 624, column 0 to column 42)",
  " (in 'simulate_secondary', line 625, column 6 to column 15)",
  " (in 'simulate_secondary', line 625, column 0 to column 43)",
  " (in 'simulate_secondary', line 626, column 0 to column 35)",
  " (in 'simulate_secondary', line 628, column 29 to column 48)",
  " (in 'simulate_secondary', line 628, column 0 to column 63)",
  " (in 'simulate_secondary', line 630, column 6 to column 20)",
  " (in 'simulate_secondary', line 630, column 0 to column 57)",
  " (in 'simulate_secondary', line 631, column 6 to column 15)",
  " (in 'simulate_secondary', line 631, column 0 to column 34)",
  " (in 'simulate_secondary', line 634, column 0 to column 35)",
  " (in 'simulate_secondary', line 636, column 6 to column 7)",
  " (in 'simulate_secondary', line 636, column 16 to column 35)",
  " (in 'simulate_secondary', line 636, column 0 to column 50)",
  " (in 'simulate_secondary', line 638, column 6 to column 19)",
  " (in 'simulate_secondary', line 638, column 0 to column 56)",
  " (in 'simulate_secondary', line 640, column 0 to column 27)",
  " (in 'simulate_secondary', line 642, column 6 to column 13)",
  " (in 'simulate_secondary', line 642, column 0 to column 44)",
  " (in 'simulate_secondary', line 644, column 6 to column 13)",
  " (in 'simulate_secondary', line 644, column 0 to column 45)",
  " (in 'simulate_secondary', line 646, column 6 to column 21)",
  " (in 'simulate_secondary', line 646, column 0 to column 57)",
  " (in 'simulate_secondary', line 648, column 0 to column 24)",
  " (in 'simulate_secondary', line 650, column 6 to column 22)",
  " (in 'simulate_secondary', line 650, column 0 to column 40)",
  " (in 'simulate_secondary', line 651, column 0 to column 16)",
  " (in 'simulate_secondary', line 652, column 6 to column 7)",
  " (in 'simulate_secondary', line 652, column 9 to column 20)",
  " (in 'simulate_secondary', line 652, column 0 to column 58)",
  " (in 'simulate_secondary', line 653, column 0 to column 14)",
  " (in 'simulate_secondary', line 654, column 0 to column 15)",
  " (in 'simulate_secondary', line 655, column 0 to column 24)",
  " (in 'simulate_secondary', line 657, column 0 to column 33)",
  " (in 'simulate_secondary', line 658, column 0 to column 30)",
  " (in 'simulate_secondary', line 659, column 7 to column 24)",
  " (in 'simulate_secondary', line 659, column 0 to column 39)",
  " (in 'simulate_secondary', line 660, column 7 to column 24)",
  " (in 'simulate_secondary', line 660, column 0 to column 39)",
  " (in 'simulate_secondary', line 663, column 6 to column 40)",
  " (in 'simulate_secondary', line 663, column 0 to column 77)",
  " (in 'simulate_secondary', line 665, column 6 to column 40)",
  " (in 'simulate_secondary', line 665, column 0 to column 80)",
  " (in 'simulate_secondary', line 667, column 7 to column 21)",
  " (in 'simulate_secondary', line 667, column 0 to column 36)",
  " (in 'simulate_secondary', line 670, column 6 to column 23)",
  " (in 'simulate_secondary', line 670, column 0 to column 51)",
  " (in 'simulate_secondary', line 672, column 0 to column 40)",
  " (in 'simulate_secondary', line 673, column 7 to column 31)",
  " (in 'simulate_secondary', line 673, column 0 to column 51)",
  " (in 'simulate_secondary', line 675, column 0 to column 27)",
  " (in 'simulate_secondary', line 676, column 0 to column 29)",
  " (in 'simulate_secondary', line 677, column 9 to column 10)",
  " (in 'simulate_secondary', line 677, column 12 to column 29)",
  " (in 'simulate_secondary', line 677, column 2 to column 38)",
  " (in 'simulate_secondary', line 680, column 8 to column 19)",
  " (in 'simulate_secondary', line 680, column 2 to line 683, column 4)",
  " (in 'simulate_secondary', line 686, column 8 to column 9)",
  " (in 'simulate_secondary', line 686, column 11 to column 28)",
  " (in 'simulate_secondary', line 12, column 2 to column 30)",
  " (in 'simulate_secondary', line 13, column 2 to column 41)",
  " (in 'simulate_secondary', line 14, column 2 to column 16)",
  " (in 'simulate_secondary', line 15, column 2 to column 41)",
  " (in 'simulate_secondary', line 16, column 2 to column 19)",
  " (in 'simulate_secondary', line 17, column 2 to column 42)",
  " (in 'simulate_secondary', line 11, column 62 to line 18, column 1)",
  " (in 'simulate_secondary', line 29, column 2 to column 30)",
  " (in 'simulate_secondary', line 30, column 2 to column 41)",
  " (in 'simulate_secondary', line 31, column 2 to column 19)",
  " (in 'simulate_secondary', line 32, column 2 to column 41)",
  " (in 'simulate_secondary', line 32, column 41 to column 42)",
  " (in 'simulate_secondary', line 33, column 2 to column 30)",
  " (in 'simulate_secondary', line 34, column 2 to column 42)",
  " (in 'simulate_secondary', line 28, column 61 to line 35, column 1)",
  " (in 'simulate_secondary', line 50, column 2 to column 29)",
  " (in 'simulate_secondary', line 51, column 2 to column 29)",
  " (in 'simulate_secondary', line 52, column 9 to column 12)",
  " (in 'simulate_secondary', line 52, column 2 to column 16)",
  " (in 'simulate_secondary', line 55, column 4 to column 74)",
  " (in 'simulate_secondary', line 54, column 29 to line 56, column 3)",
  " (in 'simulate_secondary', line 54, column 2 to line 56, column 3)",
  " (in 'simulate_secondary', line 59, column 4 to column 59)",
  " (in 'simulate_secondary', line 58, column 18 to line 60, column 3)",
  " (in 'simulate_secondary', line 58, column 2 to line 60, column 3)",
  " (in 'simulate_secondary', line 63, column 4 to column 65)",
  " (in 'simulate_secondary', line 64, column 4 to column 75)",
  " (in 'simulate_secondary', line 62, column 20 to line 65, column 3)",
  " (in 'simulate_secondary', line 62, column 2 to line 65, column 3)",
  " (in 'simulate_secondary', line 69, column 6 to column 66)",
  " (in 'simulate_secondary', line 70, column 6 to column 77)",
  " (in 'simulate_secondary', line 68, column 30 to line 71, column 5)",
  " (in 'simulate_secondary', line 68, column 4 to line 71, column 5)",
  " (in 'simulate_secondary', line 67, column 18 to line 72, column 3)",
  " (in 'simulate_secondary', line 67, column 2 to line 72, column 3)",
  " (in 'simulate_secondary', line 74, column 2 to column 11)",
  " (in 'simulate_secondary', line 49, column 58 to line 75, column 1)",
  " (in 'simulate_secondary', line 93, column 2 to column 35)",
  " (in 'simulate_secondary', line 94, column 2 to column 43)",
  " (in 'simulate_secondary', line 97, column 4 to column 44)",
  " (in 'simulate_secondary', line 96, column 19 to line 98, column 3)",
  " (in 'simulate_secondary', line 96, column 2 to line 98, column 3)",
  " (in 'simulate_secondary', line 100, column 9 to column 10)",
  " (in 'simulate_secondary', line 100, column 2 to column 80)",
  " (in 'simulate_secondary', line 101, column 2 to column 45)",
  " (in 'simulate_secondary', line 92, column 44 to line 102, column 1)",
  " (in 'simulate_secondary', line 109, column 9 to column 10)",
  " (in 'simulate_secondary', line 109, column 2 to column 17)",
  " (in 'simulate_secondary', line 110, column 9 to column 10)",
  " (in 'simulate_secondary', line 110, column 2 to column 23)",
  " (in 'simulate_secondary', line 120, column 4 to column 54)",
  " (in 'simulate_secondary', line 119, column 9 to line 121, column 3)",
  " (in 'simulate_secondary', line 117, column 6 to column 59)",
  " (in 'simulate_secondary', line 116, column 19 to line 118, column 5)",
  " (in 'simulate_secondary', line 116, column 4 to line 118, column 5)",
  " (in 'simulate_secondary', line 115, column 24 to line 119, column 3)",
  " (in 'simulate_secondary', line 115, column 9 to line 121, column 3)",
  " (in 'simulate_secondary', line 113, column 6 to column 63)",
  " (in 'simulate_secondary', line 112, column 19 to line 114, column 5)",
  " (in 'simulate_secondary', line 112, column 4 to line 114, column 5)",
  " (in 'simulate_secondary', line 111, column 17 to line 115, column 3)",
  " (in 'simulate_secondary', line 111, column 2 to line 121, column 3)",
  " (in 'simulate_secondary', line 132, column 4 to column 16)",
  " (in 'simulate_secondary', line 131, column 9 to line 133, column 3)",
  " (in 'simulate_secondary', line 124, column 4 to column 28)",
  " (in 'simulate_secondary', line 125, column 4 to column 28)",
  " (in 'simulate_secondary', line 127, column 6 to column 71)",
  " (in 'simulate_secondary', line 126, column 15 to line 128, column 5)",
  " (in 'simulate_secondary', line 126, column 4 to line 128, column 5)",
  " (in 'simulate_secondary', line 130, column 4 to column 53)",
  " (in 'simulate_secondary', line 123, column 13 to line 131, column 3)",
  " (in 'simulate_secondary', line 123, column 2 to line 133, column 3)",
  " (in 'simulate_secondary', line 134, column 2 to column 20)",
  " (in 'simulate_secondary', line 108, column 55 to line 135, column 1)",
  " (in 'simulate_secondary', line 142, column 8 to column 19)",
  " (in 'simulate_secondary', line 142, column 2 to column 29)",
  " (in 'simulate_secondary', line 144, column 4 to column 15)",
  " (in 'simulate_secondary', line 149, column 8 to line 150, column 53)",
  " (in 'simulate_secondary', line 148, column 13 to line 151, column 7)",
  " (in 'simulate_secondary', line 147, column 8 to column 47)",
  " (in 'simulate_secondary', line 146, column 28 to line 148, column 7)",
  " (in 'simulate_secondary', line 146, column 6 to line 151, column 7)",
  " (in 'simulate_secondary', line 145, column 69 to line 152, column 5)",
  " (in 'simulate_secondary', line 145, column 4 to line 152, column 5)",
  " (in 'simulate_secondary', line 143, column 27 to line 153, column 3)",
  " (in 'simulate_secondary', line 143, column 2 to line 153, column 3)",
  " (in 'simulate_secondary', line 154, column 2 to column 13)",
  " (in 'simulate_secondary', line 141, column 2 to line 155, column 1)",
  " (in 'simulate_secondary', line 165, column 9 to column 12)",
  " (in 'simulate_secondary', line 165, column 2 to column 39)",
  " (in 'simulate_secondary', line 166, column 2 to column 22)",
  " (in 'simulate_secondary', line 167, column 2 to column 14)",
  " (in 'simulate_secondary', line 188, column 6 to column 57)",
  " (in 'simulate_secondary', line 189, column 6 to column 63)",
  " (in 'simulate_secondary', line 190, column 6 to column 42)",
  " (in 'simulate_secondary', line 194, column 8 to line 196, column 10)",
  " (in 'simulate_secondary', line 193, column 13 to line 197, column 7)",
  " (in 'simulate_secondary', line 192, column 8 to column 49)",
  " (in 'simulate_secondary', line 191, column 28 to line 193, column 7)",
  " (in 'simulate_secondary', line 191, column 6 to line 197, column 7)",
  " (in 'simulate_secondary', line 187, column 11 to line 198, column 5)",
  " (in 'simulate_secondary', line 171, column 6 to column 57)",
  " (in 'simulate_secondary', line 172, column 6 to column 63)",
  " (in 'simulate_secondary', line 173, column 13 to column 45)",
  " (in 'simulate_secondary', line 173, column 6 to line 178, column 8)",
  " (in 'simulate_secondary', line 179, column 6 to column 59)",
  " (in 'simulate_secondary', line 183, column 8 to line 185, column 10)",
  " (in 'simulate_secondary', line 182, column 13 to line 186, column 7)",
  " (in 'simulate_secondary', line 181, column 8 to column 42)",
  " (in 'simulate_secondary', line 180, column 28 to line 182, column 7)",
  " (in 'simulate_secondary', line 180, column 6 to line 186, column 7)",
  " (in 'simulate_secondary', line 170, column 26 to line 187, column 5)",
  " (in 'simulate_secondary', line 170, column 4 to line 198, column 5)",
  " (in 'simulate_secondary', line 199, column 4 to column 26)",
  " (in 'simulate_secondary', line 169, column 78 to line 200, column 3)",
  " (in 'simulate_secondary', line 168, column 2 to line 200, column 3)",
  " (in 'simulate_secondary', line 202, column 4 to line 205, column 6)",
  " (in 'simulate_secondary', line 201, column 21 to line 206, column 3)",
  " (in 'simulate_secondary', line 201, column 2 to line 206, column 3)",
  " (in 'simulate_secondary', line 208, column 4 to column 30)",
  " (in 'simulate_secondary', line 207, column 18 to line 209, column 3)",
  " (in 'simulate_secondary', line 207, column 2 to line 209, column 3)",
  " (in 'simulate_secondary', line 211, column 4 to column 23)",
  " (in 'simulate_secondary', line 210, column 19 to line 212, column 3)",
  " (in 'simulate_secondary', line 210, column 2 to line 212, column 3)",
  " (in 'simulate_secondary', line 213, column 2 to column 13)",
  " (in 'simulate_secondary', line 163, column 2 to line 214, column 1)",
  " (in 'simulate_secondary', line 221, column 2 to column 55)",
  " (in 'simulate_secondary', line 223, column 4 to column 11)",
  " (in 'simulate_secondary', line 222, column 21 to line 224, column 3)",
  " (in 'simulate_secondary', line 222, column 2 to line 224, column 3)",
  " (in 'simulate_secondary', line 226, column 4 to column 39)",
  " (in 'simulate_secondary', line 227, column 4 to column 45)",
  " (in 'simulate_secondary', line 236, column 10 to column 77)",
  " (in 'simulate_secondary', line 235, column 15 to line 237, column 9)",
  " (in 'simulate_secondary', line 231, column 10 to line 234, column 14)",
  " (in 'simulate_secondary', line 230, column 27 to line 235, column 9)",
  " (in 'simulate_secondary', line 230, column 8 to line 237, column 9)",
  " (in 'simulate_secondary', line 229, column 34 to line 238, column 7)",
  " (in 'simulate_secondary', line 229, column 6 to line 238, column 7)",
  " (in 'simulate_secondary', line 228, column 25 to line 239, column 5)",
  " (in 'simulate_secondary', line 228, column 4 to line 239, column 5)",
  " (in 'simulate_secondary', line 225, column 24 to line 240, column 3)",
  " (in 'simulate_secondary', line 225, column 2 to line 240, column 3)",
  " (in 'simulate_secondary', line 220, column 59 to line 241, column 1)",
  " (in 'simulate_secondary', line 244, column 2 to column 29)",
  " (in 'simulate_secondary', line 245, column 9 to column 12)",
  " (in 'simulate_secondary', line 245, column 2 to column 18)",
  " (in 'simulate_secondary', line 247, column 4 to column 49)",
  " (in 'simulate_secondary', line 248, column 4 to column 31)",
  " (in 'simulate_secondary', line 249, column 4 to column 45)",
  " (in 'simulate_secondary', line 246, column 19 to line 250, column 3)",
  " (in 'simulate_secondary', line 246, column 2 to line 250, column 3)",
  " (in 'simulate_secondary', line 251, column 2 to column 13)",
  " (in 'simulate_secondary', line 243, column 57 to line 252, column 1)",
  " (in 'simulate_secondary', line 268, column 2 to column 32)",
  " (in 'simulate_secondary', line 269, column 9 to column 11)",
  " (in 'simulate_secondary', line 269, column 2 to column 41)",
  " (in 'simulate_secondary', line 270, column 2 to column 47)",
  " (in 'simulate_secondary', line 267, column 41 to line 271, column 1)",
  " (in 'simulate_secondary', line 284, column 2 to column 32)",
  " (in 'simulate_secondary', line 285, column 9 to column 10)",
  " (in 'simulate_secondary', line 285, column 2 to column 27)",
  " (in 'simulate_secondary', line 286, column 2 to column 38)",
  " (in 'simulate_secondary', line 287, column 2 to column 25)",
  " (in 'simulate_secondary', line 283, column 48 to line 288, column 1)",
  " (in 'simulate_secondary', line 305, column 2 to column 32)",
  " (in 'simulate_secondary', line 306, column 2 to column 46)",
  " (in 'simulate_secondary', line 307, column 9 to column 10)",
  " (in 'simulate_secondary', line 307, column 2 to column 36)",
  " (in 'simulate_secondary', line 309, column 2 to column 36)",
  " (in 'simulate_secondary', line 310, column 2 to column 34)",
  " (in 'simulate_secondary', line 311, column 2 to column 46)",
  " (in 'simulate_secondary', line 317, column 4 to column 70)",
  " (in 'simulate_secondary', line 316, column 9 to line 318, column 3)",
  " (in 'simulate_secondary', line 315, column 4 to column 70)",
  " (in 'simulate_secondary', line 314, column 19 to line 316, column 3)",
  " (in 'simulate_secondary', line 314, column 2 to line 318, column 3)",
  " (in 'simulate_secondary', line 319, column 2 to column 24)",
  " (in 'simulate_secondary', line 304, column 75 to line 320, column 1)",
  " (in 'simulate_secondary', line 341, column 2 to column 49)",
  " (in 'simulate_secondary', line 345, column 6 to column 63)",
  " (in 'simulate_secondary', line 343, column 30 to line 346, column 5)",
  " (in 'simulate_secondary', line 343, column 4 to line 346, column 5)",
  " (in 'simulate_secondary', line 349, column 6 to column 57)",
  " (in 'simulate_secondary', line 347, column 28 to line 350, column 5)",
  " (in 'simulate_secondary', line 347, column 4 to line 350, column 5)",
  " (in 'simulate_secondary', line 342, column 18 to line 351, column 3)",
  " (in 'simulate_secondary', line 342, column 2 to line 351, column 3)",
  " (in 'simulate_secondary', line 340, column 73 to line 352, column 1)",
  " (in 'simulate_secondary', line 372, column 2 to column 35)",
  " (in 'simulate_secondary', line 373, column 9 to column 10)",
  " (in 'simulate_secondary', line 373, column 2 to column 46)",
  " (in 'simulate_secondary', line 387, column 6 to column 59)",
  " (in 'simulate_secondary', line 386, column 11 to line 388, column 5)",
  " (in 'simulate_secondary', line 385, column 6 to column 35)",
  " (in 'simulate_secondary', line 384, column 21 to line 386, column 5)",
  " (in 'simulate_secondary', line 384, column 4 to line 388, column 5)",
  " (in 'simulate_secondary', line 383, column 9 to line 389, column 3)",
  " (in 'simulate_secondary', line 375, column 4 to column 38)",
  " (in 'simulate_secondary', line 379, column 6 to line 381, column 17)",
  " (in 'simulate_secondary', line 378, column 11 to line 382, column 5)",
  " (in 'simulate_secondary', line 377, column 6 to column 47)",
  " (in 'simulate_secondary', line 376, column 21 to line 378, column 5)",
  " (in 'simulate_secondary', line 376, column 4 to line 382, column 5)",
  " (in 'simulate_secondary', line 374, column 18 to line 383, column 3)",
  " (in 'simulate_secondary', line 374, column 2 to line 389, column 3)",
  " (in 'simulate_secondary', line 371, column 61 to line 390, column 1)",
  " (in 'simulate_secondary', line 405, column 2 to column 35)",
  " (in 'simulate_secondary', line 406, column 9 to column 13)",
  " (in 'simulate_secondary', line 406, column 2 to column 45)",
  " (in 'simulate_secondary', line 409, column 6 to column 59)",
  " (in 'simulate_secondary', line 408, column 23 to line 410, column 5)",
  " (in 'simulate_secondary', line 408, column 4 to line 410, column 5)",
  " (in 'simulate_secondary', line 407, column 26 to line 411, column 3)",
  " (in 'simulate_secondary', line 407, column 2 to line 411, column 3)",
  " (in 'simulate_secondary', line 412, column 2 to column 29)",
  " (in 'simulate_secondary', line 404, column 66 to line 413, column 1)",
  " (in 'simulate_secondary', line 432, column 2 to column 32)",
  " (in 'simulate_secondary', line 433, column 9 to column 10)",
  " (in 'simulate_secondary', line 433, column 2 to column 20)",
  " (in 'simulate_secondary', line 441, column 4 to column 38)",
  " (in 'simulate_secondary', line 443, column 6 to line 445, column 17)",
  " (in 'simulate_secondary', line 442, column 19 to line 446, column 5)",
  " (in 'simulate_secondary', line 442, column 4 to line 446, column 5)",
  " (in 'simulate_secondary', line 440, column 9 to line 447, column 3)",
  " (in 'simulate_secondary', line 438, column 6 to column 64)",
  " (in 'simulate_secondary', line 437, column 19 to line 439, column 5)",
  " (in 'simulate_secondary', line 437, column 4 to line 439, column 5)",
  " (in 'simulate_secondary', line 436, column 23 to line 440, column 3)",
  " (in 'simulate_secondary', line 436, column 2 to line 447, column 3)",
  " (in 'simulate_secondary', line 448, column 2 to column 18)",
  " (in 'simulate_secondary', line 431, column 68 to line 449, column 1)",
  " (in 'simulate_secondary', line 476, column 4 to column 47)",
  " (in 'simulate_secondary', line 477, column 4 to column 61)",
  " (in 'simulate_secondary', line 475, column 9 to line 478, column 3)",
  " (in 'simulate_secondary', line 474, column 4 to column 45)",
  " (in 'simulate_secondary', line 473, column 24 to line 475, column 3)",
  " (in 'simulate_secondary', line 473, column 9 to line 478, column 3)",
  " (in 'simulate_secondary', line 472, column 4 to column 14)",
  " (in 'simulate_secondary', line 471, column 17 to line 473, column 3)",
  " (in 'simulate_secondary', line 471, column 2 to line 478, column 3)",
  " (in 'simulate_secondary', line 470, column 47 to line 479, column 1)",
  " (in 'simulate_secondary', line 495, column 2 to column 32)",
  " (in 'simulate_secondary', line 496, column 8 to column 9)",
  " (in 'simulate_secondary', line 496, column 2 to column 31)",
  " (in 'simulate_secondary', line 497, column 2 to column 17)",
  " (in 'simulate_secondary', line 499, column 4 to column 33)",
  " (in 'simulate_secondary', line 498, column 18 to line 500, column 3)",
  " (in 'simulate_secondary', line 498, column 2 to line 500, column 3)",
  " (in 'simulate_secondary', line 503, column 4 to column 66)",
  " (in 'simulate_secondary', line 502, column 17 to line 504, column 3)",
  " (in 'simulate_secondary', line 502, column 2 to line 504, column 3)",
  " (in 'simulate_secondary', line 505, column 2 to column 26)",
  " (in 'simulate_secondary', line 494, column 72 to line 506, column 1)",
  " (in 'simulate_secondary', line 514, column 2 to column 39)",
  " (in 'simulate_secondary', line 515, column 9 to column 10)",
  " (in 'simulate_secondary', line 515, column 2 to column 51)",
  " (in 'simulate_secondary', line 524, column 8 to column 42)",
  " (in 'simulate_secondary', line 523, column 12 to line 525, column 7)",
  " (in 'simulate_secondary', line 522, column 8 to column 56)",
  " (in 'simulate_secondary', line 521, column 23 to line 523, column 7)",
  " (in 'simulate_secondary', line 521, column 6 to line 525, column 7)",
  " (in 'simulate_secondary', line 520, column 29 to line 526, column 5)",
  " (in 'simulate_secondary', line 520, column 4 to line 526, column 5)",
  " (in 'simulate_secondary', line 532, column 8 to column 79)",
  " (in 'simulate_secondary', line 531, column 12 to line 533, column 7)",
  " (in 'simulate_secondary', line 530, column 8 to column 48)",
  " (in 'simulate_secondary', line 529, column 33 to line 531, column 7)",
  " (in 'simulate_secondary', line 529, column 6 to line 533, column 7)",
  " (in 'simulate_secondary', line 528, column 18 to line 534, column 5)",
  " (in 'simulate_secondary', line 528, column 4 to line 534, column 5)",
  " (in 'simulate_secondary', line 540, column 8 to column 50)",
  " (in 'simulate_secondary', line 539, column 12 to line 541, column 7)",
  " (in 'simulate_secondary', line 538, column 8 to column 50)",
  " (in 'simulate_secondary', line 537, column 36 to line 539, column 7)",
  " (in 'simulate_secondary', line 537, column 6 to line 541, column 7)",
  " (in 'simulate_secondary', line 536, column 17 to line 542, column 5)",
  " (in 'simulate_secondary', line 536, column 4 to line 542, column 5)",
  " (in 'simulate_secondary', line 543, column 4 to column 55)",
  " (in 'simulate_secondary', line 518, column 17 to line 544, column 3)",
  " (in 'simulate_secondary', line 518, column 2 to line 544, column 3)",
  " (in 'simulate_secondary', line 545, column 2 to column 28)",
  " (in 'simulate_secondary', line 513, column 2 to line 546, column 1)",
  " (in 'simulate_secondary', line 557, column 4 to column 46)",
  " (in 'simulate_secondary', line 556, column 9 to line 558, column 3)",
  " (in 'simulate_secondary', line 555, column 4 to column 49)",
  " (in 'simulate_secondary', line 554, column 38 to line 556, column 3)",
  " (in 'simulate_secondary', line 554, column 9 to line 558, column 3)",
  " (in 'simulate_secondary', line 553, column 4 to column 13)",
  " (in 'simulate_secondary', line 552, column 15 to line 554, column 3)",
  " (in 'simulate_secondary', line 552, column 2 to line 558, column 3)",
  " (in 'simulate_secondary', line 551, column 51 to line 559, column 1)",
  " (in 'simulate_secondary', line 565, column 2 to column 31)",
  " (in 'simulate_secondary', line 571, column 4 to column 48)",
  " (in 'simulate_secondary', line 570, column 9 to line 572, column 3)",
  " (in 'simulate_secondary', line 569, column 4 to column 72)",
  " (in 'simulate_secondary', line 568, column 38 to line 570, column 3)",
  " (in 'simulate_secondary', line 568, column 9 to line 572, column 3)",
  " (in 'simulate_secondary', line 567, column 4 to column 37)",
  " (in 'simulate_secondary', line 566, column 15 to line 568, column 3)",
  " (in 'simulate_secondary', line 566, column 2 to line 572, column 3)",
  " (in 'simulate_secondary', line 564, column 53 to line 573, column 1)",
  " (in 'simulate_secondary', line 578, column 2 to column 20)",
  " (in 'simulate_secondary', line 579, column 2 to column 40)",
  " (in 'simulate_secondary', line 599, column 6 to column 34)",
  " (in 'simulate_secondary', line 598, column 11 to line 600, column 5)",
  " (in 'simulate_secondary', line 594, column 6 to line 596, column 46)",
  " (in 'simulate_secondary', line 596, column 28 to column 44)",
  " (in 'simulate_secondary', line 596, column 10 to column 26)",
  " (in 'simulate_secondary', line 597, column 6 to column 21)",
  " (in 'simulate_secondary', line 593, column 36 to line 598, column 5)",
  " (in 'simulate_secondary', line 593, column 11 to line 600, column 5)",
  " (in 'simulate_secondary', line 589, column 6 to line 591, column 46)",
  " (in 'simulate_secondary', line 591, column 28 to column 44)",
  " (in 'simulate_secondary', line 591, column 10 to column 26)",
  " (in 'simulate_secondary', line 592, column 6 to column 21)",
  " (in 'simulate_secondary', line 588, column 36 to line 593, column 5)",
  " (in 'simulate_secondary', line 588, column 11 to line 600, column 5)",
  " (in 'simulate_secondary', line 582, column 6 to line 586, column 46)",
  " (in 'simulate_secondary', line 586, column 28 to column 44)",
  " (in 'simulate_secondary', line 586, column 10 to column 26)",
  " (in 'simulate_secondary', line 587, column 6 to column 21)",
  " (in 'simulate_secondary', line 581, column 29 to line 588, column 5)",
  " (in 'simulate_secondary', line 581, column 4 to line 600, column 5)",
  " (in 'simulate_secondary', line 580, column 27 to line 601, column 3)",
  " (in 'simulate_secondary', line 580, column 2 to line 601, column 3)",
  " (in 'simulate_secondary', line 577, column 35 to line 602, column 1)"};
std::vector<int>
calc_conv_indices_xlen(const int& s, const int& xlen, const int& ylen,
                       std::ostream* pstream__);
std::vector<int>
calc_conv_indices_len(const int& s, const int& xlen, const int& ylen,
                      std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__, const int&
                      len, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_to_report(const T0__& infections_arg__, const T1__&
                   delay_rev_pmf_arg__, const int& seeding_time,
                   std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
discretised_pmf(const T0__& params_arg__, const int& n, const int& dist,
                std::ostream* pstream__);
std::vector<int>
get_delay_type_max(const int& delay_types, const std::vector<int>&
                   delay_types_p, const std::vector<int>& delay_types_id,
                   const std::vector<int>& delay_types_groups,
                   const std::vector<int>& delay_max, const std::vector<int>&
                   delay_np_pmf_groups, std::ostream* pstream__);
template <typename T6__, typename T8__,
          stan::require_all_t<stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T6__>,
                stan::base_type_t<T8__>>,-1,1>
get_delay_rev_pmf(const int& delay_id, const int& len,
                  const std::vector<int>& delay_types_p,
                  const std::vector<int>& delay_types_id,
                  const std::vector<int>& delay_types_groups,
                  const std::vector<int>& delay_max, const T6__&
                  delay_np_pmf_arg__, const std::vector<int>&
                  delay_np_pmf_groups, const T8__& delay_params_arg__,
                  const std::vector<int>& delay_params_groups,
                  const std::vector<int>& delay_dist, const int&
                  left_truncate, const int& reverse_pmf, const int&
                  cumulative, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
void
delays_lp(const T0__& delay_params_arg__, const T1__&
          delay_params_mean_arg__, const T2__& delay_params_sd_arg__,
          const std::vector<int>& delay_params_groups,
          const std::vector<int>& delay_dist, const std::vector<int>& weight,
          T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
normal_lb_rng(const T0__& mu_arg__, const T1__& sigma_arg__, const T2__&
              lb_arg__, RNG& base_rng__, std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
day_of_week_effect(const T0__& reports_arg__, const std::vector<int>&
                   day_of_week, const T2__& effect_arg__, std::ostream*
                   pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs, std::ostream*
          pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
truncate_obs(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
             const int& reconstruct, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
void
truncation_lp(const std::vector<T0__>& truncation_mean,
              const std::vector<T1__>& truncation_sd,
              const std::vector<T2__>& trunc_mean_mean,
              const std::vector<T3__>& trunc_mean_sd,
              const std::vector<T4__>& trunc_sd_mean,
              const std::vector<T5__>& trunc_sd_sd, T_lp__& lp__,
              T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <bool propto__, typename T2__, typename T3__, typename T5__,
          typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
void
report_lp(const std::vector<int>& cases, const std::vector<int>& case_times,
          const T2__& reports_arg__, const T3__& dispersion, const int&
          model_type, const T5__& weight, T_lp__& lp__, T_lp_accum__&
          lp_accum__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
accumulate_reports(const T0__& reports_arg__, const std::vector<int>&
                   accumulate, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>, T2__, T4__>,-1,1>
report_log_lik(const std::vector<int>& cases, const T1__& reports_arg__,
               const T2__& dispersion, const int& model_type, const T4__&
               weight, std::ostream* pstream__);
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
int
neg_binomial_2_safe_rng(const T0__& mu, const T1__& phi, RNG& base_rng__,
                        std::ostream* pstream__);
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
std::vector<int>
report_rng(const T0__& reports_arg__, const T1__& dispersion, const int&
           model_type, RNG& base_rng__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
calculate_secondary(const T0__& scaled_reports_arg__, const T1__&
                    conv_reports_arg__, const std::vector<int>& obs,
                    const int& cumulative, const int& historic, const int&
                    primary_hist_additive, const int& current, const int&
                    primary_current_additive, const int& predict,
                    std::ostream* pstream__);
template <typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>>
get_param(const int& id, const std::vector<int>& params_fixed_lookup,
          const std::vector<int>& params_variable_lookup, const T3__&
          params_value_arg__, const T4__& params_arg__, std::ostream*
          pstream__);
template <typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
get_param(const int& id, const std::vector<int>& params_fixed_lookup,
          const std::vector<int>& params_variable_lookup, const T3__&
          params_value_arg__, const T4__& params_arg__, std::ostream*
          pstream__);
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
void
params_lp(const T0__& params_arg__, const std::vector<int>& prior_dist,
          const T2__& prior_dist_params_arg__, const T3__&
          params_lower_arg__, const T4__& params_upper_arg__, T_lp__& lp__,
          T_lp_accum__& lp_accum__, std::ostream* pstream__);
std::vector<int>
calc_conv_indices_xlen(const int& s, const int& xlen, const int& ylen,
                       std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int s_minus_ylen = std::numeric_limits<int>::min();
    current_statement__ = 115;
    s_minus_ylen = (s - ylen);
    int start_x = std::numeric_limits<int>::min();
    current_statement__ = 116;
    start_x = stan::math::max(1, (s_minus_ylen + 1));
    int end_x = std::numeric_limits<int>::min();
    current_statement__ = 117;
    end_x = s;
    int start_y = std::numeric_limits<int>::min();
    current_statement__ = 118;
    start_y = stan::math::max(1, (1 - s_minus_ylen));
    int end_y = std::numeric_limits<int>::min();
    current_statement__ = 119;
    end_y = ylen;
    current_statement__ = 120;
    return std::vector<int>{start_x, end_x, start_y, end_y};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
calc_conv_indices_len(const int& s, const int& xlen, const int& ylen,
                      std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int s_minus_ylen = std::numeric_limits<int>::min();
    current_statement__ = 122;
    s_minus_ylen = (s - ylen);
    int start_x = std::numeric_limits<int>::min();
    current_statement__ = 123;
    start_x = stan::math::max(1, (s_minus_ylen + 1));
    int end_x = std::numeric_limits<int>::min();
    current_statement__ = 124;
    end_x = xlen;
    int start_y = std::numeric_limits<int>::min();
    current_statement__ = 125;
    start_y = stan::math::max(1, (1 - s_minus_ylen));
    ;
    int end_y = std::numeric_limits<int>::min();
    current_statement__ = 127;
    end_y = ((ylen + xlen) - s);
    current_statement__ = 128;
    return std::vector<int>{start_x, end_x, start_y, end_y};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__, const int&
                      len, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  const auto& y = stan::math::to_ref(y_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int xlen = std::numeric_limits<int>::min();
    current_statement__ = 130;
    xlen = stan::math::num_elements(x);
    int ylen = std::numeric_limits<int>::min();
    current_statement__ = 131;
    ylen = stan::math::num_elements(y);
    current_statement__ = 132;
    stan::math::validate_non_negative_index("z", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> z =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 136;
    if (stan::math::logical_lt(((xlen + ylen) - 1), len)) {
      current_statement__ = 134;
      std::stringstream errmsg_stream__;
      stan::math::stan_print(&errmsg_stream__,
        "convolve_with_rev_pmf: len is longer than x and y convolved");
      throw std::domain_error(errmsg_stream__.str());
    }
    current_statement__ = 139;
    if (stan::math::logical_gt(xlen, len)) {
      current_statement__ = 137;
      std::stringstream errmsg_stream__;
      stan::math::stan_print(&errmsg_stream__,
        "convolve_with_rev_pmf: len is shorter than x");
      throw std::domain_error(errmsg_stream__.str());
    }
    current_statement__ = 143;
    for (int s = 1; s <= xlen; ++s) {
      std::vector<int> indices =
        std::vector<int>(4, std::numeric_limits<int>::min());
      current_statement__ = 140;
      stan::model::assign(indices,
        calc_conv_indices_xlen(s, xlen, ylen, pstream__),
        "assigning variable indices");
      current_statement__ = 141;
      stan::model::assign(z,
        stan::math::dot_product(
          stan::model::rvalue(x, "x",
            stan::model::index_min_max(
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(1)),
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(2)))),
          stan::model::rvalue(y, "y",
            stan::model::index_min_max(
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(3)),
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(4))))), "assigning variable z",
        stan::model::index_uni(s));
    }
    current_statement__ = 149;
    if (stan::math::logical_gt(len, xlen)) {
      current_statement__ = 147;
      for (int s = (xlen + 1); s <= len; ++s) {
        std::vector<int> indices =
          std::vector<int>(4, std::numeric_limits<int>::min());
        current_statement__ = 144;
        stan::model::assign(indices,
          calc_conv_indices_len(s, xlen, ylen, pstream__),
          "assigning variable indices");
        current_statement__ = 145;
        stan::model::assign(z,
          stan::math::dot_product(
            stan::model::rvalue(x, "x",
              stan::model::index_min_max(
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(1)),
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(2)))),
            stan::model::rvalue(y, "y",
              stan::model::index_min_max(
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(3)),
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(4))))), "assigning variable z",
          stan::model::index_uni(s));
      }
    }
    current_statement__ = 150;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_to_report(const T0__& infections_arg__, const T1__&
                   delay_rev_pmf_arg__, const int& seeding_time,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& infections = stan::math::to_ref(infections_arg__);
  const auto& delay_rev_pmf = stan::math::to_ref(delay_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 152;
    t = stan::math::num_elements(infections);
    int delays = std::numeric_limits<int>::min();
    current_statement__ = 153;
    delays = stan::math::num_elements(delay_rev_pmf);
    current_statement__ = 156;
    if (stan::math::logical_eq(delays, 0)) {
      current_statement__ = 154;
      return stan::model::rvalue(infections, "infections",
               stan::model::index_min_max((seeding_time + 1), t));
    }
    current_statement__ = 157;
    stan::math::validate_non_negative_index("unobs_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> unobs_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 158;
    stan::model::assign(unobs_reports,
      convolve_with_rev_pmf(infections, delay_rev_pmf, t, pstream__),
      "assigning variable unobs_reports");
    current_statement__ = 159;
    return stan::model::rvalue(unobs_reports, "unobs_reports",
             stan::model::index_min_max((seeding_time + 1), t));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
discretised_pmf(const T0__& params_arg__, const int& n, const int& dist,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& params = stan::math::to_ref(params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 161;
    stan::math::validate_non_negative_index("lpmf", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> lpmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 163;
    stan::math::validate_non_negative_index("upper_lcdf", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> upper_lcdf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 176;
    if (stan::math::logical_eq(dist, 0)) {
      current_statement__ = 174;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 172;
        stan::model::assign(upper_lcdf,
          stan::math::lognormal_lcdf(i,
            stan::model::rvalue(params, "params", stan::model::index_uni(1)),
            stan::model::rvalue(params, "params", stan::model::index_uni(2))),
          "assigning variable upper_lcdf", stan::model::index_uni(i));
      }
    } else {
      current_statement__ = 171;
      if (stan::math::logical_eq(dist, 1)) {
        current_statement__ = 169;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 167;
          stan::model::assign(upper_lcdf,
            stan::math::gamma_lcdf(i,
              stan::model::rvalue(params, "params", stan::model::index_uni(1)),
              stan::model::rvalue(params, "params", stan::model::index_uni(2))),
            "assigning variable upper_lcdf", stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 165;
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "Unknown distribution function provided.");
        throw std::domain_error(errmsg_stream__.str());
      }
    }
    current_statement__ = 186;
    if (stan::math::logical_gt(n, 1)) {
      current_statement__ = 179;
      stan::model::assign(lpmf,
        stan::model::rvalue(upper_lcdf, "upper_lcdf",
          stan::model::index_uni(1)), "assigning variable lpmf",
        stan::model::index_uni(1));
      current_statement__ = 180;
      stan::model::assign(lpmf,
        stan::model::rvalue(upper_lcdf, "upper_lcdf",
          stan::model::index_uni(2)), "assigning variable lpmf",
        stan::model::index_uni(2));
      current_statement__ = 183;
      if (stan::math::logical_gt(n, 2)) {
        current_statement__ = 181;
        stan::model::assign(lpmf,
          stan::math::log_diff_exp(
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max(3, n)),
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max(1, (n - 2)))),
          "assigning variable lpmf", stan::model::index_min_max(3, n));
      }
      current_statement__ = 184;
      stan::model::assign(lpmf,
        stan::math::subtract(stan::model::deep_copy(lpmf),
          stan::math::log_sum_exp(
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max((n - 1), n)))),
        "assigning variable lpmf");
    } else {
      current_statement__ = 177;
      stan::model::assign(lpmf, 0, "assigning variable lpmf",
        stan::model::index_uni(1));
    }
    current_statement__ = 187;
    return stan::math::exp(lpmf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
get_delay_type_max(const int& delay_types, const std::vector<int>&
                   delay_types_p, const std::vector<int>& delay_types_id,
                   const std::vector<int>& delay_types_groups,
                   const std::vector<int>& delay_max, const std::vector<int>&
                   delay_np_pmf_groups, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 189;
    stan::math::validate_non_negative_index("ret", "delay_types", delay_types);
    std::vector<int> ret =
      std::vector<int>(delay_types, std::numeric_limits<int>::min());
    current_statement__ = 200;
    for (int i = 1; i <= delay_types; ++i) {
      current_statement__ = 191;
      stan::model::assign(ret, 0, "assigning variable ret",
        stan::model::index_uni(i));
      current_statement__ = 198;
      for (int j =
             stan::model::rvalue(delay_types_groups, "delay_types_groups",
               stan::model::index_uni(i)); j <=
           (stan::model::rvalue(delay_types_groups, "delay_types_groups",
              stan::model::index_uni((i + 1))) - 1); ++j) {
        current_statement__ = 196;
        if (stan::model::rvalue(delay_types_p, "delay_types_p",
              stan::model::index_uni(j))) {
          current_statement__ = 194;
          stan::model::assign(ret,
            (stan::model::rvalue(ret, "ret", stan::model::index_uni(i)) +
            stan::model::rvalue(delay_max, "delay_max",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(j))))), "assigning variable ret",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 192;
          stan::model::assign(ret,
            (stan::model::rvalue(ret, "ret", stan::model::index_uni(i)) +
            ((stan::model::rvalue(delay_np_pmf_groups, "delay_np_pmf_groups",
                stan::model::index_uni(
                  (stan::model::rvalue(delay_types_id, "delay_types_id",
                     stan::model::index_uni(j)) + 1))) -
            stan::model::rvalue(delay_np_pmf_groups, "delay_np_pmf_groups",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(j))))) - 1)),
            "assigning variable ret", stan::model::index_uni(i));
        }
      }
    }
    current_statement__ = 201;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T6__, typename T8__,
          stan::require_all_t<stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T6__>,
                stan::base_type_t<T8__>>,-1,1>
get_delay_rev_pmf(const int& delay_id, const int& len,
                  const std::vector<int>& delay_types_p,
                  const std::vector<int>& delay_types_id,
                  const std::vector<int>& delay_types_groups,
                  const std::vector<int>& delay_max, const T6__&
                  delay_np_pmf_arg__, const std::vector<int>&
                  delay_np_pmf_groups, const T8__& delay_params_arg__,
                  const std::vector<int>& delay_params_groups,
                  const std::vector<int>& delay_dist, const int&
                  left_truncate, const int& reverse_pmf, const int&
                  cumulative, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T6__>,
                             stan::base_type_t<T8__>>;
  int current_statement__ = 0;
  const auto& delay_np_pmf = stan::math::to_ref(delay_np_pmf_arg__);
  const auto& delay_params = stan::math::to_ref(delay_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 203;
    stan::math::validate_non_negative_index("pmf", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> pmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 204;
    stan::model::assign(pmf, stan::math::rep_vector(0, len),
      "assigning variable pmf");
    int current_len = std::numeric_limits<int>::min();
    current_statement__ = 205;
    current_len = 1;
    int new_len = std::numeric_limits<int>::min();
    current_statement__ = 230;
    for (int i =
           stan::model::rvalue(delay_types_groups, "delay_types_groups",
             stan::model::index_uni(delay_id)); i <=
         (stan::model::rvalue(delay_types_groups, "delay_types_groups",
            stan::model::index_uni((delay_id + 1))) - 1); ++i) {
      current_statement__ = 227;
      if (stan::model::rvalue(delay_types_p, "delay_types_p",
            stan::model::index_uni(i))) {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 216;
        start = stan::model::rvalue(delay_params_groups,
                  "delay_params_groups",
                  stan::model::index_uni(
                    stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i))));
        int end = std::numeric_limits<int>::min();
        current_statement__ = 217;
        end = (stan::model::rvalue(delay_params_groups,
                 "delay_params_groups",
                 stan::model::index_uni(
                   (stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i)) + 1)))
          - 1);
        current_statement__ = 218;
        stan::math::validate_non_negative_index("new_variable_pmf",
          "delay_max[delay_types_id[i]] + 1",
          (stan::model::rvalue(delay_max, "delay_max",
             stan::model::index_uni(
               stan::model::rvalue(delay_types_id, "delay_types_id",
                 stan::model::index_uni(i)))) + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> new_variable_pmf =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            delay_max,
                                                            "delay_max",
                                                            stan::model::index_uni(
                                                              stan::model::rvalue(
                                                                delay_types_id,
                                                                "delay_types_id",
                                                                stan::model::index_uni(
                                                                  i)))) + 1),
            DUMMY_VAR__);
        current_statement__ = 219;
        stan::model::assign(new_variable_pmf,
          discretised_pmf(
            stan::model::rvalue(delay_params, "delay_params",
              stan::model::index_min_max(start, end)),
            (stan::model::rvalue(delay_max, "delay_max",
               stan::model::index_uni(
                 stan::model::rvalue(delay_types_id, "delay_types_id",
                   stan::model::index_uni(i)))) + 1),
            stan::model::rvalue(delay_dist, "delay_dist",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(i)))), pstream__),
          "assigning variable new_variable_pmf");
        current_statement__ = 220;
        new_len = (current_len +
          stan::model::rvalue(delay_max, "delay_max",
            stan::model::index_uni(
              stan::model::rvalue(delay_types_id, "delay_types_id",
                stan::model::index_uni(i)))));
        current_statement__ = 225;
        if (stan::math::logical_eq(current_len, 1)) {
          current_statement__ = 223;
          stan::model::assign(pmf, new_variable_pmf,
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        } else {
          current_statement__ = 221;
          stan::model::assign(pmf,
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                stan::model::rvalue(pmf, "pmf",
                  stan::model::index_min_max(1, current_len))),
              stan::math::reverse(new_variable_pmf), new_len, pstream__),
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        }
      } else {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 207;
        start = stan::model::rvalue(delay_np_pmf_groups,
                  "delay_np_pmf_groups",
                  stan::model::index_uni(
                    stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i))));
        int end = std::numeric_limits<int>::min();
        current_statement__ = 208;
        end = (stan::model::rvalue(delay_np_pmf_groups,
                 "delay_np_pmf_groups",
                 stan::model::index_uni(
                   (stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i)) + 1)))
          - 1);
        current_statement__ = 209;
        new_len = ((current_len + end) - start);
        current_statement__ = 214;
        if (stan::math::logical_eq(current_len, 1)) {
          current_statement__ = 212;
          stan::model::assign(pmf,
            stan::model::rvalue(delay_np_pmf, "delay_np_pmf",
              stan::model::index_min_max(start, end)),
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        } else {
          current_statement__ = 210;
          stan::model::assign(pmf,
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                stan::model::rvalue(pmf, "pmf",
                  stan::model::index_min_max(1, current_len))),
              stan::math::reverse(
                stan::model::rvalue(delay_np_pmf, "delay_np_pmf",
                  stan::model::index_min_max(start, end))), new_len,
              pstream__), "assigning variable pmf",
            stan::model::index_min_max(1, new_len));
        }
      }
      current_statement__ = 228;
      current_len = new_len;
    }
    current_statement__ = 233;
    if (left_truncate) {
      current_statement__ = 231;
      stan::model::assign(pmf,
        stan::math::append_row(stan::math::rep_vector(0, left_truncate),
          stan::math::divide(
            stan::model::deep_copy(
              stan::model::rvalue(pmf, "pmf",
                stan::model::index_min_max((left_truncate + 1), len))),
            stan::math::sum(
              stan::model::rvalue(pmf, "pmf",
                stan::model::index_min_max((left_truncate + 1), len))))),
        "assigning variable pmf");
    }
    current_statement__ = 236;
    if (cumulative) {
      current_statement__ = 234;
      stan::model::assign(pmf,
        stan::math::cumulative_sum(stan::model::deep_copy(pmf)),
        "assigning variable pmf");
    }
    current_statement__ = 239;
    if (reverse_pmf) {
      current_statement__ = 237;
      stan::model::assign(pmf,
        stan::math::reverse(stan::model::deep_copy(pmf)),
        "assigning variable pmf");
    }
    current_statement__ = 240;
    return pmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
void
delays_lp(const T0__& delay_params_arg__, const T1__&
          delay_params_mean_arg__, const T2__& delay_params_sd_arg__,
          const std::vector<int>& delay_params_groups,
          const std::vector<int>& delay_dist, const std::vector<int>& weight,
          T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& delay_params = stan::math::to_ref(delay_params_arg__);
  const auto& delay_params_mean = stan::math::to_ref(delay_params_mean_arg__);
  const auto& delay_params_sd = stan::math::to_ref(delay_params_sd_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_delays = std::numeric_limits<int>::min();
    current_statement__ = 242;
    n_delays = (stan::math::num_elements(delay_params_groups) - 1);
    current_statement__ = 245;
    if (stan::math::logical_eq(n_delays, 0)) {
      current_statement__ = 243;
      return ;
    }
    current_statement__ = 258;
    for (int d = 1; d <= n_delays; ++d) {
      int start = std::numeric_limits<int>::min();
      current_statement__ = 246;
      start = stan::model::rvalue(delay_params_groups, "delay_params_groups",
                stan::model::index_uni(d));
      int end = std::numeric_limits<int>::min();
      current_statement__ = 247;
      end = (stan::model::rvalue(delay_params_groups, "delay_params_groups",
               stan::model::index_uni((d + 1)))
        - 1);
      current_statement__ = 256;
      for (int s = start; s <= end; ++s) {
        current_statement__ = 254;
        if (stan::math::logical_gt(
              stan::model::rvalue(delay_params_sd, "delay_params_sd",
                stan::model::index_uni(s)), 0)) {
          current_statement__ = 252;
          if (stan::math::logical_gt(
                stan::model::rvalue(weight, "weight",
                  stan::model::index_uni(d)), 1)) {
            current_statement__ = 250;
            lp_accum__.add((stan::model::rvalue(weight, "weight",
                              stan::model::index_uni(d)) *
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(delay_params, "delay_params",
                  stan::model::index_uni(s)),
                stan::model::rvalue(delay_params_mean, "delay_params_mean",
                  stan::model::index_uni(s)),
                stan::model::rvalue(delay_params_sd, "delay_params_sd",
                  stan::model::index_uni(s)))));
          } else {
            current_statement__ = 248;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(delay_params,
                               "delay_params", stan::model::index_uni(s)),
                             stan::model::rvalue(delay_params_mean,
                               "delay_params_mean", stan::model::index_uni(s)),
                             stan::model::rvalue(delay_params_sd,
                               "delay_params_sd", stan::model::index_uni(s))));
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
normal_lb_rng(const T0__& mu_arg__, const T1__& sigma_arg__, const T2__&
              lb_arg__, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& lb = stan::math::to_ref(lb_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int len = std::numeric_limits<int>::min();
    current_statement__ = 260;
    len = stan::math::num_elements(mu);
    current_statement__ = 261;
    stan::math::validate_non_negative_index("ret", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> ret =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 267;
    for (int i = 1; i <= len; ++i) {
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 263;
      p = stan::math::normal_cdf(
            stan::model::rvalue(lb, "lb", stan::model::index_uni(i)),
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
            stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)));
      local_scalar_t__ u = DUMMY_VAR__;
      current_statement__ = 264;
      u = stan::math::uniform_rng(p, 1, base_rng__);
      current_statement__ = 265;
      stan::model::assign(ret,
        ((stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)) *
        stan::math::inv_Phi(u)) +
        stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
        "assigning variable ret", stan::model::index_uni(i));
    }
    current_statement__ = 268;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
day_of_week_effect(const T0__& reports_arg__, const std::vector<int>&
                   day_of_week, const T2__& effect_arg__, std::ostream*
                   pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  const auto& effect = stan::math::to_ref(effect_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int wl = std::numeric_limits<int>::min();
    current_statement__ = 270;
    wl = stan::math::num_elements(effect);
    current_statement__ = 271;
    stan::math::validate_non_negative_index("scaled_effect", "wl", wl);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_effect =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(wl, DUMMY_VAR__);
    current_statement__ = 272;
    stan::model::assign(scaled_effect, stan::math::multiply(wl, effect),
      "assigning variable scaled_effect");
    current_statement__ = 273;
    return stan::math::elt_multiply(reports,
             stan::model::rvalue(scaled_effect, "scaled_effect",
               stan::model::index_multi(day_of_week)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 275;
    t = stan::math::num_elements(reports);
    current_statement__ = 276;
    stan::math::validate_non_negative_index("scaled_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 278;
    stan::model::assign(scaled_reports,
      stan::math::multiply(reports, frac_obs),
      "assigning variable scaled_reports");
    current_statement__ = 279;
    return scaled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
truncate_obs(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
             const int& reconstruct, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  const auto& trunc_rev_cmf = stan::math::to_ref(trunc_rev_cmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 281;
    t = stan::math::num_elements(reports);
    int trunc_max = std::numeric_limits<int>::min();
    current_statement__ = 282;
    trunc_max = stan::math::num_elements(trunc_rev_cmf);
    current_statement__ = 283;
    stan::math::validate_non_negative_index("trunc_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> trunc_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 284;
    stan::model::assign(trunc_reports, reports,
      "assigning variable trunc_reports");
    int joint_max = std::numeric_limits<int>::min();
    current_statement__ = 285;
    joint_max = stan::math::min(t, trunc_max);
    int first_t = std::numeric_limits<int>::min();
    current_statement__ = 286;
    first_t = ((t - joint_max) + 1);
    int first_trunc = std::numeric_limits<int>::min();
    current_statement__ = 287;
    first_trunc = ((trunc_max - joint_max) + 1);
    current_statement__ = 292;
    if (reconstruct) {
      current_statement__ = 290;
      stan::model::assign(trunc_reports,
        stan::math::elt_divide(
          stan::model::deep_copy(
            stan::model::rvalue(trunc_reports, "trunc_reports",
              stan::model::index_min_max(first_t, t))),
          stan::model::rvalue(trunc_rev_cmf, "trunc_rev_cmf",
            stan::model::index_min_max(first_trunc, trunc_max))),
        "assigning variable trunc_reports",
        stan::model::index_min_max(first_t, t));
    } else {
      current_statement__ = 288;
      stan::model::assign(trunc_reports,
        stan::math::elt_multiply(
          stan::model::deep_copy(
            stan::model::rvalue(trunc_reports, "trunc_reports",
              stan::model::index_min_max(first_t, t))),
          stan::model::rvalue(trunc_rev_cmf, "trunc_rev_cmf",
            stan::model::index_min_max(first_trunc, trunc_max))),
        "assigning variable trunc_reports",
        stan::model::index_min_max(first_t, t));
    }
    current_statement__ = 293;
    return trunc_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
void
truncation_lp(const std::vector<T0__>& truncation_mean,
              const std::vector<T1__>& truncation_sd,
              const std::vector<T2__>& trunc_mean_mean,
              const std::vector<T3__>& trunc_mean_sd,
              const std::vector<T4__>& trunc_sd_mean,
              const std::vector<T5__>& trunc_sd_sd, T_lp__& lp__,
              T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__>>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int truncation = std::numeric_limits<int>::min();
    current_statement__ = 295;
    truncation = stan::math::num_elements(truncation_mean);
    current_statement__ = 303;
    if (truncation) {
      current_statement__ = 298;
      if (stan::math::logical_gt(
            stan::model::rvalue(trunc_mean_sd, "trunc_mean_sd",
              stan::model::index_uni(1)), 0)) {
        current_statement__ = 296;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(truncation_mean,
                         trunc_mean_mean, trunc_mean_sd));
      }
      current_statement__ = 301;
      if (stan::math::logical_gt(
            stan::model::rvalue(trunc_sd_sd, "trunc_sd_sd",
              stan::model::index_uni(1)), 0)) {
        current_statement__ = 299;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(truncation_sd,
                         trunc_sd_mean, trunc_sd_sd));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T2__, typename T3__, typename T5__,
          typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T5__>>*>
void
report_lp(const std::vector<int>& cases, const std::vector<int>& case_times,
          const T2__& reports_arg__, const T3__& dispersion, const int&
          model_type, const T5__& weight, T_lp__& lp__, T_lp_accum__&
          lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             T3__, T5__>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 305;
    n = stan::math::num_elements(case_times);
    current_statement__ = 306;
    stan::math::validate_non_negative_index("obs_reports", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> obs_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 307;
    stan::model::assign(obs_reports,
      stan::model::rvalue(reports, "reports",
        stan::model::index_multi(case_times)),
      "assigning variable obs_reports");
    current_statement__ = 321;
    if (model_type) {
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 314;
      phi = stan::math::inv_square(dispersion);
      current_statement__ = 319;
      if (stan::math::logical_eq(weight, 1)) {
        current_statement__ = 317;
        lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(cases,
                         obs_reports, phi));
      } else {
        current_statement__ = 315;
        lp_accum__.add((stan::math::neg_binomial_2_lpmf<false>(cases,
                          obs_reports, phi) * weight));
      }
    } else {
      current_statement__ = 312;
      if (stan::math::logical_eq(weight, 1)) {
        current_statement__ = 310;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(cases, obs_reports));
      } else {
        current_statement__ = 308;
        lp_accum__.add((stan::math::poisson_lpmf<false>(cases, obs_reports) *
          weight));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
accumulate_reports(const T0__& reports_arg__, const std::vector<int>&
                   accumulate, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ot_h = std::numeric_limits<int>::min();
    current_statement__ = 323;
    ot_h = stan::math::num_elements(reports);
    current_statement__ = 324;
    stan::math::validate_non_negative_index("accumulated_reports", "ot_h",
      ot_h);
    Eigen::Matrix<local_scalar_t__,-1,1> accumulated_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot_h, DUMMY_VAR__);
    current_statement__ = 325;
    stan::model::assign(accumulated_reports, reports,
      "assigning variable accumulated_reports");
    current_statement__ = 330;
    for (int i = 1; i <= (ot_h - 1); ++i) {
      current_statement__ = 328;
      if (stan::model::rvalue(accumulate, "accumulate",
            stan::model::index_uni(i))) {
        current_statement__ = 326;
        stan::model::assign(accumulated_reports,
          (stan::model::rvalue(accumulated_reports, "accumulated_reports",
             stan::model::index_uni((i + 1))) +
          stan::model::rvalue(accumulated_reports, "accumulated_reports",
            stan::model::index_uni(i))),
          "assigning variable accumulated_reports",
          stan::model::index_uni((i + 1)));
      }
    }
    current_statement__ = 331;
    return accumulated_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>, T2__, T4__>,-1,1>
report_log_lik(const std::vector<int>& cases, const T1__& reports_arg__,
               const T2__& dispersion, const int& model_type, const T4__&
               weight, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             T2__, T4__>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 333;
    t = stan::math::num_elements(reports);
    current_statement__ = 334;
    stan::math::validate_non_negative_index("log_lik", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 345;
    if (stan::math::logical_eq(model_type, 0)) {
      current_statement__ = 343;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 341;
        stan::model::assign(log_lik,
          (stan::math::poisson_lpmf<false>(
             stan::model::rvalue(cases, "cases", stan::model::index_uni(i)),
             stan::model::rvalue(reports, "reports",
               stan::model::index_uni(i))) * weight),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
    } else {
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 336;
      phi = stan::math::inv_square(dispersion);
      current_statement__ = 339;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 337;
        stan::model::assign(log_lik,
          (stan::math::neg_binomial_2_lpmf<false>(
             stan::model::rvalue(cases, "cases", stan::model::index_uni(i)),
             stan::model::rvalue(reports, "reports",
               stan::model::index_uni(i)), dispersion) * weight),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
    }
    current_statement__ = 346;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
int
neg_binomial_2_safe_rng(const T0__& mu, const T1__& phi, RNG& base_rng__,
                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 356;
    if (stan::math::logical_lt(mu, 1e-8)) {
      current_statement__ = 354;
      return 0;
    } else {
      current_statement__ = 353;
      if (stan::math::logical_gt(phi, 1e4)) {
        current_statement__ = 351;
        return stan::math::poisson_rng(
                 (stan::math::logical_gt(mu, 1e8) ? 1e8 : mu), base_rng__);
      } else {
        local_scalar_t__ gamma_rate = DUMMY_VAR__;
        current_statement__ = 348;
        gamma_rate = stan::math::gamma_rng(phi, (phi / mu), base_rng__);
        current_statement__ = 349;
        return stan::math::poisson_rng(
                 (stan::math::logical_gt(gamma_rate, 1e8) ? 1e8 : gamma_rate),
                 base_rng__);
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>*>
std::vector<int>
report_rng(const T0__& reports_arg__, const T1__& dispersion, const int&
           model_type, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 358;
    t = stan::math::num_elements(reports);
    current_statement__ = 359;
    stan::math::validate_non_negative_index("sampled_reports", "t", t);
    std::vector<int> sampled_reports =
      std::vector<int>(t, std::numeric_limits<int>::min());
    local_scalar_t__ phi = DUMMY_VAR__;
    current_statement__ = 361;
    phi = 1e5;
    current_statement__ = 364;
    if (model_type) {
      current_statement__ = 362;
      phi = stan::math::inv_square(dispersion);
    }
    current_statement__ = 367;
    for (int s = 1; s <= t; ++s) {
      current_statement__ = 365;
      stan::model::assign(sampled_reports,
        neg_binomial_2_safe_rng(
          stan::model::rvalue(reports, "reports", stan::model::index_uni(s)),
          phi, base_rng__, pstream__), "assigning variable sampled_reports",
        stan::model::index_uni(s));
    }
    current_statement__ = 368;
    return sampled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
calculate_secondary(const T0__& scaled_reports_arg__, const T1__&
                    conv_reports_arg__, const std::vector<int>& obs,
                    const int& cumulative, const int& historic, const int&
                    primary_hist_additive, const int& current, const int&
                    primary_current_additive, const int& predict,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& scaled_reports = stan::math::to_ref(scaled_reports_arg__);
  const auto& conv_reports = stan::math::to_ref(conv_reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 370;
    t = stan::math::num_elements(scaled_reports);
    current_statement__ = 371;
    stan::math::validate_non_negative_index("secondary_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> secondary_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 372;
    stan::model::assign(secondary_reports, stan::math::rep_vector(0.0, t),
      "assigning variable secondary_reports");
    current_statement__ = 396;
    for (int i = 1; i <= t; ++i) {
      current_statement__ = 379;
      if ((stan::math::primitive_value(cumulative) &&
          stan::math::primitive_value(stan::math::logical_gt(i, 1)))) {
        current_statement__ = 377;
        if (stan::math::logical_gt(i, predict)) {
          current_statement__ = 375;
          stan::model::assign(secondary_reports,
            stan::model::rvalue(secondary_reports, "secondary_reports",
              stan::model::index_uni((i - 1))),
            "assigning variable secondary_reports", stan::model::index_uni(i));
        } else {
          current_statement__ = 373;
          stan::model::assign(secondary_reports,
            stan::model::rvalue(obs, "obs", stan::model::index_uni((i - 1))),
            "assigning variable secondary_reports", stan::model::index_uni(i));
        }
      }
      current_statement__ = 386;
      if (historic) {
        current_statement__ = 384;
        if (primary_hist_additive) {
          current_statement__ = 382;
          stan::model::assign(secondary_reports,
            (stan::model::rvalue(secondary_reports, "secondary_reports",
               stan::model::index_uni(i)) +
            stan::model::rvalue(conv_reports, "conv_reports",
              stan::model::index_uni(i))),
            "assigning variable secondary_reports", stan::model::index_uni(i));
        } else {
          current_statement__ = 380;
          stan::model::assign(secondary_reports,
            stan::math::fmax(0,
              (stan::model::rvalue(secondary_reports, "secondary_reports",
                 stan::model::index_uni(i)) -
              stan::model::rvalue(conv_reports, "conv_reports",
                stan::model::index_uni(i)))),
            "assigning variable secondary_reports", stan::model::index_uni(i));
        }
      }
      current_statement__ = 393;
      if (current) {
        current_statement__ = 391;
        if (primary_current_additive) {
          current_statement__ = 389;
          stan::model::assign(secondary_reports,
            (stan::model::rvalue(secondary_reports, "secondary_reports",
               stan::model::index_uni(i)) +
            stan::model::rvalue(scaled_reports, "scaled_reports",
              stan::model::index_uni(i))),
            "assigning variable secondary_reports", stan::model::index_uni(i));
        } else {
          current_statement__ = 387;
          stan::model::assign(secondary_reports,
            (stan::model::rvalue(secondary_reports, "secondary_reports",
               stan::model::index_uni(i)) -
            stan::model::rvalue(scaled_reports, "scaled_reports",
              stan::model::index_uni(i))),
            "assigning variable secondary_reports", stan::model::index_uni(i));
        }
      }
      current_statement__ = 394;
      stan::model::assign(secondary_reports, (1e-6 +
        stan::model::rvalue(secondary_reports, "secondary_reports",
          stan::model::index_uni(i))),
        "assigning variable secondary_reports", stan::model::index_uni(i));
    }
    current_statement__ = 397;
    return secondary_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>>
get_param(const int& id, const std::vector<int>& params_fixed_lookup,
          const std::vector<int>& params_variable_lookup, const T3__&
          params_value_arg__, const T4__& params_arg__, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& params_value = stan::math::to_ref(params_value_arg__);
  const auto& params = stan::math::to_ref(params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 406;
    if (stan::math::logical_eq(id, 0)) {
      current_statement__ = 404;
      return 0;
    } else {
      current_statement__ = 403;
      if (stan::model::rvalue(params_fixed_lookup, "params_fixed_lookup",
            stan::model::index_uni(id))) {
        current_statement__ = 401;
        return stan::model::rvalue(params_value, "params_value",
                 stan::model::index_uni(
                   stan::model::rvalue(params_fixed_lookup,
                     "params_fixed_lookup", stan::model::index_uni(id))));
      } else {
        current_statement__ = 399;
        return stan::model::rvalue(params, "params",
                 stan::model::index_uni(
                   stan::model::rvalue(params_variable_lookup,
                     "params_variable_lookup", stan::model::index_uni(id))));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
get_param(const int& id, const std::vector<int>& params_fixed_lookup,
          const std::vector<int>& params_variable_lookup, const T3__&
          params_value_arg__, const T4__& params_arg__, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& params_value = stan::math::to_ref(params_value_arg__);
  const auto& params = stan::math::to_ref(params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_samples = std::numeric_limits<int>::min();
    current_statement__ = 408;
    n_samples = stan::math::rows(params);
    current_statement__ = 416;
    if (stan::math::logical_eq(id, 0)) {
      current_statement__ = 414;
      return stan::math::rep_vector(0, n_samples);
    } else {
      current_statement__ = 413;
      if (stan::model::rvalue(params_fixed_lookup, "params_fixed_lookup",
            stan::model::index_uni(id))) {
        current_statement__ = 411;
        return stan::math::rep_vector(
                 stan::model::rvalue(params_value, "params_value",
                   stan::model::index_uni(
                     stan::model::rvalue(params_fixed_lookup,
                       "params_fixed_lookup", stan::model::index_uni(id)))),
                 n_samples);
      } else {
        current_statement__ = 409;
        return stan::model::rvalue(params, "params",
                 stan::model::index_omni(),
                 stan::model::index_uni(
                   stan::model::rvalue(params_variable_lookup,
                     "params_variable_lookup", stan::model::index_uni(id))));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T2__, typename T3__,
          typename T4__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
void
params_lp(const T0__& params_arg__, const std::vector<int>& prior_dist,
          const T2__& prior_dist_params_arg__, const T3__&
          params_lower_arg__, const T4__& params_upper_arg__, T_lp__& lp__,
          T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& params = stan::math::to_ref(params_arg__);
  const auto& prior_dist_params = stan::math::to_ref(prior_dist_params_arg__);
  const auto& params_lower = stan::math::to_ref(params_lower_arg__);
  const auto& params_upper = stan::math::to_ref(params_upper_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int params_id = std::numeric_limits<int>::min();
    current_statement__ = 418;
    params_id = 1;
    int num_params = std::numeric_limits<int>::min();
    current_statement__ = 419;
    num_params = stan::math::num_elements(params);
    current_statement__ = 441;
    for (int id = 1; id <= num_params; ++id) {
      current_statement__ = 439;
      if (stan::math::logical_eq(
            stan::model::rvalue(prior_dist, "prior_dist",
              stan::model::index_uni(id)), 0)) {
        current_statement__ = 434;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(
                         stan::model::rvalue(params, "params",
                           stan::model::index_uni(id)),
                         stan::model::rvalue(prior_dist_params,
                           "prior_dist_params",
                           stan::model::index_uni(params_id)),
                         stan::model::rvalue(prior_dist_params,
                           "prior_dist_params",
                           stan::model::index_uni((params_id + 1)))));
        current_statement__ = 436;
        if (stan::math::logical_lt(
              stan::model::rvalue(params, "params",
                stan::model::index_uni(id)),
              stan::model::rvalue(params_lower, "params_lower",
                stan::model::index_uni(id)))) {
          current_statement__ = 436;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 435;
          if (stan::math::logical_gt(
                stan::model::rvalue(params, "params",
                  stan::model::index_uni(id)),
                stan::model::rvalue(params_upper, "params_upper",
                  stan::model::index_uni(id)))) {
            current_statement__ = 435;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 435;
            lp_accum__.add(-stan::math::log_diff_exp(
                              stan::math::lognormal_lcdf(
                                stan::model::rvalue(params_upper,
                                  "params_upper", stan::model::index_uni(id)),
                                stan::model::rvalue(prior_dist_params,
                                  "prior_dist_params",
                                  stan::model::index_uni(params_id)),
                                stan::model::rvalue(prior_dist_params,
                                  "prior_dist_params",
                                  stan::model::index_uni((params_id + 1)))),
                              stan::math::lognormal_lcdf(
                                stan::model::rvalue(params_lower,
                                  "params_lower", stan::model::index_uni(id)),
                                stan::model::rvalue(prior_dist_params,
                                  "prior_dist_params",
                                  stan::model::index_uni(params_id)),
                                stan::model::rvalue(prior_dist_params,
                                  "prior_dist_params",
                                  stan::model::index_uni((params_id + 1))))));
          }
        }
        current_statement__ = 437;
        params_id = (params_id + 2);
      } else {
        current_statement__ = 433;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_dist, "prior_dist",
                stan::model::index_uni(id)), 1)) {
          current_statement__ = 428;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(params, "params",
                             stan::model::index_uni(id)),
                           stan::model::rvalue(prior_dist_params,
                             "prior_dist_params",
                             stan::model::index_uni(params_id)),
                           stan::model::rvalue(prior_dist_params,
                             "prior_dist_params",
                             stan::model::index_uni((params_id + 1)))));
          current_statement__ = 430;
          if (stan::math::logical_lt(
                stan::model::rvalue(params, "params",
                  stan::model::index_uni(id)),
                stan::model::rvalue(params_lower, "params_lower",
                  stan::model::index_uni(id)))) {
            current_statement__ = 430;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 429;
            if (stan::math::logical_gt(
                  stan::model::rvalue(params, "params",
                    stan::model::index_uni(id)),
                  stan::model::rvalue(params_upper, "params_upper",
                    stan::model::index_uni(id)))) {
              current_statement__ = 429;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 429;
              lp_accum__.add(-stan::math::log_diff_exp(
                                stan::math::gamma_lcdf(
                                  stan::model::rvalue(params_upper,
                                    "params_upper",
                                    stan::model::index_uni(id)),
                                  stan::model::rvalue(prior_dist_params,
                                    "prior_dist_params",
                                    stan::model::index_uni(params_id)),
                                  stan::model::rvalue(prior_dist_params,
                                    "prior_dist_params",
                                    stan::model::index_uni((params_id + 1)))),
                                stan::math::gamma_lcdf(
                                  stan::model::rvalue(params_lower,
                                    "params_lower",
                                    stan::model::index_uni(id)),
                                  stan::model::rvalue(prior_dist_params,
                                    "prior_dist_params",
                                    stan::model::index_uni(params_id)),
                                  stan::model::rvalue(prior_dist_params,
                                    "prior_dist_params",
                                    stan::model::index_uni((params_id + 1))))));
            }
          }
          current_statement__ = 431;
          params_id = (params_id + 2);
        } else {
          current_statement__ = 427;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_dist, "prior_dist",
                  stan::model::index_uni(id)), 2)) {
            current_statement__ = 422;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(params, "params",
                               stan::model::index_uni(id)),
                             stan::model::rvalue(prior_dist_params,
                               "prior_dist_params",
                               stan::model::index_uni(params_id)),
                             stan::model::rvalue(prior_dist_params,
                               "prior_dist_params",
                               stan::model::index_uni((params_id + 1)))));
            current_statement__ = 424;
            if (stan::math::logical_lt(
                  stan::model::rvalue(params, "params",
                    stan::model::index_uni(id)),
                  stan::model::rvalue(params_lower, "params_lower",
                    stan::model::index_uni(id)))) {
              current_statement__ = 424;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 423;
              if (stan::math::logical_gt(
                    stan::model::rvalue(params, "params",
                      stan::model::index_uni(id)),
                    stan::model::rvalue(params_upper, "params_upper",
                      stan::model::index_uni(id)))) {
                current_statement__ = 423;
                lp_accum__.add(stan::math::negative_infinity());
              } else {
                current_statement__ = 423;
                lp_accum__.add(-stan::math::log_diff_exp(
                                  stan::math::normal_lcdf(
                                    stan::model::rvalue(params_upper,
                                      "params_upper",
                                      stan::model::index_uni(id)),
                                    stan::model::rvalue(prior_dist_params,
                                      "prior_dist_params",
                                      stan::model::index_uni(params_id)),
                                    stan::model::rvalue(prior_dist_params,
                                      "prior_dist_params",
                                      stan::model::index_uni((params_id + 1)))),
                                  stan::math::normal_lcdf(
                                    stan::model::rvalue(params_lower,
                                      "params_lower",
                                      stan::model::index_uni(id)),
                                    stan::model::rvalue(prior_dist_params,
                                      "prior_dist_params",
                                      stan::model::index_uni(params_id)),
                                    stan::model::rvalue(prior_dist_params,
                                      "prior_dist_params",
                                      stan::model::index_uni((params_id + 1))))));
              }
            }
            current_statement__ = 425;
            params_id = (params_id + 2);
          } else {
            current_statement__ = 420;
            std::stringstream errmsg_stream__;
            stan::math::stan_print(&errmsg_stream__, "dist must be <= 2");
            throw std::domain_error(errmsg_stream__.str());
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_simulate_secondary final : public model_base_crtp<model_simulate_secondary> {
private:
  int n;
  int t;
  int h;
  int all_dates;
  std::vector<int> obs;
  Eigen::Matrix<double,-1,-1> primary_data__;
  int seeding_time;
  int cumulative;
  int historic;
  int primary_hist_additive;
  int current;
  int primary_current_additive;
  int delay_n;
  int delay_n_p;
  int delay_n_np;
  std::vector<int> delay_max;
  std::vector<int> delay_dist;
  int delay_np_pmf_length;
  Eigen::Matrix<double,-1,1> delay_np_pmf_data__;
  std::vector<int> delay_np_pmf_groups;
  std::vector<int> delay_weight;
  int delay_params_length;
  std::vector<Eigen::Matrix<double,-1,1>> delay_params;
  std::vector<int> delay_params_groups;
  int delay_types;
  std::vector<int> delay_types_p;
  std::vector<int> delay_types_id;
  std::vector<int> delay_types_groups;
  int delay_id;
  std::vector<int> day_of_week;
  int week_effect;
  std::vector<std::vector<double>> day_of_week_simplex;
  int obs_scale;
  int model_type;
  int trunc_id;
  int n_params_variable;
  int n_params_fixed;
  Eigen::Matrix<double,-1,1> params_lower_data__;
  Eigen::Matrix<double,-1,1> params_upper_data__;
  std::vector<int> params_fixed_lookup;
  std::vector<int> params_variable_lookup;
  Eigen::Matrix<double,-1,1> params_value_data__;
  std::vector<int> prior_dist;
  int prior_dist_params_length;
  Eigen::Matrix<double,-1,1> prior_dist_params_data__;
  int frac_obs_id;
  int dispersion_id;
  Eigen::Matrix<double,-1,-1> params_data__;
  std::vector<int> delay_type_max;
  int sim_secondary_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> primary{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_np_pmf{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> params_lower{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> params_upper{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> params_value{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_dist_params{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> params{nullptr, 0, 0};
public:
  ~model_simulate_secondary() {}
  model_simulate_secondary(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_simulate_secondary_namespace::model_simulate_secondary";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 37;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 38;
      context__.validate_dims("data initialization", "t", "int",
        std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      current_statement__ = 38;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 39;
      context__.validate_dims("data initialization", "h", "int",
        std::vector<size_t>{});
      h = std::numeric_limits<int>::min();
      current_statement__ = 39;
      h = context__.vals_i("h")[(1 - 1)];
      current_statement__ = 40;
      context__.validate_dims("data initialization", "all_dates", "int",
        std::vector<size_t>{});
      all_dates = std::numeric_limits<int>::min();
      current_statement__ = 40;
      all_dates = context__.vals_i("all_dates")[(1 - 1)];
      current_statement__ = 41;
      stan::math::validate_non_negative_index("obs", "t - h", (t - h));
      current_statement__ = 42;
      context__.validate_dims("data initialization", "obs", "int",
        std::vector<size_t>{static_cast<size_t>((t - h))});
      obs = std::vector<int>((t - h), std::numeric_limits<int>::min());
      current_statement__ = 42;
      obs = context__.vals_i("obs");
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "obs", obs, 0);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("primary", "n", n);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("primary", "t", t);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "primary", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(t)});
      primary_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, t,
                         std::numeric_limits<double>::quiet_NaN());
      new (&primary)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(primary_data__.data(), n, t);
      {
        std::vector<local_scalar_t__> primary_flat__;
        current_statement__ = 45;
        primary_flat__ = context__.vals_r("primary");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 45;
            stan::model::assign(primary, primary_flat__[(pos__ - 1)],
              "assigning variable primary", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 45;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 46;
      context__.validate_dims("data initialization", "seeding_time", "int",
        std::vector<size_t>{});
      seeding_time = std::numeric_limits<int>::min();
      current_statement__ = 46;
      seeding_time = context__.vals_i("seeding_time")[(1 - 1)];
      current_statement__ = 47;
      context__.validate_dims("data initialization", "cumulative", "int",
        std::vector<size_t>{});
      cumulative = std::numeric_limits<int>::min();
      current_statement__ = 47;
      cumulative = context__.vals_i("cumulative")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization", "historic", "int",
        std::vector<size_t>{});
      historic = std::numeric_limits<int>::min();
      current_statement__ = 48;
      historic = context__.vals_i("historic")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization", "primary_hist_additive",
        "int", std::vector<size_t>{});
      primary_hist_additive = std::numeric_limits<int>::min();
      current_statement__ = 49;
      primary_hist_additive = context__.vals_i("primary_hist_additive")[(1 -
        1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization", "current", "int",
        std::vector<size_t>{});
      current = std::numeric_limits<int>::min();
      current_statement__ = 50;
      current = context__.vals_i("current")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization",
        "primary_current_additive", "int", std::vector<size_t>{});
      primary_current_additive = std::numeric_limits<int>::min();
      current_statement__ = 51;
      primary_current_additive = context__.vals_i("primary_current_additive")[(1
        - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization", "delay_n", "int",
        std::vector<size_t>{});
      delay_n = std::numeric_limits<int>::min();
      current_statement__ = 52;
      delay_n = context__.vals_i("delay_n")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "delay_n", delay_n, 0);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "delay_n_p", "int",
        std::vector<size_t>{});
      delay_n_p = std::numeric_limits<int>::min();
      current_statement__ = 53;
      delay_n_p = context__.vals_i("delay_n_p")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "delay_n_p", delay_n_p,
        0);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "delay_n_np", "int",
        std::vector<size_t>{});
      delay_n_np = std::numeric_limits<int>::min();
      current_statement__ = 54;
      delay_n_np = context__.vals_i("delay_n_np")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "delay_n_np",
        delay_n_np, 0);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("delay_max", "delay_n_p",
        delay_n_p);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "delay_max", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_max = std::vector<int>(delay_n_p,
                    std::numeric_limits<int>::min());
      current_statement__ = 56;
      delay_max = context__.vals_i("delay_max");
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "delay_max", delay_max,
        1);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("delay_dist", "delay_n_p",
        delay_n_p);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "delay_dist", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_dist = std::vector<int>(delay_n_p,
                     std::numeric_limits<int>::min());
      current_statement__ = 58;
      delay_dist = context__.vals_i("delay_dist");
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "delay_dist",
        delay_dist, 0);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "delay_np_pmf_length",
        "int", std::vector<size_t>{});
      delay_np_pmf_length = std::numeric_limits<int>::min();
      current_statement__ = 59;
      delay_np_pmf_length = context__.vals_i("delay_np_pmf_length")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf_length",
        delay_np_pmf_length, 0);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("delay_np_pmf",
        "delay_np_pmf_length", delay_np_pmf_length);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "delay_np_pmf",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_np_pmf_length)});
      delay_np_pmf_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_np_pmf_length,
                              std::numeric_limits<double>::quiet_NaN());
      new (&delay_np_pmf)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_np_pmf_data__.data(),
        delay_np_pmf_length);
      {
        std::vector<local_scalar_t__> delay_np_pmf_flat__;
        current_statement__ = 61;
        delay_np_pmf_flat__ = context__.vals_r("delay_np_pmf");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= delay_np_pmf_length; ++sym1__) {
          current_statement__ = 61;
          stan::model::assign(delay_np_pmf, delay_np_pmf_flat__[(pos__ - 1)],
            "assigning variable delay_np_pmf", stan::model::index_uni(sym1__));
          current_statement__ = 61;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf",
        delay_np_pmf, 0);
      current_statement__ = 61;
      stan::math::check_less_or_equal(function__, "delay_np_pmf",
        delay_np_pmf, 1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("delay_np_pmf_groups",
        "delay_n_np + 1", (delay_n_np + 1));
      current_statement__ = 63;
      context__.validate_dims("data initialization", "delay_np_pmf_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_n_np + 1))});
      delay_np_pmf_groups = std::vector<int>((delay_n_np + 1),
                              std::numeric_limits<int>::min());
      current_statement__ = 63;
      delay_np_pmf_groups = context__.vals_i("delay_np_pmf_groups");
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf_groups",
        delay_np_pmf_groups, 1);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("delay_weight", "delay_n_p",
        delay_n_p);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "delay_weight", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_weight = std::vector<int>(delay_n_p,
                       std::numeric_limits<int>::min());
      current_statement__ = 65;
      delay_weight = context__.vals_i("delay_weight");
      current_statement__ = 66;
      context__.validate_dims("data initialization", "delay_params_length",
        "int", std::vector<size_t>{});
      delay_params_length = std::numeric_limits<int>::min();
      current_statement__ = 66;
      delay_params_length = context__.vals_i("delay_params_length")[(1 - 1)];
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "delay_params_length",
        delay_params_length, 0);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("delay_params", "n", n);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("delay_params",
        "delay_params_length", delay_params_length);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "delay_params",
        "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(delay_params_length)});
      delay_params = std::vector<Eigen::Matrix<double,-1,1>>(n,
                       Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
                         std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> delay_params_flat__;
        current_statement__ = 69;
        delay_params_flat__ = context__.vals_r("delay_params");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          current_statement__ = 69;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 69;
            stan::model::assign(delay_params, delay_params_flat__[(pos__ -
              1)], "assigning variable delay_params",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 69;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 70;
      stan::math::validate_non_negative_index("delay_params_groups",
        "delay_n_p + 1", (delay_n_p + 1));
      current_statement__ = 71;
      context__.validate_dims("data initialization", "delay_params_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_n_p + 1))});
      delay_params_groups = std::vector<int>((delay_n_p + 1),
                              std::numeric_limits<int>::min());
      current_statement__ = 71;
      delay_params_groups = context__.vals_i("delay_params_groups");
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "delay_params_groups",
        delay_params_groups, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "delay_types", "int",
        std::vector<size_t>{});
      delay_types = std::numeric_limits<int>::min();
      current_statement__ = 72;
      delay_types = context__.vals_i("delay_types")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "delay_types",
        delay_types, 0);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("delay_types_p", "delay_n",
        delay_n);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "delay_types_p", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n)});
      delay_types_p = std::vector<int>(delay_n,
                        std::numeric_limits<int>::min());
      current_statement__ = 74;
      delay_types_p = context__.vals_i("delay_types_p");
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "delay_types_p",
        delay_types_p, 0);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("delay_types_id", "delay_n",
        delay_n);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "delay_types_id", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n)});
      delay_types_id = std::vector<int>(delay_n,
                         std::numeric_limits<int>::min());
      current_statement__ = 76;
      delay_types_id = context__.vals_i("delay_types_id");
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "delay_types_id",
        delay_types_id, 0);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("delay_types_groups",
        "delay_types + 1", (delay_types + 1));
      current_statement__ = 78;
      context__.validate_dims("data initialization", "delay_types_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_types + 1))});
      delay_types_groups = std::vector<int>((delay_types + 1),
                             std::numeric_limits<int>::min());
      current_statement__ = 78;
      delay_types_groups = context__.vals_i("delay_types_groups");
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "delay_types_groups",
        delay_types_groups, 0);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "delay_id", "int",
        std::vector<size_t>{});
      delay_id = std::numeric_limits<int>::min();
      current_statement__ = 79;
      delay_id = context__.vals_i("delay_id")[(1 - 1)];
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "delay_id", delay_id, 0);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("day_of_week",
        "t - seeding_time", (t - seeding_time));
      current_statement__ = 81;
      context__.validate_dims("data initialization", "day_of_week", "int",
        std::vector<size_t>{static_cast<size_t>((t - seeding_time))});
      day_of_week = std::vector<int>((t - seeding_time),
                      std::numeric_limits<int>::min());
      current_statement__ = 81;
      day_of_week = context__.vals_i("day_of_week");
      current_statement__ = 82;
      context__.validate_dims("data initialization", "week_effect", "int",
        std::vector<size_t>{});
      week_effect = std::numeric_limits<int>::min();
      current_statement__ = 82;
      week_effect = context__.vals_i("week_effect")[(1 - 1)];
      current_statement__ = 83;
      stan::math::validate_non_negative_index("day_of_week_simplex", "n", n);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("day_of_week_simplex",
        "week_effect", week_effect);
      current_statement__ = 85;
      context__.validate_dims("data initialization", "day_of_week_simplex",
        "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(week_effect)});
      day_of_week_simplex = std::vector<std::vector<double>>(n,
                              std::vector<double>(week_effect,
                                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> day_of_week_simplex_flat__;
        current_statement__ = 85;
        day_of_week_simplex_flat__ = context__.vals_r("day_of_week_simplex");
        current_statement__ = 85;
        pos__ = 1;
        current_statement__ = 85;
        for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
          current_statement__ = 85;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 85;
            stan::model::assign(day_of_week_simplex,
              day_of_week_simplex_flat__[(pos__ - 1)],
              "assigning variable day_of_week_simplex",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 85;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 85;
      stan::math::check_greater_or_equal(function__, "day_of_week_simplex",
        day_of_week_simplex, 0);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "obs_scale", "int",
        std::vector<size_t>{});
      obs_scale = std::numeric_limits<int>::min();
      current_statement__ = 86;
      obs_scale = context__.vals_i("obs_scale")[(1 - 1)];
      current_statement__ = 87;
      context__.validate_dims("data initialization", "model_type", "int",
        std::vector<size_t>{});
      model_type = std::numeric_limits<int>::min();
      current_statement__ = 87;
      model_type = context__.vals_i("model_type")[(1 - 1)];
      current_statement__ = 88;
      context__.validate_dims("data initialization", "trunc_id", "int",
        std::vector<size_t>{});
      trunc_id = std::numeric_limits<int>::min();
      current_statement__ = 88;
      trunc_id = context__.vals_i("trunc_id")[(1 - 1)];
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "trunc_id", trunc_id, 0);
      current_statement__ = 89;
      context__.validate_dims("data initialization", "n_params_variable",
        "int", std::vector<size_t>{});
      n_params_variable = std::numeric_limits<int>::min();
      current_statement__ = 89;
      n_params_variable = context__.vals_i("n_params_variable")[(1 - 1)];
      current_statement__ = 89;
      stan::math::check_greater_or_equal(function__, "n_params_variable",
        n_params_variable, 0);
      current_statement__ = 90;
      context__.validate_dims("data initialization", "n_params_fixed", "int",
        std::vector<size_t>{});
      n_params_fixed = std::numeric_limits<int>::min();
      current_statement__ = 90;
      n_params_fixed = context__.vals_i("n_params_fixed")[(1 - 1)];
      current_statement__ = 90;
      stan::math::check_greater_or_equal(function__, "n_params_fixed",
        n_params_fixed, 0);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("params_lower",
        "n_params_variable", n_params_variable);
      current_statement__ = 92;
      context__.validate_dims("data initialization", "params_lower",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_params_variable)});
      params_lower_data__ = Eigen::Matrix<double,-1,1>::Constant(n_params_variable,
                              std::numeric_limits<double>::quiet_NaN());
      new (&params_lower)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(params_lower_data__.data(),
        n_params_variable);
      {
        std::vector<local_scalar_t__> params_lower_flat__;
        current_statement__ = 92;
        params_lower_flat__ = context__.vals_r("params_lower");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= n_params_variable; ++sym1__) {
          current_statement__ = 92;
          stan::model::assign(params_lower, params_lower_flat__[(pos__ - 1)],
            "assigning variable params_lower", stan::model::index_uni(sym1__));
          current_statement__ = 92;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 93;
      stan::math::validate_non_negative_index("params_upper",
        "n_params_variable", n_params_variable);
      current_statement__ = 94;
      context__.validate_dims("data initialization", "params_upper",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_params_variable)});
      params_upper_data__ = Eigen::Matrix<double,-1,1>::Constant(n_params_variable,
                              std::numeric_limits<double>::quiet_NaN());
      new (&params_upper)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(params_upper_data__.data(),
        n_params_variable);
      {
        std::vector<local_scalar_t__> params_upper_flat__;
        current_statement__ = 94;
        params_upper_flat__ = context__.vals_r("params_upper");
        current_statement__ = 94;
        pos__ = 1;
        current_statement__ = 94;
        for (int sym1__ = 1; sym1__ <= n_params_variable; ++sym1__) {
          current_statement__ = 94;
          stan::model::assign(params_upper, params_upper_flat__[(pos__ - 1)],
            "assigning variable params_upper", stan::model::index_uni(sym1__));
          current_statement__ = 94;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 95;
      stan::math::validate_non_negative_index("params_fixed_lookup",
        "n_params_fixed + n_params_variable", (n_params_fixed +
        n_params_variable));
      current_statement__ = 96;
      context__.validate_dims("data initialization", "params_fixed_lookup",
        "int",
        std::vector<size_t>{static_cast<size_t>((n_params_fixed +
                              n_params_variable))});
      params_fixed_lookup = std::vector<int>((n_params_fixed +
                              n_params_variable),
                              std::numeric_limits<int>::min());
      current_statement__ = 96;
      params_fixed_lookup = context__.vals_i("params_fixed_lookup");
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "params_fixed_lookup",
        params_fixed_lookup, 0);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("params_variable_lookup",
        "n_params_fixed + n_params_variable", (n_params_fixed +
        n_params_variable));
      current_statement__ = 98;
      context__.validate_dims("data initialization",
        "params_variable_lookup", "int",
        std::vector<size_t>{static_cast<size_t>((n_params_fixed +
                              n_params_variable))});
      params_variable_lookup = std::vector<int>((n_params_fixed +
                                 n_params_variable),
                                 std::numeric_limits<int>::min());
      current_statement__ = 98;
      params_variable_lookup = context__.vals_i("params_variable_lookup");
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__,
        "params_variable_lookup", params_variable_lookup, 0);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("params_value",
        "n_params_fixed", n_params_fixed);
      current_statement__ = 100;
      context__.validate_dims("data initialization", "params_value",
        "double", std::vector<size_t>{static_cast<size_t>(n_params_fixed)});
      params_value_data__ = Eigen::Matrix<double,-1,1>::Constant(n_params_fixed,
                              std::numeric_limits<double>::quiet_NaN());
      new (&params_value)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(params_value_data__.data(),
        n_params_fixed);
      {
        std::vector<local_scalar_t__> params_value_flat__;
        current_statement__ = 100;
        params_value_flat__ = context__.vals_r("params_value");
        current_statement__ = 100;
        pos__ = 1;
        current_statement__ = 100;
        for (int sym1__ = 1; sym1__ <= n_params_fixed; ++sym1__) {
          current_statement__ = 100;
          stan::model::assign(params_value, params_value_flat__[(pos__ - 1)],
            "assigning variable params_value", stan::model::index_uni(sym1__));
          current_statement__ = 100;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 101;
      stan::math::validate_non_negative_index("prior_dist",
        "n_params_variable", n_params_variable);
      current_statement__ = 102;
      context__.validate_dims("data initialization", "prior_dist", "int",
        std::vector<size_t>{static_cast<size_t>(n_params_variable)});
      prior_dist = std::vector<int>(n_params_variable,
                     std::numeric_limits<int>::min());
      current_statement__ = 102;
      prior_dist = context__.vals_i("prior_dist");
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "prior_dist",
        prior_dist, 0);
      current_statement__ = 103;
      context__.validate_dims("data initialization",
        "prior_dist_params_length", "int", std::vector<size_t>{});
      prior_dist_params_length = std::numeric_limits<int>::min();
      current_statement__ = 103;
      prior_dist_params_length = context__.vals_i("prior_dist_params_length")[(1
        - 1)];
      current_statement__ = 103;
      stan::math::check_greater_or_equal(function__,
        "prior_dist_params_length", prior_dist_params_length, 0);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("prior_dist_params",
        "prior_dist_params_length", prior_dist_params_length);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "prior_dist_params",
        "double",
        std::vector<size_t>{static_cast<size_t>(prior_dist_params_length)});
      prior_dist_params_data__ = Eigen::Matrix<double,-1,1>::Constant(prior_dist_params_length,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&prior_dist_params)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_dist_params_data__.data(),
        prior_dist_params_length);
      {
        std::vector<local_scalar_t__> prior_dist_params_flat__;
        current_statement__ = 105;
        prior_dist_params_flat__ = context__.vals_r("prior_dist_params");
        current_statement__ = 105;
        pos__ = 1;
        current_statement__ = 105;
        for (int sym1__ = 1; sym1__ <= prior_dist_params_length; ++sym1__) {
          current_statement__ = 105;
          stan::model::assign(prior_dist_params,
            prior_dist_params_flat__[(pos__ - 1)],
            "assigning variable prior_dist_params",
            stan::model::index_uni(sym1__));
          current_statement__ = 105;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 106;
      context__.validate_dims("data initialization", "frac_obs_id", "int",
        std::vector<size_t>{});
      frac_obs_id = std::numeric_limits<int>::min();
      current_statement__ = 106;
      frac_obs_id = context__.vals_i("frac_obs_id")[(1 - 1)];
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "frac_obs_id",
        frac_obs_id, 0);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "dispersion_id", "int",
        std::vector<size_t>{});
      dispersion_id = std::numeric_limits<int>::min();
      current_statement__ = 107;
      dispersion_id = context__.vals_i("dispersion_id")[(1 - 1)];
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "dispersion_id",
        dispersion_id, 0);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("params", "n", n);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("params", "n_params_variable",
        n_params_variable);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "params", "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(n_params_variable)});
      params_data__ = Eigen::Matrix<double,-1,-1>::Constant(n,
                        n_params_variable,
                        std::numeric_limits<double>::quiet_NaN());
      new (&params)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(params_data__.data(), n,
        n_params_variable);
      {
        std::vector<local_scalar_t__> params_flat__;
        current_statement__ = 110;
        params_flat__ = context__.vals_r("params");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= n_params_variable; ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 110;
            stan::model::assign(params, params_flat__[(pos__ - 1)],
              "assigning variable params", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 110;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 111;
      stan::math::validate_non_negative_index("delay_type_max",
        "delay_types", delay_types);
      current_statement__ = 112;
      delay_type_max = std::vector<int>(delay_types,
                         std::numeric_limits<int>::min());
      current_statement__ = 112;
      stan::model::assign(delay_type_max,
        get_delay_type_max(delay_types, delay_types_p, delay_types_id,
          delay_types_groups, delay_max, delay_np_pmf_groups, pstream__),
        "assigning variable delay_type_max");
      current_statement__ = 113;
      stan::math::validate_non_negative_index("sim_secondary", "n", n);
      current_statement__ = 114;
      sim_secondary_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 114;
      sim_secondary_2dim__ = (all_dates ? t : h);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("sim_secondary",
        "all_dates ? t : h", sim_secondary_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "model_simulate_secondary";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_simulate_secondary_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_simulate_secondary_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<std::vector<int>> sim_secondary =
        std::vector<std::vector<int>>(n,
          std::vector<int>(sim_secondary_2dim__,
            std::numeric_limits<int>::min()));
      {
        current_statement__ = 2;
        stan::math::validate_non_negative_index("dispersion", "n", n);
        Eigen::Matrix<double,-1,1> dispersion =
          Eigen::Matrix<double,-1,1>::Constant(n,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 3;
        stan::model::assign(dispersion,
          get_param(dispersion_id, params_fixed_lookup,
            params_variable_lookup, params_value, params, pstream__),
          "assigning variable dispersion");
        current_statement__ = 4;
        stan::math::validate_non_negative_index("frac_obs", "n", n);
        Eigen::Matrix<double,-1,1> frac_obs =
          Eigen::Matrix<double,-1,1>::Constant(n,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 5;
        stan::model::assign(frac_obs,
          get_param(frac_obs_id, params_fixed_lookup, params_variable_lookup,
            params_value, params, pstream__), "assigning variable frac_obs");
        current_statement__ = 35;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 6;
          stan::math::validate_non_negative_index("secondary", "t", t);
          Eigen::Matrix<double,-1,1> secondary =
            Eigen::Matrix<double,-1,1>::Constant(t,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 8;
          stan::math::validate_non_negative_index("scaled", "t", t);
          Eigen::Matrix<double,-1,1> scaled =
            Eigen::Matrix<double,-1,1>::Constant(t,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 10;
          stan::math::validate_non_negative_index("convolved", "t", t);
          Eigen::Matrix<double,-1,1> convolved =
            Eigen::Matrix<double,-1,1>::Constant(t,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 11;
          stan::model::assign(convolved, stan::math::rep_vector(1e-5, t),
            "assigning variable convolved");
          current_statement__ = 16;
          if (obs_scale) {
            current_statement__ = 14;
            stan::model::assign(scaled,
              scale_obs(
                stan::math::to_vector(
                  stan::model::rvalue(primary, "primary",
                    stan::model::index_uni(i))),
                stan::model::rvalue(frac_obs, "frac_obs",
                  stan::model::index_uni(i)), pstream__),
              "assigning variable scaled");
          } else {
            current_statement__ = 12;
            stan::model::assign(scaled,
              stan::math::to_vector(
                stan::model::rvalue(primary, "primary",
                  stan::model::index_uni(i))), "assigning variable scaled");
          }
          current_statement__ = 23;
          if (delay_id) {
            current_statement__ = 19;
            stan::math::validate_non_negative_index("delay_rev_pmf",
              "delay_type_max[delay_id] + 1",
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(delay_id)) + 1));
            Eigen::Matrix<double,-1,1> delay_rev_pmf =
              Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(
                                                      delay_type_max,
                                                      "delay_type_max",
                                                      stan::model::index_uni(
                                                        delay_id)) + 1),
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 20;
            stan::model::assign(delay_rev_pmf,
              get_delay_rev_pmf(delay_id,
                (stan::model::rvalue(delay_type_max, "delay_type_max",
                   stan::model::index_uni(delay_id)) + 1), delay_types_p,
                delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
                delay_np_pmf_groups,
                stan::model::rvalue(delay_params, "delay_params",
                  stan::model::index_uni(i)), delay_params_groups,
                delay_dist, 0, 1, 0, pstream__),
              "assigning variable delay_rev_pmf");
            current_statement__ = 21;
            stan::model::assign(convolved,
              stan::math::add(stan::model::deep_copy(convolved),
                convolve_to_report(scaled, delay_rev_pmf, 0, pstream__)),
              "assigning variable convolved");
          } else {
            current_statement__ = 17;
            stan::model::assign(convolved,
              stan::math::add(stan::model::deep_copy(convolved), scaled),
              "assigning variable convolved");
          }
          current_statement__ = 24;
          stan::model::assign(secondary,
            calculate_secondary(scaled, convolved, obs, cumulative, historic,
              primary_hist_additive, current, primary_current_additive, ((t -
              h) + 1), pstream__), "assigning variable secondary");
          current_statement__ = 27;
          if (stan::math::logical_gt(week_effect, 1)) {
            current_statement__ = 25;
            stan::model::assign(secondary,
              day_of_week_effect(stan::model::deep_copy(secondary),
                day_of_week,
                stan::math::to_vector(
                  stan::model::rvalue(day_of_week_simplex,
                    "day_of_week_simplex", stan::model::index_uni(i))),
                pstream__), "assigning variable secondary");
          }
          current_statement__ = 32;
          if (trunc_id) {
            current_statement__ = 28;
            stan::math::validate_non_negative_index("trunc_rev_cmf",
              "delay_type_max[trunc_id] + 1",
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(trunc_id)) + 1));
            Eigen::Matrix<double,-1,1> trunc_rev_cmf =
              Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(
                                                      delay_type_max,
                                                      "delay_type_max",
                                                      stan::model::index_uni(
                                                        trunc_id)) + 1),
                std::numeric_limits<double>::quiet_NaN());
            current_statement__ = 29;
            stan::model::assign(trunc_rev_cmf,
              get_delay_rev_pmf(trunc_id,
                (stan::model::rvalue(delay_type_max, "delay_type_max",
                   stan::model::index_uni(trunc_id)) + 1), delay_types_p,
                delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
                delay_np_pmf_groups,
                stan::model::rvalue(delay_params, "delay_params",
                  stan::model::index_uni(i)), delay_params_groups,
                delay_dist, 0, 1, 1, pstream__),
              "assigning variable trunc_rev_cmf");
            current_statement__ = 30;
            stan::model::assign(secondary,
              truncate_obs(stan::model::deep_copy(secondary), trunc_rev_cmf,
                0, pstream__), "assigning variable secondary");
          }
          current_statement__ = 33;
          stan::model::assign(sim_secondary,
            report_rng(stan::math::tail(secondary, (all_dates ? t : h)),
              stan::model::rvalue(dispersion, "dispersion",
                stan::model::index_uni(i)), model_type, base_rng__, pstream__),
            "assigning variable sim_secondary", stan::model::index_uni(i));
        }
      }
      for (int sym1__ = 1; sym1__ <= sim_secondary_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          out__.write(sim_secondary[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"sim_secondary"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(sim_secondary_2dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= sim_secondary_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "sim_secondary" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= sim_secondary_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "sim_secondary" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sim_secondary\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(sim_secondary_2dim__) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sim_secondary\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(sim_secondary_2dim__) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((n *
      sim_secondary_2dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((n *
      sim_secondary_2dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_simulate_secondary_namespace::model_simulate_secondary;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_simulate_secondary_namespace::profiles__;
}
#endif
#endif
