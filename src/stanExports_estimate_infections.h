// Generated by rstantools.  Do not edit by hand.

/*
    EpiNow2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiNow2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiNow2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_estimate_infections_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'estimate_infections', line 685, column 2 to column 61)",
                                                      " (in 'estimate_infections', line 686, column 2 to column 45)",
                                                      " (in 'estimate_infections', line 687, column 2 to column 28)",
                                                      " (in 'estimate_infections', line 689, column 2 to column 27)",
                                                      " (in 'estimate_infections', line 690, column 2 to column 45)",
                                                      " (in 'estimate_infections', line 691, column 2 to column 68)",
                                                      " (in 'estimate_infections', line 692, column 2 to column 48)",
                                                      " (in 'estimate_infections', line 693, column 2 to column 30)",
                                                      " (in 'estimate_infections', line 695, column 2 to column 35)",
                                                      " (in 'estimate_infections', line 696, column 2 to column 44)",
                                                      " (in 'estimate_infections', line 697, column 2 to column 43)",
                                                      " (in 'estimate_infections', line 698, column 2 to column 55)",
                                                      " (in 'estimate_infections', line 699, column 2 to column 44)",
                                                      " (in 'estimate_infections', line 702, column 2 to column 40)",
                                                      " (in 'estimate_infections', line 703, column 2 to column 70)",
                                                      " (in 'estimate_infections', line 704, column 2 to column 23)",
                                                      " (in 'estimate_infections', line 705, column 2 to column 23)",
                                                      " (in 'estimate_infections', line 706, column 2 to column 25)",
                                                      " (in 'estimate_infections', line 707, column 2 to column 43)",
                                                      " (in 'estimate_infections', line 710, column 4 to column 65)",
                                                      " (in 'estimate_infections', line 709, column 14 to line 711, column 3)",
                                                      " (in 'estimate_infections', line 709, column 2 to line 711, column 3)",
                                                      " (in 'estimate_infections', line 729, column 4 to line 731, column 6)",
                                                      " (in 'estimate_infections', line 727, column 9 to line 732, column 3)",
                                                      " (in 'estimate_infections', line 714, column 4 to line 719, column 6)",
                                                      " (in 'estimate_infections', line 720, column 4 to line 722, column 6)",
                                                      " (in 'estimate_infections', line 723, column 4 to line 726, column 6)",
                                                      " (in 'estimate_infections', line 713, column 18 to line 727, column 3)",
                                                      " (in 'estimate_infections', line 713, column 2 to line 732, column 3)",
                                                      " (in 'estimate_infections', line 743, column 4 to column 47)",
                                                      " (in 'estimate_infections', line 742, column 9 to line 744, column 3)",
                                                      " (in 'estimate_infections', line 735, column 11 to column 35)",
                                                      " (in 'estimate_infections', line 735, column 4 to line 740, column 6)",
                                                      " (in 'estimate_infections', line 741, column 4 to column 74)",
                                                      " (in 'estimate_infections', line 734, column 16 to line 742, column 3)",
                                                      " (in 'estimate_infections', line 734, column 2 to line 744, column 3)",
                                                      " (in 'estimate_infections', line 747, column 3 to column 75)",
                                                      " (in 'estimate_infections', line 746, column 23 to line 748, column 3)",
                                                      " (in 'estimate_infections', line 746, column 2 to line 748, column 3)",
                                                      " (in 'estimate_infections', line 751, column 3 to column 45)",
                                                      " (in 'estimate_infections', line 750, column 16 to line 752, column 2)",
                                                      " (in 'estimate_infections', line 750, column 1 to line 752, column 2)",
                                                      " (in 'estimate_infections', line 763, column 3 to column 31)",
                                                      " (in 'estimate_infections', line 762, column 8 to line 764, column 2)",
                                                      " (in 'estimate_infections', line 755, column 11 to column 35)",
                                                      " (in 'estimate_infections', line 755, column 4 to line 760, column 6)",
                                                      " (in 'estimate_infections', line 761, column 4 to column 60)",
                                                      " (in 'estimate_infections', line 754, column 15 to line 762, column 2)",
                                                      " (in 'estimate_infections', line 754, column 1 to line 764, column 2)",
                                                      " (in 'estimate_infections', line 798, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 799, column 2 to column 41)",
                                                      " (in 'estimate_infections', line 800, column 2 to column 21)",
                                                      " (in 'estimate_infections', line 801, column 2 to column 15)",
                                                      " (in 'estimate_infections', line 802, column 2 to column 14)",
                                                      " (in 'estimate_infections', line 803, column 2 to column 45)",
                                                      " (in 'estimate_infections', line 811, column 10 to column 19)",
                                                      " (in 'estimate_infections', line 811, column 4 to line 812, column 49)",
                                                      " (in 'estimate_infections', line 813, column 10 to column 19)",
                                                      " (in 'estimate_infections', line 813, column 4 to line 814, column 45)",
                                                      " (in 'estimate_infections', line 815, column 11 to column 32)",
                                                      " (in 'estimate_infections', line 815, column 4 to line 820, column 6)",
                                                      " (in 'estimate_infections', line 821, column 4 to column 50)",
                                                      " (in 'estimate_infections', line 822, column 4 to column 57)",
                                                      " (in 'estimate_infections', line 824, column 4 to line 826, column 6)",
                                                      " (in 'estimate_infections', line 828, column 4 to column 44)",
                                                      " (in 'estimate_infections', line 809, column 9 to line 829, column 3)",
                                                      " (in 'estimate_infections', line 806, column 4 to column 42)",
                                                      " (in 'estimate_infections', line 807, column 4 to column 49)",
                                                      " (in 'estimate_infections', line 808, column 4 to column 40)",
                                                      " (in 'estimate_infections', line 804, column 17 to line 809, column 3)",
                                                      " (in 'estimate_infections', line 804, column 2 to line 829, column 3)",
                                                      " (in 'estimate_infections', line 831, column 2 to column 61)",
                                                      " (in 'estimate_infections', line 834, column 4 to line 836, column 6)",
                                                      " (in 'estimate_infections', line 833, column 25 to line 837, column 3)",
                                                      " (in 'estimate_infections', line 833, column 2 to line 837, column 3)",
                                                      " (in 'estimate_infections', line 769, column 4 to line 771, column 6)",
                                                      " (in 'estimate_infections', line 768, column 14 to line 772, column 3)",
                                                      " (in 'estimate_infections', line 768, column 2 to line 772, column 3)",
                                                      " (in 'estimate_infections', line 774, column 2 to line 778, column 4)",
                                                      " (in 'estimate_infections', line 781, column 4 to line 784, column 6)",
                                                      " (in 'estimate_infections', line 779, column 18 to line 785, column 3)",
                                                      " (in 'estimate_infections', line 779, column 2 to line 785, column 3)",
                                                      " (in 'estimate_infections', line 788, column 60 to column 61)",
                                                      " (in 'estimate_infections', line 788, column 57 to column 58)",
                                                      " (in 'estimate_infections', line 788, column 4 to column 63)",
                                                      " (in 'estimate_infections', line 787, column 17 to line 789, column 3)",
                                                      " (in 'estimate_infections', line 787, column 2 to line 789, column 3)",
                                                      " (in 'estimate_infections', line 792, column 4 to line 794, column 6)",
                                                      " (in 'estimate_infections', line 791, column 18 to line 795, column 3)",
                                                      " (in 'estimate_infections', line 791, column 2 to line 795, column 3)",
                                                      " (in 'estimate_infections', line 602, column 2 to column 8)",
                                                      " (in 'estimate_infections', line 603, column 2 to column 19)",
                                                      " (in 'estimate_infections', line 604, column 2 to column 14)",
                                                      " (in 'estimate_infections', line 605, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 606, column 8 to column 34)",
                                                      " (in 'estimate_infections', line 606, column 2 to column 57)",
                                                      " (in 'estimate_infections', line 607, column 20 to column 21)",
                                                      " (in 'estimate_infections', line 607, column 2 to column 37)",
                                                      " (in 'estimate_infections', line 609, column 2 to column 25)",
                                                      " (in 'estimate_infections', line 610, column 2 to column 27)",
                                                      " (in 'estimate_infections', line 611, column 2 to column 28)",
                                                      " (in 'estimate_infections', line 612, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 612, column 2 to column 40)",
                                                      " (in 'estimate_infections', line 613, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 613, column 2 to column 49)",
                                                      " (in 'estimate_infections', line 614, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 614, column 2 to column 49)",
                                                      " (in 'estimate_infections', line 615, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 615, column 2 to column 47)",
                                                      " (in 'estimate_infections', line 616, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 616, column 2 to column 44)",
                                                      " (in 'estimate_infections', line 617, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 617, column 2 to column 45)",
                                                      " (in 'estimate_infections', line 618, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 619, column 31 to column 47)",
                                                      " (in 'estimate_infections', line 619, column 2 to column 62)",
                                                      " (in 'estimate_infections', line 620, column 8 to column 22)",
                                                      " (in 'estimate_infections', line 620, column 2 to column 59)",
                                                      " (in 'estimate_infections', line 621, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 621, column 2 to column 47)",
                                                      " (in 'estimate_infections', line 623, column 2 to column 29)",
                                                      " (in 'estimate_infections', line 624, column 8 to column 15)",
                                                      " (in 'estimate_infections', line 624, column 2 to column 46)",
                                                      " (in 'estimate_infections', line 625, column 8 to column 15)",
                                                      " (in 'estimate_infections', line 625, column 2 to column 47)",
                                                      " (in 'estimate_infections', line 626, column 8 to column 23)",
                                                      " (in 'estimate_infections', line 626, column 2 to column 59)",
                                                      " (in 'estimate_infections', line 628, column 2 to column 9)",
                                                      " (in 'estimate_infections', line 629, column 2 to column 17)",
                                                      " (in 'estimate_infections', line 630, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 631, column 2 to column 16)",
                                                      " (in 'estimate_infections', line 632, column 2 to column 23)",
                                                      " (in 'estimate_infections', line 633, column 2 to column 23)",
                                                      " (in 'estimate_infections', line 634, column 2 to column 16)",
                                                      " (in 'estimate_infections', line 635, column 2 to column 14)",
                                                      " (in 'estimate_infections', line 636, column 2 to column 17)",
                                                      " (in 'estimate_infections', line 637, column 2 to column 12)",
                                                      " (in 'estimate_infections', line 639, column 2 to column 17)",
                                                      " (in 'estimate_infections', line 640, column 2 to column 24)",
                                                      " (in 'estimate_infections', line 641, column 2 to column 20)",
                                                      " (in 'estimate_infections', line 642, column 2 to column 26)",
                                                      " (in 'estimate_infections', line 643, column 2 to column 24)",
                                                      " (in 'estimate_infections', line 644, column 2 to column 11)",
                                                      " (in 'estimate_infections', line 645, column 8 to column 24)",
                                                      " (in 'estimate_infections', line 645, column 2 to column 42)",
                                                      " (in 'estimate_infections', line 646, column 2 to column 19)",
                                                      " (in 'estimate_infections', line 647, column 2 to column 17)",
                                                      " (in 'estimate_infections', line 648, column 2 to column 10)",
                                                      " (in 'estimate_infections', line 649, column 2 to column 23)",
                                                      " (in 'estimate_infections', line 651, column 2 to column 21)",
                                                      " (in 'estimate_infections', line 652, column 2 to column 21)",
                                                      " (in 'estimate_infections', line 654, column 8 to column 24)",
                                                      " (in 'estimate_infections', line 654, column 2 to column 42)",
                                                      " (in 'estimate_infections', line 655, column 2 to column 17)",
                                                      " (in 'estimate_infections', line 656, column 2 to column 16)",
                                                      " (in 'estimate_infections', line 657, column 2 to column 14)",
                                                      " (in 'estimate_infections', line 658, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 659, column 2 to column 16)",
                                                      " (in 'estimate_infections', line 660, column 2 to column 22)",
                                                      " (in 'estimate_infections', line 661, column 2 to column 20)",
                                                      " (in 'estimate_infections', line 662, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 663, column 2 to column 17)",
                                                      " (in 'estimate_infections', line 664, column 2 to column 24)",
                                                      " (in 'estimate_infections', line 665, column 2 to column 26)",
                                                      " (in 'estimate_infections', line 666, column 2 to column 26)",
                                                      " (in 'estimate_infections', line 670, column 2 to column 38)",
                                                      " (in 'estimate_infections', line 671, column 2 to column 26)",
                                                      " (in 'estimate_infections', line 673, column 2 to column 100)",
                                                      " (in 'estimate_infections', line 674, column 9 to column 20)",
                                                      " (in 'estimate_infections', line 674, column 22 to column 23)",
                                                      " (in 'estimate_infections', line 674, column 2 to column 59)",
                                                      " (in 'estimate_infections', line 676, column 2 to column 59)",
                                                      " (in 'estimate_infections', line 677, column 2 to column 52)",
                                                      " (in 'estimate_infections', line 678, column 8 to column 19)",
                                                      " (in 'estimate_infections', line 678, column 2 to line 681, column 4)",
                                                      " (in 'estimate_infections', line 685, column 8 to column 21)",
                                                      " (in 'estimate_infections', line 686, column 8 to column 21)",
                                                      " (in 'estimate_infections', line 687, column 9 to column 22)",
                                                      " (in 'estimate_infections', line 689, column 9 to column 19)",
                                                      " (in 'estimate_infections', line 690, column 8 to column 18)",
                                                      " (in 'estimate_infections', line 691, column 8 to column 46)",
                                                      " (in 'estimate_infections', line 692, column 8 to column 24)",
                                                      " (in 'estimate_infections', line 693, column 8 to column 12)",
                                                      " (in 'estimate_infections', line 695, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 696, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 697, column 10 to column 21)",
                                                      " (in 'estimate_infections', line 698, column 8 to column 17)",
                                                      " (in 'estimate_infections', line 699, column 8 to column 18)",
                                                      " (in 'estimate_infections', line 702, column 9 to column 32)",
                                                      " (in 'estimate_infections', line 703, column 41 to column 66)",
                                                      " (in 'estimate_infections', line 704, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 705, column 9 to column 13)",
                                                      " (in 'estimate_infections', line 706, column 9 to column 11)",
                                                      " (in 'estimate_infections', line 707, column 9 to column 30)",
                                                      " (in 'estimate_infections', line 798, column 8 to column 12)",
                                                      " (in 'estimate_infections', line 799, column 9 to column 33)",
                                                      " (in 'estimate_infections', line 800, column 8 to column 12)",
                                                      " (in 'estimate_infections', line 803, column 9 to column 35)",
                                                      " (in 'estimate_infections', line 7, column 4 to column 31)",
                                                      " (in 'estimate_infections', line 8, column 4 to column 31)",
                                                      " (in 'estimate_infections', line 9, column 11 to column 14)",
                                                      " (in 'estimate_infections', line 9, column 4 to column 18)",
                                                      " (in 'estimate_infections', line 11, column 6 to column 75)",
                                                      " (in 'estimate_infections', line 10, column 28 to line 12, column 5)",
                                                      " (in 'estimate_infections', line 10, column 4 to line 12, column 5)",
                                                      " (in 'estimate_infections', line 14, column 6 to line 17, column 8)",
                                                      " (in 'estimate_infections', line 13, column 21 to line 18, column 5)",
                                                      " (in 'estimate_infections', line 13, column 4 to line 18, column 5)",
                                                      " (in 'estimate_infections', line 19, column 3 to column 13)",
                                                      " (in 'estimate_infections', line 6, column 58 to line 20, column 3)",
                                                      " (in 'estimate_infections', line 27, column 2 to column 35)",
                                                      " (in 'estimate_infections', line 28, column 9 to column 25)",
                                                      " (in 'estimate_infections', line 28, column 2 to column 35)",
                                                      " (in 'estimate_infections', line 29, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 29, column 2 to column 39)",
                                                      " (in 'estimate_infections', line 30, column 2 to column 43)",
                                                      " (in 'estimate_infections', line 35, column 4 to column 47)",
                                                      " (in 'estimate_infections', line 34, column 9 to line 36, column 3)",
                                                      " (in 'estimate_infections', line 32, column 4 to column 75)",
                                                      " (in 'estimate_infections', line 33, column 4 to column 50)",
                                                      " (in 'estimate_infections', line 31, column 14 to line 34, column 3)",
                                                      " (in 'estimate_infections', line 31, column 2 to line 36, column 3)",
                                                      " (in 'estimate_infections', line 37, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 26, column 44 to line 38, column 1)",
                                                      " (in 'estimate_infections', line 47, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 47, column 2 to column 17)",
                                                      " (in 'estimate_infections', line 70, column 4 to column 46)",
                                                      " (in 'estimate_infections', line 71, column 4 to column 16)",
                                                      " (in 'estimate_infections', line 68, column 9 to line 72, column 3)",
                                                      " (in 'estimate_infections', line 49, column 11 to column 12)",
                                                      " (in 'estimate_infections', line 49, column 4 to column 25)",
                                                      " (in 'estimate_infections', line 61, column 6 to column 56)",
                                                      " (in 'estimate_infections', line 60, column 11 to line 62, column 5)",
                                                      " (in 'estimate_infections', line 55, column 6 to column 34)",
                                                      " (in 'estimate_infections', line 56, column 6 to column 31)",
                                                      " (in 'estimate_infections', line 58, column 8 to column 52)",
                                                      " (in 'estimate_infections', line 57, column 21 to line 59, column 7)",
                                                      " (in 'estimate_infections', line 57, column 6 to line 59, column 7)",
                                                      " (in 'estimate_infections', line 54, column 26 to line 60, column 5)",
                                                      " (in 'estimate_infections', line 54, column 11 to line 62, column 5)",
                                                      " (in 'estimate_infections', line 52, column 8 to column 54)",
                                                      " (in 'estimate_infections', line 51, column 21 to line 53, column 7)",
                                                      " (in 'estimate_infections', line 51, column 6 to line 53, column 7)",
                                                      " (in 'estimate_infections', line 50, column 19 to line 54, column 5)",
                                                      " (in 'estimate_infections', line 50, column 4 to line 62, column 5)",
                                                      " (in 'estimate_infections', line 64, column 4 to column 28)",
                                                      " (in 'estimate_infections', line 65, column 4 to column 67)",
                                                      " (in 'estimate_infections', line 67, column 4 to column 32)",
                                                      " (in 'estimate_infections', line 48, column 17 to line 68, column 3)",
                                                      " (in 'estimate_infections', line 48, column 2 to line 72, column 3)",
                                                      " (in 'estimate_infections', line 73, column 2 to column 20)",
                                                      " (in 'estimate_infections', line 46, column 61 to line 74, column 1)",
                                                      " (in 'estimate_infections', line 78, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 79, column 9 to column 16)",
                                                      " (in 'estimate_infections', line 79, column 2 to column 26)",
                                                      " (in 'estimate_infections', line 81, column 4 to column 38)",
                                                      " (in 'estimate_infections', line 80, column 23 to line 82, column 3)",
                                                      " (in 'estimate_infections', line 80, column 2 to line 82, column 3)",
                                                      " (in 'estimate_infections', line 83, column 2 to column 17)",
                                                      " (in 'estimate_infections', line 77, column 30 to line 84, column 1)",
                                                      " (in 'estimate_infections', line 87, column 9 to column 12)",
                                                      " (in 'estimate_infections', line 87, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 89, column 4 to column 28)",
                                                      " (in 'estimate_infections', line 88, column 19 to line 90, column 3)",
                                                      " (in 'estimate_infections', line 88, column 2 to line 90, column 3)",
                                                      " (in 'estimate_infections', line 91, column 2 to column 14)",
                                                      " (in 'estimate_infections', line 86, column 34 to line 92, column 1)",
                                                      " (in 'estimate_infections', line 95, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 96, column 9 to column 12)",
                                                      " (in 'estimate_infections', line 96, column 2 to column 47)",
                                                      " (in 'estimate_infections', line 97, column 2 to column 44)",
                                                      " (in 'estimate_infections', line 94, column 44 to line 98, column 1)",
                                                      " (in 'estimate_infections', line 101, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 102, column 9 to column 12)",
                                                      " (in 'estimate_infections', line 102, column 2 to column 47)",
                                                      " (in 'estimate_infections', line 104, column 4 to column 44)",
                                                      " (in 'estimate_infections', line 103, column 19 to line 105, column 3)",
                                                      " (in 'estimate_infections', line 103, column 2 to line 105, column 3)",
                                                      " (in 'estimate_infections', line 106, column 2 to column 59)",
                                                      " (in 'estimate_infections', line 100, column 54 to line 107, column 1)",
                                                      " (in 'estimate_infections', line 113, column 8 to column 19)",
                                                      " (in 'estimate_infections', line 113, column 2 to column 29)",
                                                      " (in 'estimate_infections', line 115, column 4 to column 15)",
                                                      " (in 'estimate_infections', line 120, column 8 to line 121, column 53)",
                                                      " (in 'estimate_infections', line 119, column 13 to line 122, column 7)",
                                                      " (in 'estimate_infections', line 118, column 8 to column 51)",
                                                      " (in 'estimate_infections', line 117, column 28 to line 119, column 7)",
                                                      " (in 'estimate_infections', line 117, column 6 to line 122, column 7)",
                                                      " (in 'estimate_infections', line 116, column 69 to line 123, column 5)",
                                                      " (in 'estimate_infections', line 116, column 4 to line 123, column 5)",
                                                      " (in 'estimate_infections', line 114, column 27 to line 124, column 3)",
                                                      " (in 'estimate_infections', line 114, column 2 to line 124, column 3)",
                                                      " (in 'estimate_infections', line 125, column 2 to column 13)",
                                                      " (in 'estimate_infections', line 112, column 2 to line 126, column 1)",
                                                      " (in 'estimate_infections', line 136, column 9 to column 12)",
                                                      " (in 'estimate_infections', line 136, column 2 to column 39)",
                                                      " (in 'estimate_infections', line 137, column 2 to column 22)",
                                                      " (in 'estimate_infections', line 138, column 2 to column 14)",
                                                      " (in 'estimate_infections', line 157, column 6 to column 57)",
                                                      " (in 'estimate_infections', line 158, column 6 to column 63)",
                                                      " (in 'estimate_infections', line 159, column 6 to column 42)",
                                                      " (in 'estimate_infections', line 163, column 8 to line 165, column 10)",
                                                      " (in 'estimate_infections', line 162, column 13 to line 166, column 7)",
                                                      " (in 'estimate_infections', line 161, column 8 to column 49)",
                                                      " (in 'estimate_infections', line 160, column 28 to line 162, column 7)",
                                                      " (in 'estimate_infections', line 160, column 6 to line 166, column 7)",
                                                      " (in 'estimate_infections', line 156, column 11 to line 167, column 5)",
                                                      " (in 'estimate_infections', line 141, column 13 to column 41)",
                                                      " (in 'estimate_infections', line 141, column 6 to line 147, column 8)",
                                                      " (in 'estimate_infections', line 148, column 6 to column 63)",
                                                      " (in 'estimate_infections', line 152, column 8 to line 154, column 10)",
                                                      " (in 'estimate_infections', line 151, column 13 to line 155, column 7)",
                                                      " (in 'estimate_infections', line 150, column 8 to column 42)",
                                                      " (in 'estimate_infections', line 149, column 28 to line 151, column 7)",
                                                      " (in 'estimate_infections', line 149, column 6 to line 155, column 7)",
                                                      " (in 'estimate_infections', line 140, column 26 to line 156, column 5)",
                                                      " (in 'estimate_infections', line 140, column 4 to line 167, column 5)",
                                                      " (in 'estimate_infections', line 168, column 4 to column 26)",
                                                      " (in 'estimate_infections', line 139, column 81 to line 169, column 3)",
                                                      " (in 'estimate_infections', line 139, column 2 to line 169, column 3)",
                                                      " (in 'estimate_infections', line 171, column 4 to line 174, column 6)",
                                                      " (in 'estimate_infections', line 170, column 21 to line 175, column 3)",
                                                      " (in 'estimate_infections', line 170, column 2 to line 175, column 3)",
                                                      " (in 'estimate_infections', line 177, column 4 to column 30)",
                                                      " (in 'estimate_infections', line 176, column 18 to line 178, column 3)",
                                                      " (in 'estimate_infections', line 176, column 2 to line 178, column 3)",
                                                      " (in 'estimate_infections', line 180, column 4 to column 26)",
                                                      " (in 'estimate_infections', line 179, column 19 to line 181, column 3)",
                                                      " (in 'estimate_infections', line 179, column 2 to line 181, column 3)",
                                                      " (in 'estimate_infections', line 182, column 2 to column 13)",
                                                      " (in 'estimate_infections', line 134, column 2 to line 183, column 1)",
                                                      " (in 'estimate_infections', line 189, column 4 to column 47)",
                                                      " (in 'estimate_infections', line 190, column 4 to column 43)",
                                                      " (in 'estimate_infections', line 195, column 10 to column 98)",
                                                      " (in 'estimate_infections', line 198, column 12 to column 90)",
                                                      " (in 'estimate_infections', line 197, column 29 to line 199, column 11)",
                                                      " (in 'estimate_infections', line 197, column 10 to line 199, column 11)",
                                                      " (in 'estimate_infections', line 193, column 34 to line 200, column 9)",
                                                      " (in 'estimate_infections', line 193, column 8 to line 200, column 9)",
                                                      " (in 'estimate_infections', line 192, column 31 to line 201, column 7)",
                                                      " (in 'estimate_infections', line 192, column 6 to line 201, column 7)",
                                                      " (in 'estimate_infections', line 191, column 21 to line 202, column 5)",
                                                      " (in 'estimate_infections', line 191, column 4 to line 202, column 5)",
                                                      " (in 'estimate_infections', line 207, column 10 to column 92)",
                                                      " (in 'estimate_infections', line 208, column 10 to column 84)",
                                                      " (in 'estimate_infections', line 205, column 32 to line 209, column 9)",
                                                      " (in 'estimate_infections', line 205, column 8 to line 209, column 9)",
                                                      " (in 'estimate_infections', line 204, column 29 to line 210, column 6)",
                                                      " (in 'estimate_infections', line 204, column 6 to line 210, column 6)",
                                                      " (in 'estimate_infections', line 203, column 19 to line 211, column 3)",
                                                      " (in 'estimate_infections', line 203, column 4 to line 211, column 3)",
                                                      " (in 'estimate_infections', line 188, column 59 to line 212, column 1)",
                                                      " (in 'estimate_infections', line 217, column 2 to column 11)",
                                                      " (in 'estimate_infections', line 218, column 2 to column 27)",
                                                      " (in 'estimate_infections', line 219, column 2 to column 13)",
                                                      " (in 'estimate_infections', line 216, column 27 to line 220, column 1)",
                                                      " (in 'estimate_infections', line 224, column 9 to column 16)",
                                                      " (in 'estimate_infections', line 224, column 2 to column 21)",
                                                      " (in 'estimate_infections', line 225, column 2 to column 45)",
                                                      " (in 'estimate_infections', line 226, column 2 to column 12)",
                                                      " (in 'estimate_infections', line 223, column 36 to line 227, column 1)",
                                                      " (in 'estimate_infections', line 230, column 2 to column 9)",
                                                      " (in 'estimate_infections', line 231, column 2 to column 63)",
                                                      " (in 'estimate_infections', line 232, column 2 to column 11)",
                                                      " (in 'estimate_infections', line 229, column 42 to line 233, column 1)",
                                                      " (in 'estimate_infections', line 236, column 2 to column 9)",
                                                      " (in 'estimate_infections', line 237, column 2 to column 64)",
                                                      " (in 'estimate_infections', line 238, column 2 to column 11)",
                                                      " (in 'estimate_infections', line 235, column 46 to line 239, column 1)",
                                                      " (in 'estimate_infections', line 243, column 2 to column 75)",
                                                      " (in 'estimate_infections', line 244, column 2 to column 89)",
                                                      " (in 'estimate_infections', line 245, column 2 to column 22)",
                                                      " (in 'estimate_infections', line 242, column 66 to line 246, column 1)",
                                                      " (in 'estimate_infections', line 249, column 9 to column 18)",
                                                      " (in 'estimate_infections', line 249, column 2 to column 25)",
                                                      " (in 'estimate_infections', line 250, column 9 to column 18)",
                                                      " (in 'estimate_infections', line 250, column 20 to column 21)",
                                                      " (in 'estimate_infections', line 250, column 2 to column 27)",
                                                      " (in 'estimate_infections', line 251, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 253, column 4 to column 40)",
                                                      " (in 'estimate_infections', line 252, column 25 to line 254, column 3)",
                                                      " (in 'estimate_infections', line 252, column 2 to line 254, column 3)",
                                                      " (in 'estimate_infections', line 256, column 4 to column 30)",
                                                      " (in 'estimate_infections', line 255, column 16 to line 257, column 3)",
                                                      " (in 'estimate_infections', line 255, column 2 to line 257, column 3)",
                                                      " (in 'estimate_infections', line 258, column 2 to column 14)",
                                                      " (in 'estimate_infections', line 248, column 46 to line 259, column 1)",
                                                      " (in 'estimate_infections', line 263, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 263, column 2 to column 20)",
                                                      " (in 'estimate_infections', line 264, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 264, column 2 to column 20)",
                                                      " (in 'estimate_infections', line 265, column 2 to column 30)",
                                                      " (in 'estimate_infections', line 266, column 9 to column 20)",
                                                      " (in 'estimate_infections', line 266, column 2 to column 60)",
                                                      " (in 'estimate_infections', line 267, column 2 to column 36)",
                                                      " (in 'estimate_infections', line 275, column 6 to column 74)",
                                                      " (in 'estimate_infections', line 274, column 17 to line 276, column 5)",
                                                      " (in 'estimate_infections', line 274, column 4 to line 276, column 5)",
                                                      " (in 'estimate_infections', line 273, column 23 to line 277, column 3)",
                                                      " (in 'estimate_infections', line 273, column 8 to line 277, column 3)",
                                                      " (in 'estimate_infections', line 271, column 6 to column 70)",
                                                      " (in 'estimate_infections', line 270, column 17 to line 272, column 5)",
                                                      " (in 'estimate_infections', line 270, column 4 to line 272, column 5)",
                                                      " (in 'estimate_infections', line 269, column 17 to line 273, column 3)",
                                                      " (in 'estimate_infections', line 269, column 2 to line 277, column 3)",
                                                      " (in 'estimate_infections', line 278, column 2 to column 27)",
                                                      " (in 'estimate_infections', line 279, column 2 to column 35)",
                                                      " (in 'estimate_infections', line 280, column 2 to column 16)",
                                                      " (in 'estimate_infections', line 262, column 49 to line 281, column 1)",
                                                      " (in 'estimate_infections', line 289, column 59 to column 65)",
                                                      " (in 'estimate_infections', line 289, column 51 to column 57)",
                                                      " (in 'estimate_infections', line 289, column 4 to column 67)",
                                                      " (in 'estimate_infections', line 288, column 9 to line 290, column 3)",
                                                      " (in 'estimate_infections', line 287, column 52 to column 58)",
                                                      " (in 'estimate_infections', line 287, column 44 to column 50)",
                                                      " (in 'estimate_infections', line 287, column 4 to column 60)",
                                                      " (in 'estimate_infections', line 286, column 20 to line 288, column 3)",
                                                      " (in 'estimate_infections', line 286, column 2 to line 290, column 3)",
                                                      " (in 'estimate_infections', line 291, column 2 to column 30)",
                                                      " (in 'estimate_infections', line 292, column 2 to column 21)",
                                                      " (in 'estimate_infections', line 285, column 66 to line 293, column 1)",
                                                      " (in 'estimate_infections', line 299, column 2 to column 38)",
                                                      " (in 'estimate_infections', line 300, column 2 to column 15)",
                                                      " (in 'estimate_infections', line 301, column 2 to column 33)",
                                                      " (in 'estimate_infections', line 303, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 303, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 304, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 304, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 305, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 305, column 2 to column 14)",
                                                      " (in 'estimate_infections', line 310, column 8 to column 23)",
                                                      " (in 'estimate_infections', line 311, column 8 to column 33)",
                                                      " (in 'estimate_infections', line 309, column 18 to line 312, column 7)",
                                                      " (in 'estimate_infections', line 309, column 6 to line 312, column 7)",
                                                      " (in 'estimate_infections', line 308, column 19 to line 313, column 5)",
                                                      " (in 'estimate_infections', line 308, column 4 to line 313, column 5)",
                                                      " (in 'estimate_infections', line 314, column 4 to column 28)",
                                                      " (in 'estimate_infections', line 307, column 12 to line 315, column 3)",
                                                      " (in 'estimate_infections', line 307, column 2 to line 315, column 3)",
                                                      " (in 'estimate_infections', line 325, column 6 to column 31)",
                                                      " (in 'estimate_infections', line 326, column 6 to column 30)",
                                                      " (in 'estimate_infections', line 324, column 9 to line 327, column 5)",
                                                      " (in 'estimate_infections', line 319, column 6 to column 25)",
                                                      " (in 'estimate_infections', line 322, column 8 to column 61)",
                                                      " (in 'estimate_infections', line 321, column 20 to line 323, column 7)",
                                                      " (in 'estimate_infections', line 321, column 6 to line 323, column 7)",
                                                      " (in 'estimate_infections', line 318, column 20 to line 324, column 5)",
                                                      " (in 'estimate_infections', line 318, column 4 to line 327, column 5)",
                                                      " (in 'estimate_infections', line 317, column 12 to line 328, column 3)",
                                                      " (in 'estimate_infections', line 317, column 2 to line 328, column 3)",
                                                      " (in 'estimate_infections', line 330, column 2 to column 37)",
                                                      " (in 'estimate_infections', line 331, column 2 to column 13)",
                                                      " (in 'estimate_infections', line 332, column 2 to column 12)",
                                                      " (in 'estimate_infections', line 297, column 58 to line 333, column 1)",
                                                      " (in 'estimate_infections', line 340, column 2 to column 37)",
                                                      " (in 'estimate_infections', line 343, column 32 to column 33)",
                                                      " (in 'estimate_infections', line 343, column 4 to column 36)",
                                                      " (in 'estimate_infections', line 344, column 4 to column 37)",
                                                      " (in 'estimate_infections', line 342, column 16 to line 345, column 3)",
                                                      " (in 'estimate_infections', line 342, column 2 to line 345, column 3)",
                                                      " (in 'estimate_infections', line 347, column 2 to column 53)",
                                                      " (in 'estimate_infections', line 349, column 4 to column 47)",
                                                      " (in 'estimate_infections', line 348, column 24 to line 350, column 3)",
                                                      " (in 'estimate_infections', line 348, column 2 to line 350, column 3)",
                                                      " (in 'estimate_infections', line 338, column 30 to line 351, column 1)",
                                                      " (in 'estimate_infections', line 357, column 2 to column 40)",
                                                      " (in 'estimate_infections', line 361, column 2 to column 62)",
                                                      " (in 'estimate_infections', line 363, column 2 to column 39)",
                                                      " (in 'estimate_infections', line 365, column 2 to column 55)",
                                                      " (in 'estimate_infections', line 367, column 2 to line 369, column 4)",
                                                      " (in 'estimate_infections', line 370, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 356, column 55 to line 371, column 1)",
                                                      " (in 'estimate_infections', line 377, column 2 to column 28)",
                                                      " (in 'estimate_infections', line 378, column 2 to column 20)",
                                                      " (in 'estimate_infections', line 379, column 2 to column 19)",
                                                      " (in 'estimate_infections', line 380, column 9 to column 11)",
                                                      " (in 'estimate_infections', line 380, column 2 to column 20)",
                                                      " (in 'estimate_infections', line 381, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 382, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 382, column 2 to column 42)",
                                                      " (in 'estimate_infections', line 383, column 9 to column 11)",
                                                      " (in 'estimate_infections', line 383, column 2 to column 28)",
                                                      " (in 'estimate_infections', line 384, column 9 to column 11)",
                                                      " (in 'estimate_infections', line 384, column 2 to column 28)",
                                                      " (in 'estimate_infections', line 386, column 2 to column 45)",
                                                      " (in 'estimate_infections', line 388, column 4 to column 41)",
                                                      " (in 'estimate_infections', line 390, column 6 to column 49)",
                                                      " (in 'estimate_infections', line 389, column 21 to line 391, column 5)",
                                                      " (in 'estimate_infections', line 389, column 4 to line 391, column 5)",
                                                      " (in 'estimate_infections', line 387, column 15 to line 392, column 3)",
                                                      " (in 'estimate_infections', line 387, column 2 to line 392, column 3)",
                                                      " (in 'estimate_infections', line 395, column 4 to column 47)",
                                                      " (in 'estimate_infections', line 394, column 11 to line 396, column 3)",
                                                      " (in 'estimate_infections', line 394, column 2 to line 396, column 3)",
                                                      " (in 'estimate_infections', line 399, column 4 to column 78)",
                                                      " (in 'estimate_infections', line 405, column 6 to column 53)",
                                                      " (in 'estimate_infections', line 404, column 9 to line 406, column 5)",
                                                      " (in 'estimate_infections', line 401, column 6 to column 80)",
                                                      " (in 'estimate_infections', line 402, column 6 to column 51)",
                                                      " (in 'estimate_infections', line 403, column 6 to column 73)",
                                                      " (in 'estimate_infections', line 400, column 24 to line 404, column 5)",
                                                      " (in 'estimate_infections', line 400, column 4 to line 406, column 5)",
                                                      " (in 'estimate_infections', line 408, column 6 to column 70)",
                                                      " (in 'estimate_infections', line 407, column 23 to line 409, column 5)",
                                                      " (in 'estimate_infections', line 407, column 4 to line 409, column 5)",
                                                      " (in 'estimate_infections', line 398, column 18 to line 410, column 3)",
                                                      " (in 'estimate_infections', line 398, column 2 to line 410, column 3)",
                                                      " (in 'estimate_infections', line 411, column 2 to column 21)",
                                                      " (in 'estimate_infections', line 375, column 44 to line 412, column 1)",
                                                      " (in 'estimate_infections', line 416, column 2 to column 38)",
                                                      " (in 'estimate_infections', line 417, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 417, column 2 to column 45)",
                                                      " (in 'estimate_infections', line 431, column 4 to column 44)",
                                                      " (in 'estimate_infections', line 430, column 7 to line 432, column 3)",
                                                      " (in 'estimate_infections', line 419, column 11 to column 12)",
                                                      " (in 'estimate_infections', line 419, column 4 to column 37)",
                                                      " (in 'estimate_infections', line 425, column 6 to column 70)",
                                                      " (in 'estimate_infections', line 427, column 8 to column 57)",
                                                      " (in 'estimate_infections', line 426, column 21 to line 428, column 7)",
                                                      " (in 'estimate_infections', line 426, column 6 to line 428, column 7)",
                                                      " (in 'estimate_infections', line 424, column 26 to line 429, column 5)",
                                                      " (in 'estimate_infections', line 424, column 10 to line 429, column 5)",
                                                      " (in 'estimate_infections', line 423, column 5 to column 41)",
                                                      " (in 'estimate_infections', line 422, column 26 to line 424, column 5)",
                                                      " (in 'estimate_infections', line 422, column 10 to line 429, column 5)",
                                                      " (in 'estimate_infections', line 421, column 6 to column 59)",
                                                      " (in 'estimate_infections', line 420, column 20 to line 422, column 5)",
                                                      " (in 'estimate_infections', line 420, column 4 to line 429, column 5)",
                                                      " (in 'estimate_infections', line 418, column 13 to line 430, column 3)",
                                                      " (in 'estimate_infections', line 418, column 2 to line 432, column 3)",
                                                      " (in 'estimate_infections', line 433, column 2 to column 21)",
                                                      " (in 'estimate_infections', line 415, column 40 to line 434, column 1)",
                                                      " (in 'estimate_infections', line 438, column 2 to column 32)",
                                                      " (in 'estimate_infections', line 439, column 2 to column 32)",
                                                      " (in 'estimate_infections', line 441, column 9 to column 11)",
                                                      " (in 'estimate_infections', line 441, column 2 to column 41)",
                                                      " (in 'estimate_infections', line 442, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 442, column 2 to column 27)",
                                                      " (in 'estimate_infections', line 445, column 4 to column 67)",
                                                      " (in 'estimate_infections', line 443, column 17 to line 446, column 4)",
                                                      " (in 'estimate_infections', line 443, column 2 to line 446, column 4)",
                                                      " (in 'estimate_infections', line 447, column 2 to column 25)",
                                                      " (in 'estimate_infections', line 437, column 82 to line 448, column 1)",
                                                      " (in 'estimate_infections', line 452, column 2 to column 32)",
                                                      " (in 'estimate_infections', line 453, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 453, column 2 to column 27)",
                                                      " (in 'estimate_infections', line 454, column 2 to column 38)",
                                                      " (in 'estimate_infections', line 455, column 2 to column 25)",
                                                      " (in 'estimate_infections', line 451, column 48 to line 456, column 1)",
                                                      " (in 'estimate_infections', line 459, column 2 to column 32)",
                                                      " (in 'estimate_infections', line 460, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 460, column 2 to column 36)",
                                                      " (in 'estimate_infections', line 462, column 2 to column 54)",
                                                      " (in 'estimate_infections', line 463, column 2 to column 34)",
                                                      " (in 'estimate_infections', line 468, column 4 to column 60)",
                                                      " (in 'estimate_infections', line 467, column 9 to line 469, column 3)",
                                                      " (in 'estimate_infections', line 466, column 4 to column 60)",
                                                      " (in 'estimate_infections', line 465, column 19 to line 467, column 3)",
                                                      " (in 'estimate_infections', line 465, column 2 to line 469, column 3)",
                                                      " (in 'estimate_infections', line 470, column 2 to column 24)",
                                                      " (in 'estimate_infections', line 458, column 71 to line 471, column 1)",
                                                      " (in 'estimate_infections', line 476, column 2 to column 49)",
                                                      " (in 'estimate_infections', line 480, column 6 to column 63)",
                                                      " (in 'estimate_infections', line 478, column 30 to line 481, column 5)",
                                                      " (in 'estimate_infections', line 478, column 4 to line 481, column 5)",
                                                      " (in 'estimate_infections', line 484, column 6 to column 57)",
                                                      " (in 'estimate_infections', line 482, column 28 to line 485, column 5)",
                                                      " (in 'estimate_infections', line 482, column 4 to line 485, column 5)",
                                                      " (in 'estimate_infections', line 477, column 18 to line 486, column 3)",
                                                      " (in 'estimate_infections', line 477, column 2 to line 486, column 3)",
                                                      " (in 'estimate_infections', line 475, column 73 to line 487, column 1)",
                                                      " (in 'estimate_infections', line 505, column 6 to column 55)",
                                                      " (in 'estimate_infections', line 504, column 11 to line 506, column 5)",
                                                      " (in 'estimate_infections', line 503, column 6 to column 31)",
                                                      " (in 'estimate_infections', line 502, column 21 to line 504, column 5)",
                                                      " (in 'estimate_infections', line 502, column 4 to line 506, column 5)",
                                                      " (in 'estimate_infections', line 501, column 9 to line 507, column 3)",
                                                      " (in 'estimate_infections', line 493, column 4 to column 18)",
                                                      " (in 'estimate_infections', line 494, column 53 to column 54)",
                                                      " (in 'estimate_infections', line 494, column 4 to column 57)",
                                                      " (in 'estimate_infections', line 495, column 4 to column 45)",
                                                      " (in 'estimate_infections', line 499, column 6 to column 72)",
                                                      " (in 'estimate_infections', line 498, column 11 to line 500, column 5)",
                                                      " (in 'estimate_infections', line 497, column 6 to column 48)",
                                                      " (in 'estimate_infections', line 496, column 21 to line 498, column 5)",
                                                      " (in 'estimate_infections', line 496, column 4 to line 500, column 5)",
                                                      " (in 'estimate_infections', line 492, column 18 to line 501, column 3)",
                                                      " (in 'estimate_infections', line 492, column 2 to line 507, column 3)",
                                                      " (in 'estimate_infections', line 491, column 44 to line 508, column 1)",
                                                      " (in 'estimate_infections', line 512, column 2 to column 32)",
                                                      " (in 'estimate_infections', line 513, column 9 to column 10)",
                                                      " (in 'estimate_infections', line 513, column 2 to column 20)",
                                                      " (in 'estimate_infections', line 521, column 4 to column 50)",
                                                      " (in 'estimate_infections', line 523, column 6 to column 81)",
                                                      " (in 'estimate_infections', line 522, column 19 to line 524, column 5)",
                                                      " (in 'estimate_infections', line 522, column 4 to line 524, column 5)",
                                                      " (in 'estimate_infections', line 520, column 9 to line 525, column 3)",
                                                      " (in 'estimate_infections', line 518, column 6 to column 64)",
                                                      " (in 'estimate_infections', line 517, column 19 to line 519, column 5)",
                                                      " (in 'estimate_infections', line 517, column 4 to line 519, column 5)",
                                                      " (in 'estimate_infections', line 516, column 23 to line 520, column 3)",
                                                      " (in 'estimate_infections', line 516, column 2 to line 525, column 3)",
                                                      " (in 'estimate_infections', line 526, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 511, column 73 to line 527, column 1)",
                                                      " (in 'estimate_infections', line 530, column 2 to column 32)",
                                                      " (in 'estimate_infections', line 531, column 8 to column 9)",
                                                      " (in 'estimate_infections', line 531, column 2 to column 31)",
                                                      " (in 'estimate_infections', line 532, column 2 to column 22)",
                                                      " (in 'estimate_infections', line 534, column 4 to column 45)",
                                                      " (in 'estimate_infections', line 533, column 18 to line 535, column 3)",
                                                      " (in 'estimate_infections', line 533, column 2 to line 535, column 3)",
                                                      " (in 'estimate_infections', line 545, column 8 to column 95)",
                                                      " (in 'estimate_infections', line 544, column 13 to line 546, column 7)",
                                                      " (in 'estimate_infections', line 543, column 8 to column 78)",
                                                      " (in 'estimate_infections', line 542, column 26 to line 544, column 7)",
                                                      " (in 'estimate_infections', line 542, column 6 to line 546, column 7)",
                                                      " (in 'estimate_infections', line 540, column 11 to line 547, column 5)",
                                                      " (in 'estimate_infections', line 539, column 6 to column 29)",
                                                      " (in 'estimate_infections', line 538, column 27 to line 540, column 5)",
                                                      " (in 'estimate_infections', line 538, column 4 to line 547, column 5)",
                                                      " (in 'estimate_infections', line 537, column 17 to line 548, column 3)",
                                                      " (in 'estimate_infections', line 537, column 2 to line 548, column 3)",
                                                      " (in 'estimate_infections', line 549, column 2 to column 26)",
                                                      " (in 'estimate_infections', line 529, column 77 to line 550, column 1)",
                                                      " (in 'estimate_infections', line 555, column 2 to column 35)",
                                                      " (in 'estimate_infections', line 556, column 2 to column 28)",
                                                      " (in 'estimate_infections', line 557, column 9 to column 11)",
                                                      " (in 'estimate_infections', line 557, column 2 to column 15)",
                                                      " (in 'estimate_infections', line 558, column 9 to column 11)",
                                                      " (in 'estimate_infections', line 558, column 2 to column 16)",
                                                      " (in 'estimate_infections', line 559, column 9 to column 11)",
                                                      " (in 'estimate_infections', line 559, column 2 to column 51)",
                                                      " (in 'estimate_infections', line 562, column 4 to line 564, column 6)",
                                                      " (in 'estimate_infections', line 565, column 4 to column 60)",
                                                      " (in 'estimate_infections', line 561, column 18 to line 566, column 3)",
                                                      " (in 'estimate_infections', line 561, column 2 to line 566, column 3)",
                                                      " (in 'estimate_infections', line 578, column 4 to column 11)",
                                                      " (in 'estimate_infections', line 577, column 7 to line 579, column 3)",
                                                      " (in 'estimate_infections', line 569, column 6 to column 22)",
                                                      " (in 'estimate_infections', line 570, column 6 to column 16)",
                                                      " (in 'estimate_infections', line 572, column 8 to column 22)",
                                                      " (in 'estimate_infections', line 573, column 8 to column 20)",
                                                      " (in 'estimate_infections', line 571, column 56 to line 574, column 7)",
                                                      " (in 'estimate_infections', line 571, column 6 to line 574, column 7)",
                                                      " (in 'estimate_infections', line 575, column 6 to column 29)",
                                                      " (in 'estimate_infections', line 568, column 20 to line 576, column 5)",
                                                      " (in 'estimate_infections', line 568, column 4 to line 576, column 5)",
                                                      " (in 'estimate_infections', line 567, column 14 to line 577, column 3)",
                                                      " (in 'estimate_infections', line 567, column 2 to line 579, column 3)",
                                                      " (in 'estimate_infections', line 580, column 2 to column 13)",
                                                      " (in 'estimate_infections', line 554, column 51 to line 581, column 1)",
                                                      " (in 'estimate_infections', line 584, column 2 to column 26)",
                                                      " (in 'estimate_infections', line 585, column 8 to column 9)",
                                                      " (in 'estimate_infections', line 585, column 2 to column 18)",
                                                      " (in 'estimate_infections', line 594, column 6 to column 33)",
                                                      " (in 'estimate_infections', line 593, column 19 to line 595, column 5)",
                                                      " (in 'estimate_infections', line 593, column 4 to line 595, column 5)",
                                                      " (in 'estimate_infections', line 591, column 9 to line 596, column 3)",
                                                      " (in 'estimate_infections', line 587, column 4 to column 38)",
                                                      " (in 'estimate_infections', line 589, column 6 to column 48)",
                                                      " (in 'estimate_infections', line 588, column 19 to line 590, column 5)",
                                                      " (in 'estimate_infections', line 588, column 4 to line 590, column 5)",
                                                      " (in 'estimate_infections', line 586, column 18 to line 591, column 3)",
                                                      " (in 'estimate_infections', line 586, column 2 to line 596, column 3)",
                                                      " (in 'estimate_infections', line 597, column 2 to column 12)",
                                                      " (in 'estimate_infections', line 583, column 62 to line 598, column 1)"};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__,
                      const int& len, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& x = to_ref(x_arg__);
  const auto& y = to_ref(y_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int xlen;
    xlen = std::numeric_limits<int>::min();
    
    current_statement__ = 199;
    xlen = num_elements(x);
    int ylen;
    ylen = std::numeric_limits<int>::min();
    
    current_statement__ = 200;
    ylen = num_elements(y);
    current_statement__ = 201;
    validate_non_negative_index("z", "len", len);
    Eigen::Matrix<local_scalar_t__, -1, 1> z;
    z = Eigen::Matrix<local_scalar_t__, -1, 1>(len);
    stan::math::fill(z, DUMMY_VAR__);
    
    current_statement__ = 205;
    if (logical_lte((xlen + ylen), len)) {
      current_statement__ = 203;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "convolve_with_rev_pmf: len is longer then x and y combined";
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 208;
    for (int s = 1; s <= len; ++s) {
      current_statement__ = 206;
      assign(z, cons_list(index_uni(s), nil_index_list()),
        dot_product(
          rvalue(x,
            cons_list(
              index_min_max(std::max(1, ((s - ylen) + 1)), std::min(s, xlen)),
              nil_index_list()), "x"),
          rvalue(y,
            cons_list(
              index_min_max(std::max(1, ((ylen - s) + 1)), std::min(ylen,
                                                             ((ylen + xlen) -
                                                               s))),
              nil_index_list()), "y")), "assigning variable z");}
    current_statement__ = 209;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct convolve_with_rev_pmf_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& x, const T1__& y, const int& len,
           std::ostream* pstream__)  const 
{
return convolve_with_rev_pmf(x, y, len, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
convolve_to_report(const T0__& infections_arg__,
                   const T1__& delay_rev_pmf_arg__, const int& seeding_time,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& infections = to_ref(infections_arg__);
  const auto& delay_rev_pmf = to_ref(delay_rev_pmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 211;
    t = num_elements(infections);
    current_statement__ = 212;
    validate_non_negative_index("reports", "t - seeding_time",
                                (t - seeding_time));
    Eigen::Matrix<local_scalar_t__, -1, 1> reports;
    reports = Eigen::Matrix<local_scalar_t__, -1, 1>((t - seeding_time));
    stan::math::fill(reports, DUMMY_VAR__);
    
    current_statement__ = 214;
    validate_non_negative_index("unobs_reports", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> unobs_reports;
    unobs_reports = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(unobs_reports, DUMMY_VAR__);
    
    current_statement__ = 215;
    assign(unobs_reports, nil_index_list(), infections,
      "assigning variable unobs_reports");
    int delays;
    delays = std::numeric_limits<int>::min();
    
    current_statement__ = 216;
    delays = num_elements(delay_rev_pmf);
    current_statement__ = 222;
    if (delays) {
      current_statement__ = 219;
      assign(unobs_reports, nil_index_list(),
        convolve_with_rev_pmf(stan::model::deep_copy(unobs_reports),
          delay_rev_pmf, t, pstream__), "assigning variable unobs_reports");
      current_statement__ = 220;
      assign(reports, nil_index_list(),
        rvalue(unobs_reports,
          cons_list(index_min_max((seeding_time + 1), t), nil_index_list()),
          "unobs_reports"), "assigning variable reports");
    } else {
      current_statement__ = 217;
      assign(reports, nil_index_list(),
        rvalue(infections,
          cons_list(index_min_max((seeding_time + 1), t), nil_index_list()),
          "infections"), "assigning variable reports");
    }
    current_statement__ = 223;
    return reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct convolve_to_report_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& infections, const T1__& delay_rev_pmf,
           const int& seeding_time, std::ostream* pstream__)  const 
{
return convolve_to_report(infections, delay_rev_pmf, seeding_time, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
discretised_pmf(const T0__& mu, const T1__& sigma, const int& n,
                const int& dist, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 225;
    validate_non_negative_index("lpmf", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> lpmf;
    lpmf = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(lpmf, DUMMY_VAR__);
    
    current_statement__ = 250;
    if (logical_gt(sigma, 0)) {
      current_statement__ = 230;
      validate_non_negative_index("upper_lcdf", "n", n);
      Eigen::Matrix<local_scalar_t__, -1, 1> upper_lcdf;
      upper_lcdf = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(upper_lcdf, DUMMY_VAR__);
      
      current_statement__ = 245;
      if (logical_eq(dist, 0)) {
        current_statement__ = 243;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 241;
          assign(upper_lcdf, cons_list(index_uni(i), nil_index_list()),
            lognormal_lcdf(i, mu, sigma), "assigning variable upper_lcdf");}
      } else {
        current_statement__ = 240;
        if (logical_eq(dist, 1)) {
          local_scalar_t__ alpha;
          alpha = DUMMY_VAR__;
          
          current_statement__ = 234;
          alpha = (pow(mu, 2) / pow(sigma, 2));
          local_scalar_t__ beta;
          beta = DUMMY_VAR__;
          
          current_statement__ = 235;
          beta = (mu / pow(sigma, 2));
          current_statement__ = 238;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 236;
            assign(upper_lcdf, cons_list(index_uni(i), nil_index_list()),
              gamma_lcdf(i, alpha, beta), "assigning variable upper_lcdf");}
        } else {
          current_statement__ = 232;
          std::stringstream errmsg_stream__;
          errmsg_stream__ << "Unknown distribution function provided.";
          throw std::domain_error(errmsg_stream__.str());
        }
      }
      current_statement__ = 246;
      assign(lpmf, cons_list(index_uni(1), nil_index_list()),
        upper_lcdf[(1 - 1)], "assigning variable lpmf");
      current_statement__ = 247;
      assign(lpmf, cons_list(index_min_max(2, n), nil_index_list()),
        log_diff_exp(
          rvalue(upper_lcdf,
            cons_list(index_min_max(2, n), nil_index_list()), "upper_lcdf"),
          rvalue(upper_lcdf,
            cons_list(index_min_max(1, (n - 1)), nil_index_list()),
            "upper_lcdf")), "assigning variable lpmf");
      current_statement__ = 248;
      assign(lpmf, nil_index_list(),
        subtract(stan::model::deep_copy(lpmf), upper_lcdf[(n - 1)]),
        "assigning variable lpmf");
    } else {
      current_statement__ = 227;
      assign(lpmf, nil_index_list(),
        rep_vector(stan::math::negative_infinity(), n),
        "assigning variable lpmf");
      current_statement__ = 228;
      assign(lpmf, cons_list(index_uni(n), nil_index_list()), 0,
        "assigning variable lpmf");
    }
    current_statement__ = 251;
    return stan::math::exp(lpmf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct discretised_pmf_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& mu, const T1__& sigma, const int& n, const int& dist,
           std::ostream* pstream__)  const 
{
return discretised_pmf(mu, sigma, n, dist, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
reverse_mf(const T0__& pmf_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& pmf = to_ref(pmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int max_pmf;
    max_pmf = std::numeric_limits<int>::min();
    
    current_statement__ = 253;
    max_pmf = num_elements(pmf);
    current_statement__ = 254;
    validate_non_negative_index("rev_pmf", "max_pmf", max_pmf);
    Eigen::Matrix<local_scalar_t__, -1, 1> rev_pmf;
    rev_pmf = Eigen::Matrix<local_scalar_t__, -1, 1>(max_pmf);
    stan::math::fill(rev_pmf, DUMMY_VAR__);
    
    current_statement__ = 258;
    for (int d = 1; d <= max_pmf; ++d) {
      current_statement__ = 256;
      assign(rev_pmf, cons_list(index_uni(d), nil_index_list()),
        pmf[(((max_pmf - d) + 1) - 1)], "assigning variable rev_pmf");}
    current_statement__ = 259;
    return rev_pmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct reverse_mf_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& pmf, std::ostream* pstream__)  const 
{
return reverse_mf(pmf, pstream__);
}
};
Eigen::Matrix<double, -1, 1>
rev_seq(const int& base, const int& len, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 261;
    validate_non_negative_index("seq", "len", len);
    Eigen::Matrix<local_scalar_t__, -1, 1> seq;
    seq = Eigen::Matrix<local_scalar_t__, -1, 1>(len);
    stan::math::fill(seq, DUMMY_VAR__);
    
    current_statement__ = 265;
    for (int i = 1; i <= len; ++i) {
      current_statement__ = 263;
      assign(seq, cons_list(index_uni(i), nil_index_list()),
        ((len + base) - i), "assigning variable seq");}
    current_statement__ = 266;
    return seq;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct rev_seq_functor__ {
Eigen::Matrix<double, -1, 1>
operator()(const int& base, const int& len, std::ostream* pstream__)  const 
{
return rev_seq(base, len, pstream__);
}
};
template <typename T0__>
stan::promote_args_t<stan::value_type_t<T0__>>
rev_pmf_mean(const T0__& rev_pmf_arg__, const int& base,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& rev_pmf = to_ref(rev_pmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int len;
    len = std::numeric_limits<int>::min();
    
    current_statement__ = 268;
    len = num_elements(rev_pmf);
    current_statement__ = 269;
    validate_non_negative_index("rev_pmf_seq", "len", len);
    Eigen::Matrix<local_scalar_t__, -1, 1> rev_pmf_seq;
    rev_pmf_seq = Eigen::Matrix<local_scalar_t__, -1, 1>(len);
    stan::math::fill(rev_pmf_seq, DUMMY_VAR__);
    
    current_statement__ = 270;
    assign(rev_pmf_seq, nil_index_list(), rev_seq(base, len, pstream__),
      "assigning variable rev_pmf_seq");
    current_statement__ = 271;
    return dot_product(rev_pmf_seq, rev_pmf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct rev_pmf_mean_functor__ {
template <typename T0__>
stan::promote_args_t<stan::value_type_t<T0__>>
operator()(const T0__& rev_pmf, const int& base, std::ostream* pstream__)  const 
{
return rev_pmf_mean(rev_pmf, base, pstream__);
}
};
template <typename T0__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>,
T2__>
rev_pmf_var(const T0__& rev_pmf_arg__, const int& base, const T2__& mean,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T2__>;
  const auto& rev_pmf = to_ref(rev_pmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int len;
    len = std::numeric_limits<int>::min();
    
    current_statement__ = 273;
    len = num_elements(rev_pmf);
    current_statement__ = 274;
    validate_non_negative_index("rev_pmf_seq", "len", len);
    Eigen::Matrix<local_scalar_t__, -1, 1> rev_pmf_seq;
    rev_pmf_seq = Eigen::Matrix<local_scalar_t__, -1, 1>(len);
    stan::math::fill(rev_pmf_seq, DUMMY_VAR__);
    
    current_statement__ = 275;
    assign(rev_pmf_seq, nil_index_list(), rev_seq(base, len, pstream__),
      "assigning variable rev_pmf_seq");
    current_statement__ = 278;
    for (int i = 1; i <= len; ++i) {
      current_statement__ = 276;
      assign(rev_pmf_seq, cons_list(index_uni(i), nil_index_list()),
        pow(rev_pmf_seq[(i - 1)], 2), "assigning variable rev_pmf_seq");}
    current_statement__ = 279;
    return (dot_product(rev_pmf_seq, rev_pmf) - pow(mean, 2));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct rev_pmf_var_functor__ {
template <typename T0__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>,
T2__>
operator()(const T0__& rev_pmf, const int& base, const T2__& mean,
           std::ostream* pstream__)  const 
{
return rev_pmf_var(rev_pmf, base, mean, pstream__);
}
};
std::vector<int>
get_delay_type_max(const int& delay_types,
                   const std::vector<int>& delay_types_p,
                   const std::vector<int>& delay_types_id,
                   const std::vector<int>& delay_types_groups,
                   const std::vector<int>& delay_max,
                   const std::vector<int>& delay_np_pmf_groups,
                   std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 281;
    validate_non_negative_index("ret", "delay_types", delay_types);
    std::vector<int> ret;
    ret = std::vector<int>(delay_types, std::numeric_limits<int>::min());
    
    current_statement__ = 292;
    for (int i = 1; i <= delay_types; ++i) {
      current_statement__ = 283;
      assign(ret, cons_list(index_uni(i), nil_index_list()), 1,
        "assigning variable ret");
      current_statement__ = 290;
      for (int j = delay_types_groups[(i - 1)];
           j <= (delay_types_groups[((i + 1) - 1)] - 1); ++j) {
        current_statement__ = 288;
        if (delay_types_p[(j - 1)]) {
          current_statement__ = 286;
          assign(ret, cons_list(index_uni(i), nil_index_list()),
            (ret[(i - 1)] + (delay_max[(delay_types_id[(j - 1)] - 1)] - 1)),
            "assigning variable ret");
        } else {
          current_statement__ = 284;
          assign(ret, cons_list(index_uni(i), nil_index_list()),
            (ret[(i - 1)] +
              ((delay_np_pmf_groups[((delay_types_id[(j - 1)] + 1) - 1)] -
                 delay_np_pmf_groups[(delay_types_id[(j - 1)] - 1)]) - 1)),
            "assigning variable ret");
        }}}
    current_statement__ = 293;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct get_delay_type_max_functor__ {
std::vector<int>
operator()(const int& delay_types, const std::vector<int>& delay_types_p,
           const std::vector<int>& delay_types_id,
           const std::vector<int>& delay_types_groups,
           const std::vector<int>& delay_max,
           const std::vector<int>& delay_np_pmf_groups,
           std::ostream* pstream__)  const 
{
return get_delay_type_max(delay_types, delay_types_p, delay_types_id,
         delay_types_groups, delay_max, delay_np_pmf_groups, pstream__);
}
};
template <typename T6__, typename T8__, typename T9__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T6__>, T8__,
T9__>, -1, 1>
get_delay_rev_pmf(const int& delay_id, const int& len,
                  const std::vector<int>& delay_types_p,
                  const std::vector<int>& delay_types_id,
                  const std::vector<int>& delay_types_groups,
                  const std::vector<int>& delay_max,
                  const T6__& delay_np_pmf_arg__,
                  const std::vector<int>& delay_np_pmf_groups,
                  const std::vector<T8__>& delay_mean,
                  const std::vector<T9__>& delay_sigma,
                  const std::vector<int>& delay_dist,
                  const int& left_truncate, const int& reverse_pmf,
                  const int& cumulative, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T6__>,
          T8__,
          T9__>;
  const auto& delay_np_pmf = to_ref(delay_np_pmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 295;
    validate_non_negative_index("pmf", "len", len);
    Eigen::Matrix<local_scalar_t__, -1, 1> pmf;
    pmf = Eigen::Matrix<local_scalar_t__, -1, 1>(len);
    stan::math::fill(pmf, DUMMY_VAR__);
    
    current_statement__ = 296;
    assign(pmf, nil_index_list(), rep_vector(0, len),
      "assigning variable pmf");
    int current_len;
    current_len = std::numeric_limits<int>::min();
    
    current_statement__ = 297;
    current_len = 1;
    int new_len;
    new_len = std::numeric_limits<int>::min();
    
    current_statement__ = 320;
    for (int i = delay_types_groups[(delay_id - 1)];
         i <= (delay_types_groups[((delay_id + 1) - 1)] - 1); ++i) {
      current_statement__ = 317;
      if (delay_types_p[(i - 1)]) {
        current_statement__ = 308;
        validate_non_negative_index("new_variable_pmf",
                                    "delay_max[delay_types_id[i]]",
                                    delay_max[(delay_types_id[(i - 1)] - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, 1> new_variable_pmf;
        new_variable_pmf = Eigen::Matrix<local_scalar_t__, -1, 1>(delay_max[
          (delay_types_id[(i - 1)] - 1)]);
        stan::math::fill(new_variable_pmf, DUMMY_VAR__);
        
        current_statement__ = 309;
        assign(new_variable_pmf, nil_index_list(),
          discretised_pmf(delay_mean[(delay_types_id[(i - 1)] - 1)],
            delay_sigma[(delay_types_id[(i - 1)] - 1)],
            delay_max[(delay_types_id[(i - 1)] - 1)],
            delay_dist[(delay_types_id[(i - 1)] - 1)], pstream__),
          "assigning variable new_variable_pmf");
        current_statement__ = 310;
        new_len = ((current_len + delay_max[(delay_types_id[(i - 1)] - 1)]) -
                    1);
        current_statement__ = 315;
        if (logical_eq(current_len, 1)) {
          current_statement__ = 313;
          assign(pmf, cons_list(index_min_max(1, new_len), nil_index_list()),
            new_variable_pmf, "assigning variable pmf");
        } else {
          current_statement__ = 311;
          assign(pmf, cons_list(index_min_max(1, new_len), nil_index_list()),
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                rvalue(pmf,
                  cons_list(index_min_max(1, current_len), nil_index_list()),
                  "pmf")), reverse_mf(new_variable_pmf, pstream__),
              new_len, pstream__), "assigning variable pmf");
        }
      } else {
        int start;
        start = std::numeric_limits<int>::min();
        
        current_statement__ = 299;
        start = delay_np_pmf_groups[(delay_types_id[(i - 1)] - 1)];
        int end;
        end = std::numeric_limits<int>::min();
        
        current_statement__ = 300;
        end = (delay_np_pmf_groups[((delay_types_id[(i - 1)] + 1) - 1)] - 1);
        current_statement__ = 301;
        new_len = ((current_len + end) - start);
        current_statement__ = 306;
        if (logical_eq(current_len, 1)) {
          current_statement__ = 304;
          assign(pmf, cons_list(index_min_max(1, new_len), nil_index_list()),
            rvalue(delay_np_pmf,
              cons_list(index_min_max(start, end), nil_index_list()),
              "delay_np_pmf"), "assigning variable pmf");
        } else {
          current_statement__ = 302;
          assign(pmf, cons_list(index_min_max(1, new_len), nil_index_list()),
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                rvalue(pmf,
                  cons_list(index_min_max(1, current_len), nil_index_list()),
                  "pmf")),
              reverse_mf(
                rvalue(delay_np_pmf,
                  cons_list(index_min_max(start, end), nil_index_list()),
                  "delay_np_pmf"), pstream__), new_len, pstream__),
            "assigning variable pmf");
        }
      }
      current_statement__ = 318;
      current_len = new_len;}
    current_statement__ = 323;
    if (left_truncate) {
      current_statement__ = 321;
      assign(pmf, nil_index_list(),
        append_row(rep_vector(0, left_truncate),
          divide(
            stan::model::deep_copy(
              rvalue(pmf,
                cons_list(index_min_max((left_truncate + 1), len),
                  nil_index_list()), "pmf")),
            sum(
              rvalue(pmf,
                cons_list(index_min_max((left_truncate + 1), len),
                  nil_index_list()), "pmf")))), "assigning variable pmf");
    } 
    current_statement__ = 326;
    if (cumulative) {
      current_statement__ = 324;
      assign(pmf, nil_index_list(),
        cumulative_sum(stan::model::deep_copy(pmf)), "assigning variable pmf");
    } 
    current_statement__ = 329;
    if (reverse_pmf) {
      current_statement__ = 327;
      assign(pmf, nil_index_list(),
        reverse_mf(stan::model::deep_copy(pmf), pstream__),
        "assigning variable pmf");
    } 
    current_statement__ = 330;
    return pmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct get_delay_rev_pmf_functor__ {
template <typename T6__, typename T8__, typename T9__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T6__>, T8__,
T9__>, -1, 1>
operator()(const int& delay_id, const int& len,
           const std::vector<int>& delay_types_p,
           const std::vector<int>& delay_types_id,
           const std::vector<int>& delay_types_groups,
           const std::vector<int>& delay_max, const T6__& delay_np_pmf,
           const std::vector<int>& delay_np_pmf_groups,
           const std::vector<T8__>& delay_mean,
           const std::vector<T9__>& delay_sigma,
           const std::vector<int>& delay_dist, const int& left_truncate,
           const int& reverse_pmf, const int& cumulative,
           std::ostream* pstream__)  const 
{
return get_delay_rev_pmf(delay_id, len, delay_types_p, delay_types_id,
         delay_types_groups, delay_max, delay_np_pmf, delay_np_pmf_groups,
         delay_mean, delay_sigma, delay_dist, left_truncate, reverse_pmf,
         cumulative, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T5__, typename T_lp__,
typename T_lp_accum__>
void
delays_lp(const std::vector<T0__>& delay_mean,
          const std::vector<T1__>& delay_mean_mean,
          const std::vector<T2__>& delay_mean_sd,
          const std::vector<T3__>& delay_sd,
          const std::vector<T4__>& delay_sd_mean,
          const std::vector<T5__>& delay_sd_sd,
          const std::vector<int>& delay_dist, const std::vector<int>& weight,
          T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__>>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int mean_delays;
    mean_delays = std::numeric_limits<int>::min();
    
    current_statement__ = 332;
    mean_delays = num_elements(delay_mean);
    int sd_delays;
    sd_delays = std::numeric_limits<int>::min();
    
    current_statement__ = 333;
    sd_delays = num_elements(delay_sd);
    current_statement__ = 343;
    if (mean_delays) {
      current_statement__ = 341;
      for (int s = 1; s <= mean_delays; ++s) {
        current_statement__ = 339;
        if (logical_gt(delay_mean_sd[(s - 1)], 0)) {
          current_statement__ = 334;
          lp_accum__.add(
            (normal_lpdf<false>(delay_mean[(s - 1)],
               delay_mean_mean[(s - 1)], delay_mean_sd[(s - 1)]) *
              weight[(s - 1)]));
          current_statement__ = 337;
          if (delay_dist[(s - 1)]) {
            current_statement__ = 335;
            lp_accum__.add(
              (-normal_lccdf(0, delay_mean_mean[(s - 1)],
                  delay_mean_sd[(s - 1)]) * weight[(s - 1)]));
          } 
        } }
    } 
    current_statement__ = 351;
    if (sd_delays) {
      current_statement__ = 349;
      for (int s = 1; s <= sd_delays; ++s) {
        current_statement__ = 347;
        if (logical_gt(delay_sd_sd[(s - 1)], 0)) {
          current_statement__ = 344;
          lp_accum__.add(
            (normal_lpdf<false>(delay_sd[(s - 1)], delay_sd_mean[(s - 1)],
               delay_sd_sd[(s - 1)]) * weight[(s - 1)]));
          current_statement__ = 345;
          lp_accum__.add(
            (-normal_lccdf(0, delay_sd_mean[(s - 1)], delay_sd_sd[(s - 1)]) *
              weight[(s - 1)]));
        } }
    } 
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct delays_lp_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T5__, typename T_lp__,
typename T_lp_accum__>
void
operator()(const std::vector<T0__>& delay_mean,
           const std::vector<T1__>& delay_mean_mean,
           const std::vector<T2__>& delay_mean_sd,
           const std::vector<T3__>& delay_sd,
           const std::vector<T4__>& delay_sd_mean,
           const std::vector<T5__>& delay_sd_sd,
           const std::vector<int>& delay_dist,
           const std::vector<int>& weight, T_lp__& lp__,
           T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return delays_lp<propto__>(delay_mean, delay_mean_mean, delay_mean_sd,
         delay_sd, delay_sd_mean, delay_sd_sd, delay_dist, weight, lp__,
         lp_accum__, pstream__);
}
};
template <typename T0__>
stan::promote_args_t<T0__>
lambda(const T0__& L, const int& m, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ lam;
    lam = DUMMY_VAR__;
    
    current_statement__ = 354;
    lam = pow(((m * stan::math::pi()) / (2 * L)), 2);
    current_statement__ = 355;
    return lam;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct lambda_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& L, const int& m, std::ostream* pstream__)  const 
{
return lambda(L, m, pstream__);
}
};
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T2__>>, -1, 1>
phi(const T0__& L, const int& m, const T2__& x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T2__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 357;
    validate_non_negative_index("fi", "rows(x)", rows(x));
    Eigen::Matrix<local_scalar_t__, -1, 1> fi;
    fi = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(x));
    stan::math::fill(fi, DUMMY_VAR__);
    
    current_statement__ = 359;
    assign(fi, nil_index_list(),
      multiply((1 / stan::math::sqrt(L)),
        stan::math::sin(
          multiply(((m * stan::math::pi()) / (2 * L)), add(x, L)))),
      "assigning variable fi");
    current_statement__ = 360;
    return fi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct phi_functor__ {
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T2__>>, -1, 1>
operator()(const T0__& L, const int& m, const T2__& x,
           std::ostream* pstream__)  const 
{
return phi(L, m, x, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
spd_se(const T0__& alpha, const T1__& rho, const T2__& w,
       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ S;
    S = DUMMY_VAR__;
    
    current_statement__ = 363;
    S = (((pow(alpha, 2) * stan::math::sqrt((2 * stan::math::pi()))) * rho) *
          stan::math::exp(((-0.5 * pow(rho, 2)) * pow(w, 2))));
    current_statement__ = 364;
    return S;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct spd_se_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& alpha, const T1__& rho, const T2__& w,
           std::ostream* pstream__)  const 
{
return spd_se(alpha, rho, w, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
spd_matern(const T0__& alpha, const T1__& rho, const T2__& w,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ S;
    S = DUMMY_VAR__;
    
    current_statement__ = 367;
    S = ((((4 * pow(alpha, 2)) * pow((stan::math::sqrt(3) / rho), 3)) * 1) /
          pow((pow((stan::math::sqrt(3) / rho), 2) + pow(w, 2)), 2));
    current_statement__ = 368;
    return S;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct spd_matern_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& alpha, const T1__& rho, const T2__& w,
           std::ostream* pstream__)  const 
{
return spd_matern(alpha, rho, w, pstream__);
}
};
int
setup_noise(const int& ot_h, const int& t, const int& horizon,
            const int& estimate_r, const int& stationary,
            const int& future_fixed, const int& fixed_from,
            std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int noise_time;
    noise_time = std::numeric_limits<int>::min();
    
    current_statement__ = 370;
    noise_time = (logical_gt(estimate_r, 0) ?
                    (logical_gt(stationary, 0) ? ot_h : (ot_h - 1)) : t);
    int noise_terms;
    noise_terms = std::numeric_limits<int>::min();
    
    current_statement__ = 371;
    noise_terms = (logical_gt(future_fixed, 0) ?
                     ((noise_time - horizon) + fixed_from) : noise_time);
    current_statement__ = 372;
    return noise_terms;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct setup_noise_functor__ {
int
operator()(const int& ot_h, const int& t, const int& horizon,
           const int& estimate_r, const int& stationary,
           const int& future_fixed, const int& fixed_from,
           std::ostream* pstream__)  const 
{
return setup_noise(ot_h, t, horizon, estimate_r, stationary, future_fixed,
         fixed_from, pstream__);
}
};
template <typename T1__>
Eigen::Matrix<stan::promote_args_t<T1__>, -1, -1>
setup_gp(const int& M, const T1__& L, const int& dimension,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 374;
    validate_non_negative_index("time", "dimension", dimension);
    Eigen::Matrix<local_scalar_t__, -1, 1> time;
    time = Eigen::Matrix<local_scalar_t__, -1, 1>(dimension);
    stan::math::fill(time, DUMMY_VAR__);
    
    current_statement__ = 376;
    validate_non_negative_index("PHI", "dimension", dimension);
    current_statement__ = 377;
    validate_non_negative_index("PHI", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, -1> PHI;
    PHI = Eigen::Matrix<local_scalar_t__, -1, -1>(dimension, M);
    stan::math::fill(PHI, DUMMY_VAR__);
    
    local_scalar_t__ half_dim;
    half_dim = DUMMY_VAR__;
    
    current_statement__ = 379;
    half_dim = (dimension / 2.0);
    current_statement__ = 382;
    for (int s = 1; s <= dimension; ++s) {
      current_statement__ = 380;
      assign(time, cons_list(index_uni(s), nil_index_list()),
        ((s - half_dim) / half_dim), "assigning variable time");}
    current_statement__ = 385;
    for (int m = 1; m <= M; ++m) {
      current_statement__ = 383;
      assign(PHI,
        cons_list(index_omni(), cons_list(index_uni(m), nil_index_list())),
        phi(L, m, time, pstream__), "assigning variable PHI");}
    current_statement__ = 386;
    return PHI;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct setup_gp_functor__ {
template <typename T1__>
Eigen::Matrix<stan::promote_args_t<T1__>, -1, -1>
operator()(const int& M, const T1__& L, const int& dimension,
           std::ostream* pstream__)  const 
{
return setup_gp(M, L, dimension, pstream__);
}
};
template <typename T0__, typename T2__, typename T3__, typename T4__,
typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T2__, T3__, T4__,
stan::value_type_t<T5__>>, -1, 1>
update_gp(const T0__& PHI_arg__, const int& M, const T2__& L,
          const T3__& alpha, const T4__& rho, const T5__& eta_arg__,
          const int& type, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T2__,
          T3__,
          T4__,
          stan::value_type_t<T5__>>;
  const auto& PHI = to_ref(PHI_arg__);
  const auto& eta = to_ref(eta_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 388;
    validate_non_negative_index("diagSPD", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> diagSPD;
    diagSPD = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(diagSPD, DUMMY_VAR__);
    
    current_statement__ = 390;
    validate_non_negative_index("SPD_eta", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> SPD_eta;
    SPD_eta = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(SPD_eta, DUMMY_VAR__);
    
    int noise_terms;
    noise_terms = std::numeric_limits<int>::min();
    
    current_statement__ = 392;
    noise_terms = rows(PHI);
    current_statement__ = 393;
    validate_non_negative_index("noise", "noise_terms", noise_terms);
    Eigen::Matrix<local_scalar_t__, -1, 1> noise;
    noise = Eigen::Matrix<local_scalar_t__, -1, 1>(noise_terms);
    stan::math::fill(noise, DUMMY_VAR__);
    
    current_statement__ = 394;
    assign(noise, nil_index_list(), rep_vector(1e-6, noise_terms),
      "assigning variable noise");
    local_scalar_t__ unit_rho;
    unit_rho = DUMMY_VAR__;
    
    current_statement__ = 395;
    unit_rho = (rho / noise_terms);
    current_statement__ = 405;
    if (logical_eq(type, 0)) {
      current_statement__ = 403;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 401;
        assign(diagSPD, cons_list(index_uni(m), nil_index_list()),
          stan::math::sqrt(
            spd_se(alpha, unit_rho,
              stan::math::sqrt(lambda(L, m, pstream__)), pstream__)),
          "assigning variable diagSPD");}
    } else {
      current_statement__ = 400;
      if (logical_eq(type, 1)) {
        current_statement__ = 398;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 396;
          assign(diagSPD, cons_list(index_uni(m), nil_index_list()),
            stan::math::sqrt(
              spd_matern(alpha, unit_rho,
                stan::math::sqrt(lambda(L, m, pstream__)), pstream__)),
            "assigning variable diagSPD");}
      } 
    }
    current_statement__ = 406;
    assign(SPD_eta, nil_index_list(), elt_multiply(diagSPD, eta),
      "assigning variable SPD_eta");
    current_statement__ = 407;
    assign(noise, nil_index_list(),
      add(stan::model::deep_copy(noise),
        multiply(
          rvalue(PHI,
            cons_list(index_omni(),
              cons_list(index_omni(), nil_index_list())), "PHI"), SPD_eta)),
      "assigning variable noise");
    current_statement__ = 408;
    return noise;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct update_gp_functor__ {
template <typename T0__, typename T2__, typename T3__, typename T4__,
typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T2__, T3__, T4__,
stan::value_type_t<T5__>>, -1, 1>
operator()(const T0__& PHI, const int& M, const T2__& L, const T3__& alpha,
           const T4__& rho, const T5__& eta, const int& type,
           std::ostream* pstream__)  const 
{
return update_gp(PHI, M, L, alpha, rho, eta, type, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T5__, typename T6__, typename T7__,
typename T_lp__, typename T_lp_accum__>
void
gaussian_process_lp(const T0__& rho, const T1__& alpha,
                    const T2__& eta_arg__, const T3__& ls_meanlog,
                    const T4__& ls_sdlog, const T5__& ls_min,
                    const T6__& ls_max, const T7__& alpha_sd, T_lp__& lp__,
                    T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>,
          T3__,
          T4__, stan::promote_args_t<T5__,
          T6__,
          T7__>>;
  const auto& eta = to_ref(eta_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 418;
    if (logical_gt(ls_sdlog, 0)) {
      current_statement__ = 415;
      if (logical_lt(rho, ls_min)) {
        current_statement__ = 415;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 414;
        if (logical_gt(rho, ls_max)) {
          current_statement__ = 414;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 414;
          lp_accum__.add(
            -log_diff_exp(lognormal_cdf_log(ls_max, ls_meanlog, ls_sdlog),
               lognormal_cdf_log(ls_min, ls_meanlog, ls_sdlog)));
        }
      }
      current_statement__ = 416;
      lp_accum__.add(lognormal_lpdf<propto__>(rho, ls_meanlog, ls_sdlog));
    } else {
      current_statement__ = 411;
      if (logical_lt(rho, ls_min)) {
        current_statement__ = 411;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 410;
        if (logical_gt(rho, ls_max)) {
          current_statement__ = 410;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 410;
          lp_accum__.add(
            -log_diff_exp(
               inv_gamma_cdf_log(ls_max, 1.499007, (0.057277 * ls_max)),
               inv_gamma_cdf_log(ls_min, 1.499007, (0.057277 * ls_max))));
        }
      }
      current_statement__ = 412;
      lp_accum__.add(
        inv_gamma_lpdf<propto__>(rho, 1.499007, (0.057277 * ls_max)));
    }
    current_statement__ = 419;
    lp_accum__.add(normal_lpdf<propto__>(alpha, 0, alpha_sd));
    current_statement__ = 420;
    lp_accum__.add(std_normal_lpdf<propto__>(eta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gaussian_process_lp_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T5__, typename T6__, typename T7__,
typename T_lp__, typename T_lp_accum__>
void
operator()(const T0__& rho, const T1__& alpha, const T2__& eta,
           const T3__& ls_meanlog, const T4__& ls_sdlog, const T5__& ls_min,
           const T6__& ls_max, const T7__& alpha_sd, T_lp__& lp__,
           T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return gaussian_process_lp<propto__>(rho, alpha, eta, ls_meanlog, ls_sdlog,
         ls_min, ls_max, alpha_sd, lp__, lp_accum__, pstream__);
}
};
template <typename T1__, typename T2__, typename T4__>
Eigen::Matrix<stan::promote_args_t<T1__, stan::value_type_t<T2__>,
T4__>, -1, 1>
update_Rt(const int& t, const T1__& log_R, const T2__& noise_arg__,
          const std::vector<int>& bps, const std::vector<T4__>& bp_effects,
          const int& stationary, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
          stan::value_type_t<T2__>,
          T4__>;
  const auto& noise = to_ref(noise_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int bp_n;
    bp_n = std::numeric_limits<int>::min();
    
    current_statement__ = 422;
    bp_n = num_elements(bp_effects);
    int bp_c;
    bp_c = std::numeric_limits<int>::min();
    
    current_statement__ = 423;
    bp_c = 0;
    int gp_n;
    gp_n = std::numeric_limits<int>::min();
    
    current_statement__ = 424;
    gp_n = num_elements(noise);
    current_statement__ = 425;
    validate_non_negative_index("bp", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> bp;
    bp = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(bp, DUMMY_VAR__);
    
    current_statement__ = 426;
    assign(bp, nil_index_list(), rep_vector(0, t), "assigning variable bp");
    current_statement__ = 427;
    validate_non_negative_index("gp", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> gp;
    gp = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(gp, DUMMY_VAR__);
    
    current_statement__ = 428;
    assign(gp, nil_index_list(), rep_vector(0, t), "assigning variable gp");
    current_statement__ = 429;
    validate_non_negative_index("R", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> R;
    R = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(R, DUMMY_VAR__);
    
    current_statement__ = 439;
    if (bp_n) {
      current_statement__ = 436;
      for (int s = 1; s <= t; ++s) {
        current_statement__ = 434;
        if (bps[(s - 1)]) {
          current_statement__ = 431;
          bp_c = (bp_c + bps[(s - 1)]);
          current_statement__ = 432;
          assign(bp, cons_list(index_uni(s), nil_index_list()),
            bp_effects[(bp_c - 1)], "assigning variable bp");
        } }
      current_statement__ = 437;
      assign(bp, nil_index_list(),
        cumulative_sum(stan::model::deep_copy(bp)), "assigning variable bp");
    } 
    current_statement__ = 450;
    if (gp_n) {
      current_statement__ = 448;
      if (stationary) {
        current_statement__ = 443;
        assign(gp, cons_list(index_min_max(1, gp_n), nil_index_list()),
          noise, "assigning variable gp");
        current_statement__ = 446;
        if (logical_gt(t, gp_n)) {
          current_statement__ = 444;
          assign(gp,
            cons_list(index_min_max((gp_n + 1), t), nil_index_list()),
            rep_vector(noise[(gp_n - 1)], (t - gp_n)),
            "assigning variable gp");
        } 
      } else {
        current_statement__ = 440;
        assign(gp, cons_list(index_min_max(2, (gp_n + 1)), nil_index_list()),
          noise, "assigning variable gp");
        current_statement__ = 441;
        assign(gp, nil_index_list(),
          cumulative_sum(stan::model::deep_copy(gp)), "assigning variable gp");
      }
    } 
    current_statement__ = 451;
    assign(R, nil_index_list(), add(add(rep_vector(log_R, t), bp), gp),
      "assigning variable R");
    current_statement__ = 452;
    assign(R, nil_index_list(), stan::math::exp(stan::model::deep_copy(R)),
      "assigning variable R");
    current_statement__ = 453;
    return R;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct update_Rt_functor__ {
template <typename T1__, typename T2__, typename T4__>
Eigen::Matrix<stan::promote_args_t<T1__, stan::value_type_t<T2__>,
T4__>, -1, 1>
operator()(const int& t, const T1__& log_R, const T2__& noise,
           const std::vector<int>& bps, const std::vector<T4__>& bp_effects,
           const int& stationary, std::ostream* pstream__)  const 
{
return update_Rt(t, log_R, noise, bps, bp_effects, stationary, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T7__, typename T8__, typename T9__,
typename T10__, typename T_lp__, typename T_lp_accum__>
void
rt_lp(const T0__& log_R_arg__, const std::vector<T1__>& initial_infections,
      const std::vector<T2__>& initial_growth,
      const std::vector<T3__>& bp_effects, const std::vector<T4__>& bp_sd,
      const int& bp_n, const int& seeding_time, const T7__& r_logmean,
      const T8__& r_logsd, const T9__& prior_infections,
      const T10__& prior_growth, T_lp__& lp__, T_lp_accum__& lp_accum__,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T7__,
          T8__,
          T9__,
          T10__>>;
  const auto& log_R = to_ref(log_R_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 455;
    lp_accum__.add(normal_lpdf<propto__>(log_R, r_logmean, r_logsd));
    current_statement__ = 460;
    if (logical_gt(bp_n, 0)) {
      current_statement__ = 456;
      if (logical_lt(bp_sd[(1 - 1)], 0)) {
        current_statement__ = 456;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 456;
        lp_accum__.add(-normal_ccdf_log(0, 0, 0.1));
      }
      current_statement__ = 457;
      lp_accum__.add(normal_lpdf<propto__>(bp_sd[(1 - 1)], 0, 0.1));
      current_statement__ = 458;
      lp_accum__.add(normal_lpdf<propto__>(bp_effects, 0, bp_sd[(1 - 1)]));
    } 
    current_statement__ = 461;
    lp_accum__.add(
      normal_lpdf<propto__>(initial_infections, prior_infections, 0.2));
    current_statement__ = 464;
    if (logical_gt(seeding_time, 1)) {
      current_statement__ = 462;
      lp_accum__.add(normal_lpdf<propto__>(initial_growth, prior_growth, 0.2));
    } 
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct rt_lp_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T7__, typename T8__, typename T9__,
typename T10__, typename T_lp__, typename T_lp_accum__>
void
operator()(const T0__& log_R, const std::vector<T1__>& initial_infections,
           const std::vector<T2__>& initial_growth,
           const std::vector<T3__>& bp_effects,
           const std::vector<T4__>& bp_sd, const int& bp_n,
           const int& seeding_time, const T7__& r_logmean,
           const T8__& r_logsd, const T9__& prior_infections,
           const T10__& prior_growth, T_lp__& lp__, T_lp_accum__& lp_accum__,
           std::ostream* pstream__)  const 
{
return rt_lp<propto__>(log_R, initial_infections, initial_growth, bp_effects,
         bp_sd, bp_n, seeding_time, r_logmean, r_logsd, prior_infections,
         prior_growth, lp__, lp_accum__, pstream__);
}
};
template <typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
update_infectiousness(const T0__& infections_arg__,
                      const T1__& gt_rev_pmf_arg__, const int& seeding_time,
                      const int& index, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& infections = to_ref(infections_arg__);
  const auto& gt_rev_pmf = to_ref(gt_rev_pmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int gt_max;
    gt_max = std::numeric_limits<int>::min();
    
    current_statement__ = 466;
    gt_max = num_elements(gt_rev_pmf);
    int inf_start;
    inf_start = std::numeric_limits<int>::min();
    
    current_statement__ = 467;
    inf_start = std::max(1, (((index + seeding_time) - gt_max) + 1));
    int inf_end;
    inf_end = std::numeric_limits<int>::min();
    
    current_statement__ = 468;
    inf_end = (index + seeding_time);
    int pmf_accessed;
    pmf_accessed = std::numeric_limits<int>::min();
    
    current_statement__ = 469;
    pmf_accessed = std::min(gt_max, (index + seeding_time));
    local_scalar_t__ new_inf;
    new_inf = DUMMY_VAR__;
    
    current_statement__ = 470;
    new_inf = dot_product(
                rvalue(infections,
                  cons_list(index_min_max(inf_start, inf_end),
                    nil_index_list()), "infections"),
                tail(gt_rev_pmf, pmf_accessed));
    current_statement__ = 471;
    return new_inf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct update_infectiousness_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
operator()(const T0__& infections, const T1__& gt_rev_pmf,
           const int& seeding_time, const int& index, std::ostream* pstream__)  const 
{
return update_infectiousness(infections, gt_rev_pmf, seeding_time, index,
         pstream__);
}
};
template <typename T0__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T2__>,
T3__,
T4__>, -1, 1>
generate_infections(const T0__& oR_arg__, const int& uot,
                    const T2__& gt_rev_pmf_arg__,
                    const std::vector<T3__>& initial_infections,
                    const std::vector<T4__>& initial_growth, const int& pop,
                    const int& ht, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T2__>,
          T3__,
          T4__>;
  const auto& oR = to_ref(oR_arg__);
  const auto& gt_rev_pmf = to_ref(gt_rev_pmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int ot;
    ot = std::numeric_limits<int>::min();
    
    current_statement__ = 473;
    ot = num_elements(oR);
    int nht;
    nht = std::numeric_limits<int>::min();
    
    current_statement__ = 474;
    nht = (ot - ht);
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 475;
    t = (ot + uot);
    current_statement__ = 476;
    validate_non_negative_index("R", "ot", ot);
    Eigen::Matrix<local_scalar_t__, -1, 1> R;
    R = Eigen::Matrix<local_scalar_t__, -1, 1>(ot);
    stan::math::fill(R, DUMMY_VAR__);
    
    current_statement__ = 477;
    assign(R, nil_index_list(), oR, "assigning variable R");
    local_scalar_t__ exp_adj_Rt;
    exp_adj_Rt = DUMMY_VAR__;
    
    current_statement__ = 479;
    validate_non_negative_index("infections", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> infections;
    infections = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(infections, DUMMY_VAR__);
    
    current_statement__ = 480;
    assign(infections, nil_index_list(), rep_vector(0, t),
      "assigning variable infections");
    current_statement__ = 481;
    validate_non_negative_index("cum_infections", "ot", ot);
    Eigen::Matrix<local_scalar_t__, -1, 1> cum_infections;
    cum_infections = Eigen::Matrix<local_scalar_t__, -1, 1>(ot);
    stan::math::fill(cum_infections, DUMMY_VAR__);
    
    current_statement__ = 483;
    validate_non_negative_index("infectiousness", "ot", ot);
    Eigen::Matrix<local_scalar_t__, -1, 1> infectiousness;
    infectiousness = Eigen::Matrix<local_scalar_t__, -1, 1>(ot);
    stan::math::fill(infectiousness, DUMMY_VAR__);
    
    current_statement__ = 485;
    assign(infections, cons_list(index_uni(1), nil_index_list()),
      stan::math::exp(initial_infections[(1 - 1)]),
      "assigning variable infections");
    current_statement__ = 491;
    if (logical_gt(uot, 1)) {
      local_scalar_t__ growth;
      growth = DUMMY_VAR__;
      
      current_statement__ = 486;
      growth = stan::math::exp(initial_growth[(1 - 1)]);
      current_statement__ = 489;
      for (int s = 2; s <= uot; ++s) {
        current_statement__ = 487;
        assign(infections, cons_list(index_uni(s), nil_index_list()),
          (infections[((s - 1) - 1)] * growth),
          "assigning variable infections");}
    } 
    current_statement__ = 494;
    if (pop) {
      current_statement__ = 492;
      assign(cum_infections, cons_list(index_uni(1), nil_index_list()),
        sum(
          rvalue(infections,
            cons_list(index_min_max(1, uot), nil_index_list()), "infections")),
        "assigning variable cum_infections");
    } 
    current_statement__ = 507;
    for (int s = 1; s <= ot; ++s) {
      current_statement__ = 495;
      assign(infectiousness, cons_list(index_uni(s), nil_index_list()),
        update_infectiousness(infections, gt_rev_pmf, uot, s, pstream__),
        "assigning variable infectiousness");
      current_statement__ = 502;
      if ((primitive_value(pop) && primitive_value(logical_gt(s, nht)))) {
        current_statement__ = 498;
        exp_adj_Rt = stan::math::exp(
                       ((-R[(s - 1)] * infectiousness[(s - 1)]) /
                         (pop - cum_infections[(nht - 1)])));
        current_statement__ = 499;
        exp_adj_Rt = (logical_gt(exp_adj_Rt, 1) ?
                        stan::math::promote_scalar<local_scalar_t__>(1) :
                        stan::math::promote_scalar<local_scalar_t__>(exp_adj_Rt));
        current_statement__ = 500;
        assign(infections, cons_list(index_uni((s + uot)), nil_index_list()),
          ((pop - cum_infections[(s - 1)]) * (1 - exp_adj_Rt)),
          "assigning variable infections");
      } else {
        current_statement__ = 496;
        assign(infections, cons_list(index_uni((s + uot)), nil_index_list()),
          (R[(s - 1)] * infectiousness[(s - 1)]),
          "assigning variable infections");
      }
      current_statement__ = 505;
      if ((primitive_value(pop) && primitive_value(logical_lt(s, ot)))) {
        current_statement__ = 503;
        assign(cum_infections,
          cons_list(index_uni((s + 1)), nil_index_list()),
          (cum_infections[(s - 1)] + infections[((s + uot) - 1)]),
          "assigning variable cum_infections");
      } }
    current_statement__ = 508;
    return infections;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct generate_infections_functor__ {
template <typename T0__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T2__>,
T3__,
T4__>, -1, 1>
operator()(const T0__& oR, const int& uot, const T2__& gt_rev_pmf,
           const std::vector<T3__>& initial_infections,
           const std::vector<T4__>& initial_growth, const int& pop,
           const int& ht, std::ostream* pstream__)  const 
{
return generate_infections(oR, uot, gt_rev_pmf, initial_infections,
         initial_growth, pop, ht, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
deconvolve_infections(const T0__& shifted_cases_arg__,
                      const T1__& noise_arg__, const int& fixed,
                      const int& prior, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& shifted_cases = to_ref(shifted_cases_arg__);
  const auto& noise = to_ref(noise_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 510;
    t = num_elements(shifted_cases);
    current_statement__ = 511;
    validate_non_negative_index("infections", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> infections;
    infections = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(infections, DUMMY_VAR__);
    
    current_statement__ = 512;
    assign(infections, nil_index_list(), rep_vector(1e-5, t),
      "assigning variable infections");
    current_statement__ = 530;
    if (logical_negation(fixed)) {
      current_statement__ = 515;
      validate_non_negative_index("exp_noise", "t", t);
      Eigen::Matrix<local_scalar_t__, -1, 1> exp_noise;
      exp_noise = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
      stan::math::fill(exp_noise, DUMMY_VAR__);
      
      current_statement__ = 516;
      assign(exp_noise, nil_index_list(), stan::math::exp(noise),
        "assigning variable exp_noise");
      current_statement__ = 528;
      if (logical_eq(prior, 1)) {
        current_statement__ = 526;
        assign(infections, nil_index_list(),
          add(stan::model::deep_copy(infections),
            elt_multiply(shifted_cases, exp_noise)),
          "assigning variable infections");
      } else {
        current_statement__ = 525;
        if (logical_eq(prior, 0)) {
          current_statement__ = 523;
          assign(infections, nil_index_list(),
            add(stan::model::deep_copy(infections), exp_noise),
            "assigning variable infections");
        } else {
          current_statement__ = 522;
          if (logical_eq(prior, 2)) {
            current_statement__ = 517;
            assign(infections, cons_list(index_uni(1), nil_index_list()),
              (infections[(1 - 1)] +
                (shifted_cases[(1 - 1)] * exp_noise[(1 - 1)])),
              "assigning variable infections");
            current_statement__ = 520;
            for (int i = 2; i <= t; ++i) {
              current_statement__ = 518;
              assign(infections, cons_list(index_uni(i), nil_index_list()),
                (infections[((i - 1) - 1)] * exp_noise[(i - 1)]),
                "assigning variable infections");}
          } 
        }
      }
    } else {
      current_statement__ = 513;
      assign(infections, nil_index_list(),
        add(stan::model::deep_copy(infections), shifted_cases),
        "assigning variable infections");
    }
    current_statement__ = 531;
    return infections;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct deconvolve_infections_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& shifted_cases, const T1__& noise, const int& fixed,
           const int& prior, std::ostream* pstream__)  const 
{
return deconvolve_infections(shifted_cases, noise, fixed, prior, pstream__);
}
};
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T2__>>, -1, 1>
day_of_week_effect(const T0__& reports_arg__,
                   const std::vector<int>& day_of_week,
                   const T2__& effect_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T2__>>;
  const auto& reports = to_ref(reports_arg__);
  const auto& effect = to_ref(effect_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 533;
    t = num_elements(reports);
    int wl;
    wl = std::numeric_limits<int>::min();
    
    current_statement__ = 534;
    wl = num_elements(effect);
    current_statement__ = 535;
    validate_non_negative_index("scaled_effect", "wl", wl);
    Eigen::Matrix<local_scalar_t__, -1, 1> scaled_effect;
    scaled_effect = Eigen::Matrix<local_scalar_t__, -1, 1>(wl);
    stan::math::fill(scaled_effect, DUMMY_VAR__);
    
    current_statement__ = 536;
    assign(scaled_effect, nil_index_list(), multiply(wl, effect),
      "assigning variable scaled_effect");
    current_statement__ = 537;
    validate_non_negative_index("scaled_reports", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> scaled_reports;
    scaled_reports = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(scaled_reports, DUMMY_VAR__);
    
    current_statement__ = 541;
    for (int s = 1; s <= t; ++s) {
      current_statement__ = 539;
      assign(scaled_reports, cons_list(index_uni(s), nil_index_list()),
        (reports[(s - 1)] * scaled_effect[(day_of_week[(s - 1)] - 1)]),
        "assigning variable scaled_reports");}
    current_statement__ = 542;
    return scaled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct day_of_week_effect_functor__ {
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T2__>>, -1, 1>
operator()(const T0__& reports, const std::vector<int>& day_of_week,
           const T2__& effect, std::ostream* pstream__)  const 
{
return day_of_week_effect(reports, day_of_week, effect, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& reports = to_ref(reports_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 544;
    t = num_elements(reports);
    current_statement__ = 545;
    validate_non_negative_index("scaled_reports", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> scaled_reports;
    scaled_reports = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(scaled_reports, DUMMY_VAR__);
    
    current_statement__ = 547;
    assign(scaled_reports, nil_index_list(), multiply(reports, frac_obs),
      "assigning variable scaled_reports");
    current_statement__ = 548;
    return scaled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct scale_obs_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, 1>
operator()(const T0__& reports, const T1__& frac_obs, std::ostream* pstream__)  const 
{
return scale_obs(reports, frac_obs, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
truncate(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
         const int& reconstruct, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& reports = to_ref(reports_arg__);
  const auto& trunc_rev_cmf = to_ref(trunc_rev_cmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 550;
    t = num_elements(reports);
    current_statement__ = 551;
    validate_non_negative_index("trunc_reports", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> trunc_reports;
    trunc_reports = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(trunc_reports, DUMMY_VAR__);
    
    current_statement__ = 552;
    assign(trunc_reports, nil_index_list(), reports,
      "assigning variable trunc_reports");
    int trunc_max;
    trunc_max = std::numeric_limits<int>::min();
    
    current_statement__ = 553;
    trunc_max = std::min(t, num_elements(trunc_rev_cmf));
    int first_t;
    first_t = std::numeric_limits<int>::min();
    
    current_statement__ = 554;
    first_t = ((t - trunc_max) + 1);
    current_statement__ = 559;
    if (reconstruct) {
      current_statement__ = 557;
      assign(trunc_reports,
        cons_list(index_min_max(first_t, t), nil_index_list()),
        elt_divide(
          stan::model::deep_copy(
            rvalue(trunc_reports,
              cons_list(index_min_max(first_t, t), nil_index_list()),
              "trunc_reports")),
          rvalue(trunc_rev_cmf,
            cons_list(index_min_max(1, trunc_max), nil_index_list()),
            "trunc_rev_cmf")), "assigning variable trunc_reports");
    } else {
      current_statement__ = 555;
      assign(trunc_reports,
        cons_list(index_min_max(first_t, t), nil_index_list()),
        elt_multiply(
          stan::model::deep_copy(
            rvalue(trunc_reports,
              cons_list(index_min_max(first_t, t), nil_index_list()),
              "trunc_reports")),
          rvalue(trunc_rev_cmf,
            cons_list(index_min_max(1, trunc_max), nil_index_list()),
            "trunc_rev_cmf")), "assigning variable trunc_reports");
    }
    current_statement__ = 560;
    return trunc_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct truncate_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& reports, const T1__& trunc_rev_cmf,
           const int& reconstruct, std::ostream* pstream__)  const 
{
return truncate(reports, trunc_rev_cmf, reconstruct, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T5__, typename T_lp__,
typename T_lp_accum__>
void
truncation_lp(const std::vector<T0__>& truncation_mean,
              const std::vector<T1__>& truncation_sd,
              const std::vector<T2__>& trunc_mean_mean,
              const std::vector<T3__>& trunc_mean_sd,
              const std::vector<T4__>& trunc_sd_mean,
              const std::vector<T5__>& trunc_sd_sd, T_lp__& lp__,
              T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__>>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int truncation;
    truncation = std::numeric_limits<int>::min();
    
    current_statement__ = 562;
    truncation = num_elements(truncation_mean);
    current_statement__ = 570;
    if (truncation) {
      current_statement__ = 565;
      if (logical_gt(trunc_mean_sd[(1 - 1)], 0)) {
        current_statement__ = 563;
        lp_accum__.add(
          normal_lpdf<propto__>(truncation_mean, trunc_mean_mean,
            trunc_mean_sd));
      } 
      current_statement__ = 568;
      if (logical_gt(trunc_sd_sd[(1 - 1)], 0)) {
        current_statement__ = 566;
        lp_accum__.add(
          normal_lpdf<propto__>(truncation_sd, trunc_sd_mean, trunc_sd_sd));
      } 
    } 
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct truncation_lp_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__, typename T5__, typename T_lp__,
typename T_lp_accum__>
void
operator()(const std::vector<T0__>& truncation_mean,
           const std::vector<T1__>& truncation_sd,
           const std::vector<T2__>& trunc_mean_mean,
           const std::vector<T3__>& trunc_mean_sd,
           const std::vector<T4__>& trunc_sd_mean,
           const std::vector<T5__>& trunc_sd_sd, T_lp__& lp__,
           T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return truncation_lp<propto__>(truncation_mean, truncation_sd,
         trunc_mean_mean, trunc_mean_sd, trunc_sd_mean, trunc_sd_sd, lp__,
         lp_accum__, pstream__);
}
};
template <bool propto__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T6__, typename T_lp__, typename T_lp_accum__>
void
report_lp(const std::vector<int>& cases, const T1__& reports_arg__,
          const std::vector<T2__>& rep_phi, const T3__& phi_mean,
          const T4__& phi_sd, const int& model_type, const T6__& weight,
          T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          T2__,
          T3__,
          T4__,
          T6__>;
  const auto& reports = to_ref(reports_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 588;
    if (model_type) {
      local_scalar_t__ sqrt_phi;
      sqrt_phi = DUMMY_VAR__;
      
      current_statement__ = 579;
      if (logical_lt(rep_phi[(model_type - 1)], 0)) {
        current_statement__ = 579;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 579;
        lp_accum__.add(-normal_ccdf_log(0, phi_mean, phi_sd));
      }
      current_statement__ = 580;
      lp_accum__.add(
        normal_lpdf<propto__>(rep_phi[(model_type - 1)], phi_mean, phi_sd));
      current_statement__ = 581;
      sqrt_phi = (1 / stan::math::sqrt(rep_phi[(model_type - 1)]));
      current_statement__ = 586;
      if (logical_eq(weight, 1)) {
        current_statement__ = 584;
        lp_accum__.add(
          neg_binomial_2_lpmf<propto__>(cases, reports, sqrt_phi));
      } else {
        current_statement__ = 582;
        lp_accum__.add(
          (neg_binomial_2_lpmf<false>(cases, reports, sqrt_phi) * weight));
      }
    } else {
      current_statement__ = 576;
      if (logical_eq(weight, 1)) {
        current_statement__ = 574;
        lp_accum__.add(poisson_lpmf<propto__>(cases, reports));
      } else {
        current_statement__ = 572;
        lp_accum__.add((poisson_lpmf<false>(cases, reports) * weight));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct report_lp_functor__ {
template <bool propto__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T6__, typename T_lp__, typename T_lp_accum__>
void
operator()(const std::vector<int>& cases, const T1__& reports,
           const std::vector<T2__>& rep_phi, const T3__& phi_mean,
           const T4__& phi_sd, const int& model_type, const T6__& weight,
           T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return report_lp<propto__>(cases, reports, rep_phi, phi_mean, phi_sd,
         model_type, weight, lp__, lp_accum__, pstream__);
}
};
template <typename T1__, typename T2__, typename T4__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, T2__,
T4__>, -1, 1>
report_log_lik(const std::vector<int>& cases, const T1__& reports_arg__,
               const std::vector<T2__>& rep_phi, const int& model_type,
               const T4__& weight, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          T2__,
          T4__>;
  const auto& reports = to_ref(reports_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 590;
    t = num_elements(reports);
    current_statement__ = 591;
    validate_non_negative_index("log_lik", "t", t);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_lik;
    log_lik = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
    stan::math::fill(log_lik, DUMMY_VAR__);
    
    current_statement__ = 602;
    if (logical_eq(model_type, 0)) {
      current_statement__ = 600;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 598;
        assign(log_lik, cons_list(index_uni(i), nil_index_list()),
          (poisson_lpmf<false>(cases[(i - 1)], reports[(i - 1)]) * weight),
          "assigning variable log_lik");}
    } else {
      local_scalar_t__ sqrt_phi;
      sqrt_phi = DUMMY_VAR__;
      
      current_statement__ = 593;
      sqrt_phi = (1 / stan::math::sqrt(rep_phi[(model_type - 1)]));
      current_statement__ = 596;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 594;
        assign(log_lik, cons_list(index_uni(i), nil_index_list()),
          (neg_binomial_2_lpmf<false>(cases[(i - 1)], reports[(i - 1)],
             sqrt_phi) * weight), "assigning variable log_lik");}
    }
    current_statement__ = 603;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct report_log_lik_functor__ {
template <typename T1__, typename T2__, typename T4__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>, T2__,
T4__>, -1, 1>
operator()(const std::vector<int>& cases, const T1__& reports,
           const std::vector<T2__>& rep_phi, const int& model_type,
           const T4__& weight, std::ostream* pstream__)  const 
{
return report_log_lik(cases, reports, rep_phi, model_type, weight, pstream__);
}
};
template <typename T0__, typename T1__, typename RNG>
std::vector<int>
report_rng(const T0__& reports_arg__, const std::vector<T1__>& rep_phi,
           const int& model_type, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& reports = to_ref(reports_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 605;
    t = num_elements(reports);
    current_statement__ = 606;
    validate_non_negative_index("sampled_reports", "t", t);
    std::vector<int> sampled_reports;
    sampled_reports = std::vector<int>(t, std::numeric_limits<int>::min());
    
    local_scalar_t__ sqrt_phi;
    sqrt_phi = DUMMY_VAR__;
    
    current_statement__ = 608;
    sqrt_phi = 1e5;
    current_statement__ = 611;
    if (model_type) {
      current_statement__ = 609;
      sqrt_phi = (1 / stan::math::sqrt(rep_phi[(model_type - 1)]));
    } 
    current_statement__ = 622;
    for (int s = 1; s <= t; ++s) {
      current_statement__ = 620;
      if (logical_lt(reports[(s - 1)], 1e-8)) {
        current_statement__ = 618;
        assign(sampled_reports, cons_list(index_uni(s), nil_index_list()), 0,
          "assigning variable sampled_reports");
      } else {
        current_statement__ = 616;
        if (logical_gt(sqrt_phi, 1e4)) {
          current_statement__ = 614;
          assign(sampled_reports, cons_list(index_uni(s), nil_index_list()),
            poisson_rng(
              (logical_gt(reports[(s - 1)], 1e8) ?
                 stan::math::promote_scalar<local_scalar_t__>(1e8) :
                 stan::math::promote_scalar<local_scalar_t__>(reports[
                 (s - 1)])), base_rng__),
            "assigning variable sampled_reports");
        } else {
          current_statement__ = 612;
          assign(sampled_reports, cons_list(index_uni(s), nil_index_list()),
            neg_binomial_2_rng(
              (logical_gt(reports[(s - 1)], 1e8) ?
                 stan::math::promote_scalar<local_scalar_t__>(1e8) :
                 stan::math::promote_scalar<local_scalar_t__>(reports[
                 (s - 1)])), sqrt_phi, base_rng__),
            "assigning variable sampled_reports");
        }
      }}
    current_statement__ = 623;
    return sampled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct report_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
std::vector<int>
operator()(const T0__& reports, const std::vector<T1__>& rep_phi,
           const int& model_type, RNG& base_rng__, std::ostream* pstream__)  const 
{
return report_rng(reports, rep_phi, model_type, base_rng__, pstream__);
}
};
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T2__>>, -1, 1>
calculate_Rt(const T0__& infections_arg__, const int& seeding_time,
             const T2__& gt_rev_pmf_arg__, const int& smooth,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T2__>>;
  const auto& infections = to_ref(infections_arg__);
  const auto& gt_rev_pmf = to_ref(gt_rev_pmf_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 625;
    t = num_elements(infections);
    int ot;
    ot = std::numeric_limits<int>::min();
    
    current_statement__ = 626;
    ot = (t - seeding_time);
    current_statement__ = 627;
    validate_non_negative_index("R", "ot", ot);
    Eigen::Matrix<local_scalar_t__, -1, 1> R;
    R = Eigen::Matrix<local_scalar_t__, -1, 1>(ot);
    stan::math::fill(R, DUMMY_VAR__);
    
    current_statement__ = 629;
    validate_non_negative_index("sR", "ot", ot);
    Eigen::Matrix<local_scalar_t__, -1, 1> sR;
    sR = Eigen::Matrix<local_scalar_t__, -1, 1>(ot);
    stan::math::fill(sR, DUMMY_VAR__);
    
    current_statement__ = 631;
    validate_non_negative_index("infectiousness", "ot", ot);
    Eigen::Matrix<local_scalar_t__, -1, 1> infectiousness;
    infectiousness = Eigen::Matrix<local_scalar_t__, -1, 1>(ot);
    stan::math::fill(infectiousness, DUMMY_VAR__);
    
    current_statement__ = 632;
    assign(infectiousness, nil_index_list(), rep_vector(1e-5, ot),
      "assigning variable infectiousness");
    current_statement__ = 636;
    for (int s = 1; s <= ot; ++s) {
      current_statement__ = 633;
      assign(infectiousness, cons_list(index_uni(s), nil_index_list()),
        (infectiousness[(s - 1)] +
          update_infectiousness(infections, gt_rev_pmf, seeding_time,
            s, pstream__)), "assigning variable infectiousness");
      current_statement__ = 634;
      assign(R, cons_list(index_uni(s), nil_index_list()),
        (infections[((s + seeding_time) - 1)] / infectiousness[(s - 1)]),
        "assigning variable R");}
    current_statement__ = 649;
    if (smooth) {
      current_statement__ = 647;
      for (int s = 1; s <= ot; ++s) {
        local_scalar_t__ window;
        window = DUMMY_VAR__;
        
        current_statement__ = 639;
        window = 0;
        current_statement__ = 640;
        assign(sR, cons_list(index_uni(s), nil_index_list()), 0,
          "assigning variable sR");
        current_statement__ = 644;
        for (int i = std::max(1, (s - smooth));
             i <= std::min(ot, (s + smooth)); ++i) {
          current_statement__ = 641;
          assign(sR, cons_list(index_uni(s), nil_index_list()),
            (sR[(s - 1)] + R[(i - 1)]), "assigning variable sR");
          current_statement__ = 642;
          window = (window + 1);}
        current_statement__ = 645;
        assign(sR, cons_list(index_uni(s), nil_index_list()),
          (sR[(s - 1)] / window), "assigning variable sR");}
    } else {
      current_statement__ = 637;
      assign(sR, nil_index_list(), R, "assigning variable sR");
    }
    current_statement__ = 650;
    return sR;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct calculate_Rt_functor__ {
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T2__>>, -1, 1>
operator()(const T0__& infections, const int& seeding_time,
           const T2__& gt_rev_pmf, const int& smooth, std::ostream* pstream__)  const 
{
return calculate_Rt(infections, seeding_time, gt_rev_pmf, smooth, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>>
R_to_growth(const T0__& R_arg__, const T1__& gt_mean, const T2__& gt_var,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__>;
  const auto& R = to_ref(R_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int t;
    t = std::numeric_limits<int>::min();
    
    current_statement__ = 652;
    t = num_elements(R);
    current_statement__ = 653;
    validate_non_negative_index("r", "t", t);
    std::vector<local_scalar_t__> r;
    r = std::vector<local_scalar_t__>(t, DUMMY_VAR__);
    
    current_statement__ = 664;
    if (logical_gt(gt_var, 0)) {
      local_scalar_t__ k;
      k = DUMMY_VAR__;
      
      current_statement__ = 659;
      k = (gt_var / pow(gt_mean, 2));
      current_statement__ = 662;
      for (int s = 1; s <= t; ++s) {
        current_statement__ = 660;
        assign(r, cons_list(index_uni(s), nil_index_list()),
          ((pow(R[(s - 1)], k) - 1) / (k * gt_mean)), "assigning variable r");
      }
    } else {
      current_statement__ = 657;
      for (int s = 1; s <= t; ++s) {
        current_statement__ = 655;
        assign(r, cons_list(index_uni(s), nil_index_list()),
          (stan::math::log(R[(s - 1)]) / gt_mean), "assigning variable r");}
    }
    current_statement__ = 665;
    return r;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct R_to_growth_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>>
operator()(const T0__& R, const T1__& gt_mean, const T2__& gt_var,
           std::ostream* pstream__)  const 
{
return R_to_growth(R, gt_mean, gt_var, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_estimate_infections final : public model_base_crtp<model_estimate_infections> {
private:
  int t;
  int seeding_time;
  int horizon;
  int future_time;
  std::vector<int> cases;
  Eigen::Matrix<double, -1, 1> shifted_cases;
  int delay_n;
  int delay_n_p;
  int delay_n_np;
  std::vector<double> delay_mean_mean;
  std::vector<double> delay_mean_sd;
  std::vector<double> delay_sd_mean;
  std::vector<double> delay_sd_sd;
  std::vector<int> delay_max;
  std::vector<int> delay_dist;
  int delay_np_pmf_max;
  Eigen::Matrix<double, -1, 1> delay_np_pmf;
  std::vector<int> delay_np_pmf_groups;
  std::vector<int> delay_weight;
  int delay_types;
  std::vector<int> delay_types_p;
  std::vector<int> delay_types_id;
  std::vector<int> delay_types_groups;
  double L;
  int M;
  double ls_meanlog;
  double ls_sdlog;
  double ls_min;
  double ls_max;
  double alpha_sd;
  int gp_type;
  int stationary;
  int fixed;
  int estimate_r;
  double prior_infections;
  double prior_growth;
  double r_mean;
  double r_sd;
  int bp_n;
  std::vector<int> breakpoints;
  int future_fixed;
  int fixed_from;
  int pop;
  int gt_id;
  int backcalc_prior;
  int rt_half_window;
  std::vector<int> day_of_week;
  int model_type;
  double phi_mean;
  double phi_sd;
  int week_effect;
  int obs_scale;
  double obs_scale_mean;
  double obs_scale_sd;
  double obs_weight;
  int likelihood;
  int return_likelihood;
  int trunc_id;
  int delay_id;
  int ot;
  int ot_h;
  int noise_terms;
  Eigen::Matrix<double, -1, -1> PHI;
  double r_logmean;
  double r_logsd;
  std::vector<int> delay_type_max;
  int rho_1dim__;
  int alpha_1dim__;
  int eta_1dim__;
  int initial_growth_1dim__;
  int bp_sd_1dim__;
  int noise_1dim__;
  int R_1dim__;
  int gt_rev_pmf_1dim__;
  int gen_R_1dim__;
  int log_lik_1dim__;
 
public:
  ~model_estimate_infections() { }
  
  inline std::string model_name() const final { return "model_estimate_infections"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_estimate_infections(stan::io::var_context& context__,
                            unsigned int random_seed__ = 0,
                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_estimate_infections_namespace::model_estimate_infections";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 91;
      context__.validate_dims("data initialization","t","int",
          context__.to_vec());
      t = std::numeric_limits<int>::min();
      
      current_statement__ = 91;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 92;
      context__.validate_dims("data initialization","seeding_time","int",
          context__.to_vec());
      seeding_time = std::numeric_limits<int>::min();
      
      current_statement__ = 92;
      seeding_time = context__.vals_i("seeding_time")[(1 - 1)];
      current_statement__ = 93;
      context__.validate_dims("data initialization","horizon","int",
          context__.to_vec());
      horizon = std::numeric_limits<int>::min();
      
      current_statement__ = 93;
      horizon = context__.vals_i("horizon")[(1 - 1)];
      current_statement__ = 94;
      context__.validate_dims("data initialization","future_time","int",
          context__.to_vec());
      future_time = std::numeric_limits<int>::min();
      
      current_statement__ = 94;
      future_time = context__.vals_i("future_time")[(1 - 1)];
      current_statement__ = 95;
      validate_non_negative_index("cases", "t - horizon - seeding_time",
                                  ((t - horizon) - seeding_time));
      current_statement__ = 96;
      context__.validate_dims("data initialization","cases","int",
          context__.to_vec(((t - horizon) - seeding_time)));
      cases = std::vector<int>(((t - horizon) - seeding_time), std::numeric_limits<int>::min());
      
      current_statement__ = 96;
      assign(cases, nil_index_list(), context__.vals_i("cases"),
        "assigning variable cases");
      current_statement__ = 96;
      for (int sym1__ = 1; sym1__ <= ((t - horizon) - seeding_time); ++sym1__) {
        current_statement__ = 96;
        current_statement__ = 96;
        check_greater_or_equal(function__, "cases[sym1__]",
                               cases[(sym1__ - 1)], 0);}
      current_statement__ = 97;
      validate_non_negative_index("shifted_cases", "t", t);
      current_statement__ = 98;
      context__.validate_dims("data initialization","shifted_cases","double",
          context__.to_vec(t));
      shifted_cases = Eigen::Matrix<double, -1, 1>(t);
      stan::math::fill(shifted_cases, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> shifted_cases_flat__;
        current_statement__ = 98;
        assign(shifted_cases_flat__, nil_index_list(),
          context__.vals_r("shifted_cases"),
          "assigning variable shifted_cases_flat__");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 98;
          assign(shifted_cases,
            cons_list(index_uni(sym1__), nil_index_list()),
            shifted_cases_flat__[(pos__ - 1)],
            "assigning variable shifted_cases");
          current_statement__ = 98;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 98;
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        current_statement__ = 98;
        current_statement__ = 98;
        check_greater_or_equal(function__, "shifted_cases[sym1__]",
                               shifted_cases[(sym1__ - 1)], 0);}
      current_statement__ = 99;
      context__.validate_dims("data initialization","delay_n","int",
          context__.to_vec());
      delay_n = std::numeric_limits<int>::min();
      
      current_statement__ = 99;
      delay_n = context__.vals_i("delay_n")[(1 - 1)];
      current_statement__ = 99;
      current_statement__ = 99;
      check_greater_or_equal(function__, "delay_n", delay_n, 0);
      current_statement__ = 100;
      context__.validate_dims("data initialization","delay_n_p","int",
          context__.to_vec());
      delay_n_p = std::numeric_limits<int>::min();
      
      current_statement__ = 100;
      delay_n_p = context__.vals_i("delay_n_p")[(1 - 1)];
      current_statement__ = 100;
      current_statement__ = 100;
      check_greater_or_equal(function__, "delay_n_p", delay_n_p, 0);
      current_statement__ = 101;
      context__.validate_dims("data initialization","delay_n_np","int",
          context__.to_vec());
      delay_n_np = std::numeric_limits<int>::min();
      
      current_statement__ = 101;
      delay_n_np = context__.vals_i("delay_n_np")[(1 - 1)];
      current_statement__ = 101;
      current_statement__ = 101;
      check_greater_or_equal(function__, "delay_n_np", delay_n_np, 0);
      current_statement__ = 102;
      validate_non_negative_index("delay_mean_mean", "delay_n_p", delay_n_p);
      current_statement__ = 103;
      context__.validate_dims("data initialization","delay_mean_mean",
          "double",context__.to_vec(delay_n_p));
      delay_mean_mean = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 103;
      assign(delay_mean_mean, nil_index_list(),
        context__.vals_r("delay_mean_mean"),
        "assigning variable delay_mean_mean");
      current_statement__ = 104;
      validate_non_negative_index("delay_mean_sd", "delay_n_p", delay_n_p);
      current_statement__ = 105;
      context__.validate_dims("data initialization","delay_mean_sd","double",
          context__.to_vec(delay_n_p));
      delay_mean_sd = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 105;
      assign(delay_mean_sd, nil_index_list(),
        context__.vals_r("delay_mean_sd"), "assigning variable delay_mean_sd");
      current_statement__ = 105;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 105;
        current_statement__ = 105;
        check_greater_or_equal(function__, "delay_mean_sd[sym1__]",
                               delay_mean_sd[(sym1__ - 1)], 0);}
      current_statement__ = 106;
      validate_non_negative_index("delay_sd_mean", "delay_n_p", delay_n_p);
      current_statement__ = 107;
      context__.validate_dims("data initialization","delay_sd_mean","double",
          context__.to_vec(delay_n_p));
      delay_sd_mean = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 107;
      assign(delay_sd_mean, nil_index_list(),
        context__.vals_r("delay_sd_mean"), "assigning variable delay_sd_mean");
      current_statement__ = 107;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 107;
        current_statement__ = 107;
        check_greater_or_equal(function__, "delay_sd_mean[sym1__]",
                               delay_sd_mean[(sym1__ - 1)], 0);}
      current_statement__ = 108;
      validate_non_negative_index("delay_sd_sd", "delay_n_p", delay_n_p);
      current_statement__ = 109;
      context__.validate_dims("data initialization","delay_sd_sd","double",
          context__.to_vec(delay_n_p));
      delay_sd_sd = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 109;
      assign(delay_sd_sd, nil_index_list(), context__.vals_r("delay_sd_sd"),
        "assigning variable delay_sd_sd");
      current_statement__ = 109;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 109;
        current_statement__ = 109;
        check_greater_or_equal(function__, "delay_sd_sd[sym1__]",
                               delay_sd_sd[(sym1__ - 1)], 0);}
      current_statement__ = 110;
      validate_non_negative_index("delay_max", "delay_n_p", delay_n_p);
      current_statement__ = 111;
      context__.validate_dims("data initialization","delay_max","int",
          context__.to_vec(delay_n_p));
      delay_max = std::vector<int>(delay_n_p, std::numeric_limits<int>::min());
      
      current_statement__ = 111;
      assign(delay_max, nil_index_list(), context__.vals_i("delay_max"),
        "assigning variable delay_max");
      current_statement__ = 111;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 111;
        current_statement__ = 111;
        check_greater_or_equal(function__, "delay_max[sym1__]",
                               delay_max[(sym1__ - 1)], 1);}
      current_statement__ = 112;
      validate_non_negative_index("delay_dist", "delay_n_p", delay_n_p);
      current_statement__ = 113;
      context__.validate_dims("data initialization","delay_dist","int",
          context__.to_vec(delay_n_p));
      delay_dist = std::vector<int>(delay_n_p, std::numeric_limits<int>::min());
      
      current_statement__ = 113;
      assign(delay_dist, nil_index_list(), context__.vals_i("delay_dist"),
        "assigning variable delay_dist");
      current_statement__ = 113;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 113;
        current_statement__ = 113;
        check_greater_or_equal(function__, "delay_dist[sym1__]",
                               delay_dist[(sym1__ - 1)], 0);}
      current_statement__ = 114;
      context__.validate_dims("data initialization","delay_np_pmf_max","int",
          context__.to_vec());
      delay_np_pmf_max = std::numeric_limits<int>::min();
      
      current_statement__ = 114;
      delay_np_pmf_max = context__.vals_i("delay_np_pmf_max")[(1 - 1)];
      current_statement__ = 114;
      current_statement__ = 114;
      check_greater_or_equal(function__, "delay_np_pmf_max",
                             delay_np_pmf_max, 0);
      current_statement__ = 115;
      validate_non_negative_index("delay_np_pmf", "delay_np_pmf_max",
                                  delay_np_pmf_max);
      current_statement__ = 116;
      context__.validate_dims("data initialization","delay_np_pmf","double",
          context__.to_vec(delay_np_pmf_max));
      delay_np_pmf = Eigen::Matrix<double, -1, 1>(delay_np_pmf_max);
      stan::math::fill(delay_np_pmf, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> delay_np_pmf_flat__;
        current_statement__ = 116;
        assign(delay_np_pmf_flat__, nil_index_list(),
          context__.vals_r("delay_np_pmf"),
          "assigning variable delay_np_pmf_flat__");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= delay_np_pmf_max; ++sym1__) {
          current_statement__ = 116;
          assign(delay_np_pmf,
            cons_list(index_uni(sym1__), nil_index_list()),
            delay_np_pmf_flat__[(pos__ - 1)],
            "assigning variable delay_np_pmf");
          current_statement__ = 116;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 116;
      for (int sym1__ = 1; sym1__ <= delay_np_pmf_max; ++sym1__) {
        current_statement__ = 116;
        current_statement__ = 116;
        check_greater_or_equal(function__, "delay_np_pmf[sym1__]",
                               delay_np_pmf[(sym1__ - 1)], 0);}
      current_statement__ = 116;
      for (int sym1__ = 1; sym1__ <= delay_np_pmf_max; ++sym1__) {
        current_statement__ = 116;
        current_statement__ = 116;
        check_less_or_equal(function__, "delay_np_pmf[sym1__]",
                            delay_np_pmf[(sym1__ - 1)], 1);}
      current_statement__ = 117;
      validate_non_negative_index("delay_np_pmf_groups", "delay_n_np + 1",
                                  (delay_n_np + 1));
      current_statement__ = 118;
      context__.validate_dims("data initialization","delay_np_pmf_groups",
          "int",context__.to_vec((delay_n_np + 1)));
      delay_np_pmf_groups = std::vector<int>((delay_n_np + 1), std::numeric_limits<int>::min());
      
      current_statement__ = 118;
      assign(delay_np_pmf_groups, nil_index_list(),
        context__.vals_i("delay_np_pmf_groups"),
        "assigning variable delay_np_pmf_groups");
      current_statement__ = 118;
      for (int sym1__ = 1; sym1__ <= (delay_n_np + 1); ++sym1__) {
        current_statement__ = 118;
        current_statement__ = 118;
        check_greater_or_equal(function__, "delay_np_pmf_groups[sym1__]",
                               delay_np_pmf_groups[(sym1__ - 1)], 1);}
      current_statement__ = 119;
      validate_non_negative_index("delay_weight", "delay_n_p", delay_n_p);
      current_statement__ = 120;
      context__.validate_dims("data initialization","delay_weight","int",
          context__.to_vec(delay_n_p));
      delay_weight = std::vector<int>(delay_n_p, std::numeric_limits<int>::min());
      
      current_statement__ = 120;
      assign(delay_weight, nil_index_list(),
        context__.vals_i("delay_weight"), "assigning variable delay_weight");
      current_statement__ = 120;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 120;
        current_statement__ = 120;
        check_greater_or_equal(function__, "delay_weight[sym1__]",
                               delay_weight[(sym1__ - 1)], 0);}
      current_statement__ = 121;
      context__.validate_dims("data initialization","delay_types","int",
          context__.to_vec());
      delay_types = std::numeric_limits<int>::min();
      
      current_statement__ = 121;
      delay_types = context__.vals_i("delay_types")[(1 - 1)];
      current_statement__ = 121;
      current_statement__ = 121;
      check_greater_or_equal(function__, "delay_types", delay_types, 0);
      current_statement__ = 122;
      validate_non_negative_index("delay_types_p", "delay_n", delay_n);
      current_statement__ = 123;
      context__.validate_dims("data initialization","delay_types_p","int",
          context__.to_vec(delay_n));
      delay_types_p = std::vector<int>(delay_n, std::numeric_limits<int>::min());
      
      current_statement__ = 123;
      assign(delay_types_p, nil_index_list(),
        context__.vals_i("delay_types_p"), "assigning variable delay_types_p");
      current_statement__ = 123;
      for (int sym1__ = 1; sym1__ <= delay_n; ++sym1__) {
        current_statement__ = 123;
        current_statement__ = 123;
        check_greater_or_equal(function__, "delay_types_p[sym1__]",
                               delay_types_p[(sym1__ - 1)], 0);}
      current_statement__ = 124;
      validate_non_negative_index("delay_types_id", "delay_n", delay_n);
      current_statement__ = 125;
      context__.validate_dims("data initialization","delay_types_id","int",
          context__.to_vec(delay_n));
      delay_types_id = std::vector<int>(delay_n, std::numeric_limits<int>::min());
      
      current_statement__ = 125;
      assign(delay_types_id, nil_index_list(),
        context__.vals_i("delay_types_id"),
        "assigning variable delay_types_id");
      current_statement__ = 125;
      for (int sym1__ = 1; sym1__ <= delay_n; ++sym1__) {
        current_statement__ = 125;
        current_statement__ = 125;
        check_greater_or_equal(function__, "delay_types_id[sym1__]",
                               delay_types_id[(sym1__ - 1)], 0);}
      current_statement__ = 126;
      validate_non_negative_index("delay_types_groups", "delay_types + 1",
                                  (delay_types + 1));
      current_statement__ = 127;
      context__.validate_dims("data initialization","delay_types_groups",
          "int",context__.to_vec((delay_types + 1)));
      delay_types_groups = std::vector<int>((delay_types + 1), std::numeric_limits<int>::min());
      
      current_statement__ = 127;
      assign(delay_types_groups, nil_index_list(),
        context__.vals_i("delay_types_groups"),
        "assigning variable delay_types_groups");
      current_statement__ = 127;
      for (int sym1__ = 1; sym1__ <= (delay_types + 1); ++sym1__) {
        current_statement__ = 127;
        current_statement__ = 127;
        check_greater_or_equal(function__, "delay_types_groups[sym1__]",
                               delay_types_groups[(sym1__ - 1)], 0);}
      current_statement__ = 128;
      context__.validate_dims("data initialization","L","double",
          context__.to_vec());
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 128;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 129;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 129;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 129;
      current_statement__ = 129;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 130;
      context__.validate_dims("data initialization","ls_meanlog","double",
          context__.to_vec());
      ls_meanlog = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 130;
      ls_meanlog = context__.vals_r("ls_meanlog")[(1 - 1)];
      current_statement__ = 131;
      context__.validate_dims("data initialization","ls_sdlog","double",
          context__.to_vec());
      ls_sdlog = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 131;
      ls_sdlog = context__.vals_r("ls_sdlog")[(1 - 1)];
      current_statement__ = 132;
      context__.validate_dims("data initialization","ls_min","double",
          context__.to_vec());
      ls_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 132;
      ls_min = context__.vals_r("ls_min")[(1 - 1)];
      current_statement__ = 132;
      current_statement__ = 132;
      check_greater_or_equal(function__, "ls_min", ls_min, 0);
      current_statement__ = 133;
      context__.validate_dims("data initialization","ls_max","double",
          context__.to_vec());
      ls_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 133;
      ls_max = context__.vals_r("ls_max")[(1 - 1)];
      current_statement__ = 133;
      current_statement__ = 133;
      check_greater_or_equal(function__, "ls_max", ls_max, 0);
      current_statement__ = 134;
      context__.validate_dims("data initialization","alpha_sd","double",
          context__.to_vec());
      alpha_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 134;
      alpha_sd = context__.vals_r("alpha_sd")[(1 - 1)];
      current_statement__ = 135;
      context__.validate_dims("data initialization","gp_type","int",
          context__.to_vec());
      gp_type = std::numeric_limits<int>::min();
      
      current_statement__ = 135;
      gp_type = context__.vals_i("gp_type")[(1 - 1)];
      current_statement__ = 136;
      context__.validate_dims("data initialization","stationary","int",
          context__.to_vec());
      stationary = std::numeric_limits<int>::min();
      
      current_statement__ = 136;
      stationary = context__.vals_i("stationary")[(1 - 1)];
      current_statement__ = 137;
      context__.validate_dims("data initialization","fixed","int",
          context__.to_vec());
      fixed = std::numeric_limits<int>::min();
      
      current_statement__ = 137;
      fixed = context__.vals_i("fixed")[(1 - 1)];
      current_statement__ = 138;
      context__.validate_dims("data initialization","estimate_r","int",
          context__.to_vec());
      estimate_r = std::numeric_limits<int>::min();
      
      current_statement__ = 138;
      estimate_r = context__.vals_i("estimate_r")[(1 - 1)];
      current_statement__ = 139;
      context__.validate_dims("data initialization","prior_infections",
          "double",context__.to_vec());
      prior_infections = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 139;
      prior_infections = context__.vals_r("prior_infections")[(1 - 1)];
      current_statement__ = 140;
      context__.validate_dims("data initialization","prior_growth","double",
          context__.to_vec());
      prior_growth = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 140;
      prior_growth = context__.vals_r("prior_growth")[(1 - 1)];
      current_statement__ = 141;
      context__.validate_dims("data initialization","r_mean","double",
          context__.to_vec());
      r_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 141;
      r_mean = context__.vals_r("r_mean")[(1 - 1)];
      current_statement__ = 141;
      current_statement__ = 141;
      check_greater_or_equal(function__, "r_mean", r_mean, 0);
      current_statement__ = 142;
      context__.validate_dims("data initialization","r_sd","double",
          context__.to_vec());
      r_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 142;
      r_sd = context__.vals_r("r_sd")[(1 - 1)];
      current_statement__ = 142;
      current_statement__ = 142;
      check_greater_or_equal(function__, "r_sd", r_sd, 0);
      current_statement__ = 143;
      context__.validate_dims("data initialization","bp_n","int",
          context__.to_vec());
      bp_n = std::numeric_limits<int>::min();
      
      current_statement__ = 143;
      bp_n = context__.vals_i("bp_n")[(1 - 1)];
      current_statement__ = 144;
      validate_non_negative_index("breakpoints", "t - seeding_time",
                                  (t - seeding_time));
      current_statement__ = 145;
      context__.validate_dims("data initialization","breakpoints","int",
          context__.to_vec((t - seeding_time)));
      breakpoints = std::vector<int>((t - seeding_time), std::numeric_limits<int>::min());
      
      current_statement__ = 145;
      assign(breakpoints, nil_index_list(), context__.vals_i("breakpoints"),
        "assigning variable breakpoints");
      current_statement__ = 146;
      context__.validate_dims("data initialization","future_fixed","int",
          context__.to_vec());
      future_fixed = std::numeric_limits<int>::min();
      
      current_statement__ = 146;
      future_fixed = context__.vals_i("future_fixed")[(1 - 1)];
      current_statement__ = 147;
      context__.validate_dims("data initialization","fixed_from","int",
          context__.to_vec());
      fixed_from = std::numeric_limits<int>::min();
      
      current_statement__ = 147;
      fixed_from = context__.vals_i("fixed_from")[(1 - 1)];
      current_statement__ = 148;
      context__.validate_dims("data initialization","pop","int",
          context__.to_vec());
      pop = std::numeric_limits<int>::min();
      
      current_statement__ = 148;
      pop = context__.vals_i("pop")[(1 - 1)];
      current_statement__ = 149;
      context__.validate_dims("data initialization","gt_id","int",
          context__.to_vec());
      gt_id = std::numeric_limits<int>::min();
      
      current_statement__ = 149;
      gt_id = context__.vals_i("gt_id")[(1 - 1)];
      current_statement__ = 149;
      current_statement__ = 149;
      check_greater_or_equal(function__, "gt_id", gt_id, 0);
      current_statement__ = 150;
      context__.validate_dims("data initialization","backcalc_prior","int",
          context__.to_vec());
      backcalc_prior = std::numeric_limits<int>::min();
      
      current_statement__ = 150;
      backcalc_prior = context__.vals_i("backcalc_prior")[(1 - 1)];
      current_statement__ = 151;
      context__.validate_dims("data initialization","rt_half_window","int",
          context__.to_vec());
      rt_half_window = std::numeric_limits<int>::min();
      
      current_statement__ = 151;
      rt_half_window = context__.vals_i("rt_half_window")[(1 - 1)];
      current_statement__ = 152;
      validate_non_negative_index("day_of_week", "t - seeding_time",
                                  (t - seeding_time));
      current_statement__ = 153;
      context__.validate_dims("data initialization","day_of_week","int",
          context__.to_vec((t - seeding_time)));
      day_of_week = std::vector<int>((t - seeding_time), std::numeric_limits<int>::min());
      
      current_statement__ = 153;
      assign(day_of_week, nil_index_list(), context__.vals_i("day_of_week"),
        "assigning variable day_of_week");
      current_statement__ = 154;
      context__.validate_dims("data initialization","model_type","int",
          context__.to_vec());
      model_type = std::numeric_limits<int>::min();
      
      current_statement__ = 154;
      model_type = context__.vals_i("model_type")[(1 - 1)];
      current_statement__ = 155;
      context__.validate_dims("data initialization","phi_mean","double",
          context__.to_vec());
      phi_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 155;
      phi_mean = context__.vals_r("phi_mean")[(1 - 1)];
      current_statement__ = 156;
      context__.validate_dims("data initialization","phi_sd","double",
          context__.to_vec());
      phi_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 156;
      phi_sd = context__.vals_r("phi_sd")[(1 - 1)];
      current_statement__ = 157;
      context__.validate_dims("data initialization","week_effect","int",
          context__.to_vec());
      week_effect = std::numeric_limits<int>::min();
      
      current_statement__ = 157;
      week_effect = context__.vals_i("week_effect")[(1 - 1)];
      current_statement__ = 158;
      context__.validate_dims("data initialization","obs_scale","int",
          context__.to_vec());
      obs_scale = std::numeric_limits<int>::min();
      
      current_statement__ = 158;
      obs_scale = context__.vals_i("obs_scale")[(1 - 1)];
      current_statement__ = 159;
      context__.validate_dims("data initialization","obs_scale_mean",
          "double",context__.to_vec());
      obs_scale_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 159;
      obs_scale_mean = context__.vals_r("obs_scale_mean")[(1 - 1)];
      current_statement__ = 160;
      context__.validate_dims("data initialization","obs_scale_sd","double",
          context__.to_vec());
      obs_scale_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 160;
      obs_scale_sd = context__.vals_r("obs_scale_sd")[(1 - 1)];
      current_statement__ = 161;
      context__.validate_dims("data initialization","obs_weight","double",
          context__.to_vec());
      obs_weight = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 161;
      obs_weight = context__.vals_r("obs_weight")[(1 - 1)];
      current_statement__ = 162;
      context__.validate_dims("data initialization","likelihood","int",
          context__.to_vec());
      likelihood = std::numeric_limits<int>::min();
      
      current_statement__ = 162;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 163;
      context__.validate_dims("data initialization","return_likelihood",
          "int",context__.to_vec());
      return_likelihood = std::numeric_limits<int>::min();
      
      current_statement__ = 163;
      return_likelihood = context__.vals_i("return_likelihood")[(1 - 1)];
      current_statement__ = 164;
      context__.validate_dims("data initialization","trunc_id","int",
          context__.to_vec());
      trunc_id = std::numeric_limits<int>::min();
      
      current_statement__ = 164;
      trunc_id = context__.vals_i("trunc_id")[(1 - 1)];
      current_statement__ = 164;
      current_statement__ = 164;
      check_greater_or_equal(function__, "trunc_id", trunc_id, 0);
      current_statement__ = 165;
      context__.validate_dims("data initialization","delay_id","int",
          context__.to_vec());
      delay_id = std::numeric_limits<int>::min();
      
      current_statement__ = 165;
      delay_id = context__.vals_i("delay_id")[(1 - 1)];
      current_statement__ = 165;
      current_statement__ = 165;
      check_greater_or_equal(function__, "delay_id", delay_id, 0);
      current_statement__ = 166;
      ot = std::numeric_limits<int>::min();
      
      current_statement__ = 166;
      ot = ((t - seeding_time) - horizon);
      current_statement__ = 167;
      ot_h = std::numeric_limits<int>::min();
      
      current_statement__ = 167;
      ot_h = (ot + horizon);
      current_statement__ = 168;
      noise_terms = std::numeric_limits<int>::min();
      
      current_statement__ = 168;
      noise_terms = setup_noise(ot_h, t, horizon, estimate_r, stationary,
                      future_fixed, fixed_from, pstream__);
      current_statement__ = 169;
      validate_non_negative_index("PHI", "noise_terms", noise_terms);
      current_statement__ = 170;
      validate_non_negative_index("PHI", "M", M);
      current_statement__ = 171;
      PHI = Eigen::Matrix<double, -1, -1>(noise_terms, M);
      stan::math::fill(PHI, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 171;
      assign(PHI, nil_index_list(), setup_gp(M, L, noise_terms, pstream__),
        "assigning variable PHI");
      current_statement__ = 172;
      r_logmean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 172;
      r_logmean = stan::math::log(
                    (pow(r_mean, 2) /
                      stan::math::sqrt((pow(r_sd, 2) + pow(r_mean, 2)))));
      current_statement__ = 173;
      r_logsd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 173;
      r_logsd = stan::math::sqrt(
                  stan::math::log((1 + (pow(r_sd, 2) / pow(r_mean, 2)))));
      current_statement__ = 174;
      validate_non_negative_index("delay_type_max", "delay_types",
                                  delay_types);
      current_statement__ = 175;
      delay_type_max = std::vector<int>(delay_types, std::numeric_limits<int>::min());
      
      current_statement__ = 175;
      assign(delay_type_max, nil_index_list(),
        get_delay_type_max(delay_types, delay_types_p, delay_types_id,
          delay_types_groups, delay_max, delay_np_pmf_groups, pstream__),
        "assigning variable delay_type_max");
      current_statement__ = 176;
      rho_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 176;
      rho_1dim__ = (fixed ? 0 : 1);
      current_statement__ = 176;
      validate_non_negative_index("rho", "fixed ? 0 : 1", rho_1dim__);
      current_statement__ = 177;
      alpha_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 177;
      alpha_1dim__ = (fixed ? 0 : 1);
      current_statement__ = 177;
      validate_non_negative_index("alpha", "fixed ? 0 : 1", alpha_1dim__);
      current_statement__ = 178;
      eta_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 178;
      eta_1dim__ = (fixed ? 0 : M);
      current_statement__ = 178;
      validate_non_negative_index("eta", "fixed ? 0 : M", eta_1dim__);
      current_statement__ = 179;
      validate_non_negative_index("log_R", "estimate_r", estimate_r);
      current_statement__ = 180;
      validate_non_negative_index("initial_infections", "estimate_r",
                                  estimate_r);
      current_statement__ = 181;
      initial_growth_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 181;
      initial_growth_1dim__ = ((primitive_value(estimate_r) &&
                                 primitive_value(
                                 logical_gt(seeding_time, 1))) ? 1 : 0);
      current_statement__ = 181;
      validate_non_negative_index("initial_growth",
                                  "estimate_r && seeding_time > 1 ? 1 : 0",
                                  initial_growth_1dim__);
      current_statement__ = 182;
      bp_sd_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 182;
      bp_sd_1dim__ = (logical_gt(bp_n, 0) ? 1 : 0);
      current_statement__ = 182;
      validate_non_negative_index("bp_sd", "bp_n > 0 ? 1 : 0", bp_sd_1dim__);
      current_statement__ = 183;
      validate_non_negative_index("bp_effects", "bp_n", bp_n);
      current_statement__ = 184;
      validate_non_negative_index("delay_mean", "delay_n_p", delay_n_p);
      current_statement__ = 185;
      validate_non_negative_index("delay_sd", "delay_n_p", delay_n_p);
      current_statement__ = 186;
      validate_positive_index("day_of_week_simplex", "week_effect",
                              week_effect);
      current_statement__ = 187;
      validate_non_negative_index("frac_obs", "obs_scale", obs_scale);
      current_statement__ = 188;
      validate_non_negative_index("rep_phi", "model_type", model_type);
      current_statement__ = 189;
      noise_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 189;
      noise_1dim__ = (fixed ? 0 : noise_terms);
      current_statement__ = 189;
      validate_non_negative_index("noise", "fixed ? 0 : noise_terms",
                                  noise_1dim__);
      current_statement__ = 190;
      R_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 190;
      R_1dim__ = (logical_gt(estimate_r, 0) ? ot_h : 0);
      current_statement__ = 190;
      validate_non_negative_index("R", "estimate_r > 0 ? ot_h : 0", R_1dim__);
      current_statement__ = 191;
      validate_non_negative_index("infections", "t", t);
      current_statement__ = 192;
      validate_non_negative_index("reports", "ot_h", ot_h);
      current_statement__ = 193;
      validate_non_negative_index("obs_reports", "ot", ot);
      current_statement__ = 194;
      gt_rev_pmf_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 194;
      gt_rev_pmf_1dim__ = delay_type_max[(gt_id - 1)];
      current_statement__ = 194;
      validate_non_negative_index("gt_rev_pmf", "delay_type_max[gt_id]",
                                  gt_rev_pmf_1dim__);
      current_statement__ = 195;
      validate_non_negative_index("imputed_reports", "ot_h", ot_h);
      current_statement__ = 196;
      gen_R_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 196;
      gen_R_1dim__ = (logical_gt(estimate_r, 0) ? 0 : ot_h);
      current_statement__ = 196;
      validate_non_negative_index("gen_R", "estimate_r > 0 ? 0 : ot_h",
                                  gen_R_1dim__);
      current_statement__ = 197;
      validate_non_negative_index("r", "ot_h", ot_h);
      current_statement__ = 198;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 198;
      log_lik_1dim__ = (return_likelihood ? ot : 0);
      current_statement__ = 198;
      validate_non_negative_index("log_lik", "return_likelihood ? ot : 0",
                                  log_lik_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += rho_1dim__;
      num_params_r__ += alpha_1dim__;
      num_params_r__ += eta_1dim__;
      num_params_r__ += estimate_r;
      num_params_r__ += estimate_r;
      num_params_r__ += initial_growth_1dim__;
      num_params_r__ += bp_sd_1dim__;
      num_params_r__ += bp_n;
      num_params_r__ += delay_n_p;
      num_params_r__ += delay_n_p;
      num_params_r__ += (week_effect - 1);
      num_params_r__ += obs_scale;
      num_params_r__ += model_type;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_estimate_infections_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> rho;
      rho = std::vector<local_scalar_t__>(rho_1dim__, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable rho");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(rho[(sym1__ - 1)], ls_min, ls_max, lp__),
            "assigning variable rho");
        } else {
          current_statement__ = 1;
          assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(rho[(sym1__ - 1)], ls_min, ls_max),
            "assigning variable rho");
        }}
      std::vector<local_scalar_t__> alpha;
      alpha = std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 2;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> eta;
      eta = Eigen::Matrix<local_scalar_t__, -1, 1>(eta_1dim__);
      stan::math::fill(eta, DUMMY_VAR__);
      
      current_statement__ = 3;
      eta = in__.vector(eta_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_R;
      log_R = Eigen::Matrix<local_scalar_t__, -1, 1>(estimate_r);
      stan::math::fill(log_R, DUMMY_VAR__);
      
      current_statement__ = 4;
      log_R = in__.vector(estimate_r);
      std::vector<local_scalar_t__> initial_infections;
      initial_infections = std::vector<local_scalar_t__>(estimate_r, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
        current_statement__ = 5;
        assign(initial_infections,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable initial_infections");}
      std::vector<local_scalar_t__> initial_growth;
      initial_growth = std::vector<local_scalar_t__>(initial_growth_1dim__, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= initial_growth_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(initial_growth,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable initial_growth");}
      std::vector<local_scalar_t__> bp_sd;
      bp_sd = std::vector<local_scalar_t__>(bp_sd_1dim__, DUMMY_VAR__);
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(bp_sd, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable bp_sd");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(bp_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(bp_sd[(sym1__ - 1)], 0, lp__),
            "assigning variable bp_sd");
        } else {
          current_statement__ = 7;
          assign(bp_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(bp_sd[(sym1__ - 1)], 0),
            "assigning variable bp_sd");
        }}
      std::vector<local_scalar_t__> bp_effects;
      bp_effects = std::vector<local_scalar_t__>(bp_n, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= bp_n; ++sym1__) {
        current_statement__ = 8;
        assign(bp_effects, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable bp_effects");}
      std::vector<local_scalar_t__> delay_mean;
      delay_mean = std::vector<local_scalar_t__>(delay_n_p, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 9;
        assign(delay_mean, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable delay_mean");}
      std::vector<local_scalar_t__> delay_sd;
      delay_sd = std::vector<local_scalar_t__>(delay_n_p, DUMMY_VAR__);
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 10;
        assign(delay_sd, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable delay_sd");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(delay_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(delay_sd[(sym1__ - 1)], 0, lp__),
            "assigning variable delay_sd");
        } else {
          current_statement__ = 10;
          assign(delay_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(delay_sd[(sym1__ - 1)], 0),
            "assigning variable delay_sd");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> day_of_week_simplex;
      day_of_week_simplex = Eigen::Matrix<local_scalar_t__, -1, 1>(week_effect);
      stan::math::fill(day_of_week_simplex, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> day_of_week_simplex_in__;
      day_of_week_simplex_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(
        (week_effect - 1));
      stan::math::fill(day_of_week_simplex_in__, DUMMY_VAR__);
      
      current_statement__ = 11;
      day_of_week_simplex_in__ = in__.vector((week_effect - 1));
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        assign(day_of_week_simplex, nil_index_list(),
          stan::math::simplex_constrain(day_of_week_simplex_in__, lp__),
          "assigning variable day_of_week_simplex");
      } else {
        current_statement__ = 11;
        assign(day_of_week_simplex, nil_index_list(),
          stan::math::simplex_constrain(day_of_week_simplex_in__),
          "assigning variable day_of_week_simplex");
      }
      std::vector<local_scalar_t__> frac_obs;
      frac_obs = std::vector<local_scalar_t__>(obs_scale, DUMMY_VAR__);
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
        current_statement__ = 12;
        assign(frac_obs, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable frac_obs");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
        current_statement__ = 12;
        if (jacobian__) {
          current_statement__ = 12;
          assign(frac_obs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(frac_obs[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable frac_obs");
        } else {
          current_statement__ = 12;
          assign(frac_obs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(frac_obs[(sym1__ - 1)], 0, 1),
            "assigning variable frac_obs");
        }}
      std::vector<local_scalar_t__> rep_phi;
      rep_phi = std::vector<local_scalar_t__>(model_type, DUMMY_VAR__);
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
        current_statement__ = 13;
        assign(rep_phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable rep_phi");}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
        current_statement__ = 13;
        if (jacobian__) {
          current_statement__ = 13;
          assign(rep_phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rep_phi[(sym1__ - 1)], 0, lp__),
            "assigning variable rep_phi");
        } else {
          current_statement__ = 13;
          assign(rep_phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rep_phi[(sym1__ - 1)], 0),
            "assigning variable rep_phi");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> noise;
      noise = Eigen::Matrix<local_scalar_t__, -1, 1>(noise_1dim__);
      stan::math::fill(noise, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> R;
      R = Eigen::Matrix<local_scalar_t__, -1, 1>(R_1dim__);
      stan::math::fill(R, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> infections;
      infections = Eigen::Matrix<local_scalar_t__, -1, 1>(t);
      stan::math::fill(infections, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> reports;
      reports = Eigen::Matrix<local_scalar_t__, -1, 1>(ot_h);
      stan::math::fill(reports, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> obs_reports;
      obs_reports = Eigen::Matrix<local_scalar_t__, -1, 1>(ot);
      stan::math::fill(obs_reports, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> gt_rev_pmf;
      gt_rev_pmf = Eigen::Matrix<local_scalar_t__, -1, 1>(gt_rev_pmf_1dim__);
      stan::math::fill(gt_rev_pmf, DUMMY_VAR__);
      
      current_statement__ = 22;
      if (logical_negation(fixed)) {
        current_statement__ = 20;
        assign(noise, nil_index_list(),
          update_gp(PHI, M, L, alpha[(1 - 1)], rho[(1 - 1)], eta,
            gp_type, pstream__), "assigning variable noise");
      } 
      current_statement__ = 29;
      if (estimate_r) {
        current_statement__ = 25;
        assign(gt_rev_pmf, nil_index_list(),
          get_delay_rev_pmf(gt_id, delay_type_max[(gt_id - 1)],
            delay_types_p, delay_types_id, delay_types_groups, delay_max,
            delay_np_pmf, delay_np_pmf_groups, delay_mean, delay_sd,
            delay_dist, 1, 1, 0, pstream__), "assigning variable gt_rev_pmf");
        current_statement__ = 26;
        assign(R, nil_index_list(),
          update_Rt(ot_h, log_R[(estimate_r - 1)], noise, breakpoints,
            bp_effects, stationary, pstream__), "assigning variable R");
        current_statement__ = 27;
        assign(infections, nil_index_list(),
          generate_infections(R, seeding_time, gt_rev_pmf,
            initial_infections, initial_growth, pop, future_time, pstream__),
          "assigning variable infections");
      } else {
        current_statement__ = 23;
        assign(infections, nil_index_list(),
          deconvolve_infections(shifted_cases, noise, fixed,
            backcalc_prior, pstream__), "assigning variable infections");
      }
      current_statement__ = 36;
      if (delay_id) {
        current_statement__ = 32;
        validate_non_negative_index("delay_rev_pmf",
                                    "delay_type_max[delay_id]",
                                    delay_type_max[(delay_id - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, 1> delay_rev_pmf;
        delay_rev_pmf = Eigen::Matrix<local_scalar_t__, -1, 1>(delay_type_max[
          (delay_id - 1)]);
        stan::math::fill(delay_rev_pmf, DUMMY_VAR__);
        
        current_statement__ = 33;
        assign(delay_rev_pmf, nil_index_list(),
          get_delay_rev_pmf(delay_id, delay_type_max[(delay_id - 1)],
            delay_types_p, delay_types_id, delay_types_groups, delay_max,
            delay_np_pmf, delay_np_pmf_groups, delay_mean, delay_sd,
            delay_dist, 0, 1, 0, pstream__),
          "assigning variable delay_rev_pmf");
        current_statement__ = 34;
        assign(reports, nil_index_list(),
          convolve_to_report(infections, delay_rev_pmf,
            seeding_time, pstream__), "assigning variable reports");
      } else {
        current_statement__ = 30;
        assign(reports, nil_index_list(),
          rvalue(infections,
            cons_list(index_min_max((seeding_time + 1), t), nil_index_list()),
            "infections"), "assigning variable reports");
      }
      current_statement__ = 39;
      if (logical_gt(week_effect, 1)) {
        current_statement__ = 37;
        assign(reports, nil_index_list(),
          day_of_week_effect(stan::model::deep_copy(reports), day_of_week,
            day_of_week_simplex, pstream__), "assigning variable reports");
      } 
      current_statement__ = 42;
      if (obs_scale) {
        current_statement__ = 40;
        assign(reports, nil_index_list(),
          scale_obs(stan::model::deep_copy(reports),
            frac_obs[(1 - 1)], pstream__), "assigning variable reports");
      } 
      current_statement__ = 49;
      if (trunc_id) {
        current_statement__ = 45;
        validate_non_negative_index("trunc_rev_cmf",
                                    "delay_type_max[trunc_id]",
                                    delay_type_max[(trunc_id - 1)]);
        Eigen::Matrix<local_scalar_t__, -1, 1> trunc_rev_cmf;
        trunc_rev_cmf = Eigen::Matrix<local_scalar_t__, -1, 1>(delay_type_max[
          (trunc_id - 1)]);
        stan::math::fill(trunc_rev_cmf, DUMMY_VAR__);
        
        current_statement__ = 46;
        assign(trunc_rev_cmf, nil_index_list(),
          get_delay_rev_pmf(trunc_id, delay_type_max[(trunc_id - 1)],
            delay_types_p, delay_types_id, delay_types_groups, delay_max,
            delay_np_pmf, delay_np_pmf_groups, delay_mean, delay_sd,
            delay_dist, 0, 1, 1, pstream__),
          "assigning variable trunc_rev_cmf");
        current_statement__ = 47;
        assign(obs_reports, nil_index_list(),
          truncate(
            rvalue(reports,
              cons_list(index_min_max(1, ot), nil_index_list()), "reports"),
            trunc_rev_cmf, 0, pstream__), "assigning variable obs_reports");
      } else {
        current_statement__ = 43;
        assign(obs_reports, nil_index_list(),
          rvalue(reports, cons_list(index_min_max(1, ot), nil_index_list()),
            "reports"), "assigning variable obs_reports");
      }
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
        current_statement__ = 15;
        current_statement__ = 15;
        check_greater_or_equal(function__, "R[sym1__]", R[(sym1__ - 1)], 0);}
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
        current_statement__ = 15;
        current_statement__ = 15;
        check_less_or_equal(function__, "R[sym1__]", R[(sym1__ - 1)],
                            (10 * r_mean));}
      {
        current_statement__ = 78;
        if (logical_negation(fixed)) {
          current_statement__ = 76;
          gaussian_process_lp<false>(rho[(1 - 1)], alpha[(1 - 1)], eta,
            ls_meanlog, ls_sdlog, ls_min, ls_max,
            alpha_sd, lp__, lp_accum__, pstream__);
        } 
        current_statement__ = 79;
        delays_lp<false>(delay_mean, delay_mean_mean, delay_mean_sd,
          delay_sd, delay_sd_mean, delay_sd_sd, delay_dist,
          delay_weight, lp__, lp_accum__, pstream__);
        current_statement__ = 82;
        if (estimate_r) {
          current_statement__ = 80;
          rt_lp<false>(log_R, initial_infections, initial_growth, bp_effects,
            bp_sd, bp_n, seeding_time, r_logmean, r_logsd, prior_infections,
            prior_growth, lp__, lp_accum__, pstream__);
        } 
        current_statement__ = 87;
        if (obs_scale) {
          current_statement__ = 84;
          if (logical_lt(frac_obs[(1 - 1)], 0)) {
            current_statement__ = 84;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 83;
            if (logical_gt(frac_obs[(1 - 1)], 1)) {
              current_statement__ = 83;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 83;
              lp_accum__.add(
                -log_diff_exp(
                   normal_cdf_log(1, obs_scale_mean, obs_scale_sd),
                   normal_cdf_log(0, obs_scale_mean, obs_scale_sd)));
            }
          }
          current_statement__ = 85;
          lp_accum__.add(
            normal_lpdf<propto__>(frac_obs[(1 - 1)], obs_scale_mean,
              obs_scale_sd));
        } 
        current_statement__ = 90;
        if (likelihood) {
          current_statement__ = 88;
          report_lp<false>(cases, obs_reports, rep_phi, phi_mean, phi_sd,
            model_type, obs_weight, lp__, lp_accum__, pstream__);
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_estimate_infections_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> rho;
      rho = std::vector<double>(rho_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable rho");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(rho, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(rho[(sym1__ - 1)], ls_min, ls_max),
          "assigning variable rho");}
      std::vector<double> alpha;
      alpha = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(eta_1dim__);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      eta = in__.vector(eta_1dim__);
      Eigen::Matrix<double, -1, 1> log_R;
      log_R = Eigen::Matrix<double, -1, 1>(estimate_r);
      stan::math::fill(log_R, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      log_R = in__.vector(estimate_r);
      std::vector<double> initial_infections;
      initial_infections = std::vector<double>(estimate_r, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
        current_statement__ = 5;
        assign(initial_infections,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable initial_infections");}
      std::vector<double> initial_growth;
      initial_growth = std::vector<double>(initial_growth_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= initial_growth_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(initial_growth,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable initial_growth");}
      std::vector<double> bp_sd;
      bp_sd = std::vector<double>(bp_sd_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(bp_sd, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable bp_sd");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(bp_sd, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(bp_sd[(sym1__ - 1)], 0),
          "assigning variable bp_sd");}
      std::vector<double> bp_effects;
      bp_effects = std::vector<double>(bp_n, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= bp_n; ++sym1__) {
        current_statement__ = 8;
        assign(bp_effects, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable bp_effects");}
      std::vector<double> delay_mean;
      delay_mean = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 9;
        assign(delay_mean, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable delay_mean");}
      std::vector<double> delay_sd;
      delay_sd = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 10;
        assign(delay_sd, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable delay_sd");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 10;
        assign(delay_sd, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(delay_sd[(sym1__ - 1)], 0),
          "assigning variable delay_sd");}
      Eigen::Matrix<double, -1, 1> day_of_week_simplex;
      day_of_week_simplex = Eigen::Matrix<double, -1, 1>(week_effect);
      stan::math::fill(day_of_week_simplex, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> day_of_week_simplex_in__;
      day_of_week_simplex_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(
        (week_effect - 1));
      stan::math::fill(day_of_week_simplex_in__, DUMMY_VAR__);
      
      current_statement__ = 11;
      day_of_week_simplex_in__ = in__.vector((week_effect - 1));
      current_statement__ = 11;
      assign(day_of_week_simplex, nil_index_list(),
        stan::math::simplex_constrain(day_of_week_simplex_in__),
        "assigning variable day_of_week_simplex");
      std::vector<double> frac_obs;
      frac_obs = std::vector<double>(obs_scale, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
        current_statement__ = 12;
        assign(frac_obs, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable frac_obs");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
        current_statement__ = 12;
        assign(frac_obs, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(frac_obs[(sym1__ - 1)], 0, 1),
          "assigning variable frac_obs");}
      std::vector<double> rep_phi;
      rep_phi = std::vector<double>(model_type, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
        current_statement__ = 13;
        assign(rep_phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable rep_phi");}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
        current_statement__ = 13;
        assign(rep_phi, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(rep_phi[(sym1__ - 1)], 0),
          "assigning variable rep_phi");}
      Eigen::Matrix<double, -1, 1> noise;
      noise = Eigen::Matrix<double, -1, 1>(noise_1dim__);
      stan::math::fill(noise, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> R;
      R = Eigen::Matrix<double, -1, 1>(R_1dim__);
      stan::math::fill(R, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> infections;
      infections = Eigen::Matrix<double, -1, 1>(t);
      stan::math::fill(infections, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> reports;
      reports = Eigen::Matrix<double, -1, 1>(ot_h);
      stan::math::fill(reports, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> obs_reports;
      obs_reports = Eigen::Matrix<double, -1, 1>(ot);
      stan::math::fill(obs_reports, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> gt_rev_pmf;
      gt_rev_pmf = Eigen::Matrix<double, -1, 1>(gt_rev_pmf_1dim__);
      stan::math::fill(gt_rev_pmf, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
        vars__.emplace_back(rho[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
        vars__.emplace_back(log_R[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
        vars__.emplace_back(initial_infections[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= initial_growth_1dim__; ++sym1__) {
        vars__.emplace_back(initial_growth[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
        vars__.emplace_back(bp_sd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= bp_n; ++sym1__) {
        vars__.emplace_back(bp_effects[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        vars__.emplace_back(delay_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        vars__.emplace_back(delay_sd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
        vars__.emplace_back(day_of_week_simplex[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
        vars__.emplace_back(frac_obs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
        vars__.emplace_back(rep_phi[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 22;
      if (logical_negation(fixed)) {
        current_statement__ = 20;
        assign(noise, nil_index_list(),
          update_gp(PHI, M, L, alpha[(1 - 1)], rho[(1 - 1)], eta,
            gp_type, pstream__), "assigning variable noise");
      } 
      current_statement__ = 29;
      if (estimate_r) {
        current_statement__ = 25;
        assign(gt_rev_pmf, nil_index_list(),
          get_delay_rev_pmf(gt_id, delay_type_max[(gt_id - 1)],
            delay_types_p, delay_types_id, delay_types_groups, delay_max,
            delay_np_pmf, delay_np_pmf_groups, delay_mean, delay_sd,
            delay_dist, 1, 1, 0, pstream__), "assigning variable gt_rev_pmf");
        current_statement__ = 26;
        assign(R, nil_index_list(),
          update_Rt(ot_h, log_R[(estimate_r - 1)], noise, breakpoints,
            bp_effects, stationary, pstream__), "assigning variable R");
        current_statement__ = 27;
        assign(infections, nil_index_list(),
          generate_infections(R, seeding_time, gt_rev_pmf,
            initial_infections, initial_growth, pop, future_time, pstream__),
          "assigning variable infections");
      } else {
        current_statement__ = 23;
        assign(infections, nil_index_list(),
          deconvolve_infections(shifted_cases, noise, fixed,
            backcalc_prior, pstream__), "assigning variable infections");
      }
      current_statement__ = 36;
      if (delay_id) {
        current_statement__ = 32;
        validate_non_negative_index("delay_rev_pmf",
                                    "delay_type_max[delay_id]",
                                    delay_type_max[(delay_id - 1)]);
        Eigen::Matrix<double, -1, 1> delay_rev_pmf;
        delay_rev_pmf = Eigen::Matrix<double, -1, 1>(delay_type_max[(delay_id
                                                                    - 1)]);
        stan::math::fill(delay_rev_pmf, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 33;
        assign(delay_rev_pmf, nil_index_list(),
          get_delay_rev_pmf(delay_id, delay_type_max[(delay_id - 1)],
            delay_types_p, delay_types_id, delay_types_groups, delay_max,
            delay_np_pmf, delay_np_pmf_groups, delay_mean, delay_sd,
            delay_dist, 0, 1, 0, pstream__),
          "assigning variable delay_rev_pmf");
        current_statement__ = 34;
        assign(reports, nil_index_list(),
          convolve_to_report(infections, delay_rev_pmf,
            seeding_time, pstream__), "assigning variable reports");
      } else {
        current_statement__ = 30;
        assign(reports, nil_index_list(),
          rvalue(infections,
            cons_list(index_min_max((seeding_time + 1), t), nil_index_list()),
            "infections"), "assigning variable reports");
      }
      current_statement__ = 39;
      if (logical_gt(week_effect, 1)) {
        current_statement__ = 37;
        assign(reports, nil_index_list(),
          day_of_week_effect(stan::model::deep_copy(reports), day_of_week,
            day_of_week_simplex, pstream__), "assigning variable reports");
      } 
      current_statement__ = 42;
      if (obs_scale) {
        current_statement__ = 40;
        assign(reports, nil_index_list(),
          scale_obs(stan::model::deep_copy(reports),
            frac_obs[(1 - 1)], pstream__), "assigning variable reports");
      } 
      current_statement__ = 49;
      if (trunc_id) {
        current_statement__ = 45;
        validate_non_negative_index("trunc_rev_cmf",
                                    "delay_type_max[trunc_id]",
                                    delay_type_max[(trunc_id - 1)]);
        Eigen::Matrix<double, -1, 1> trunc_rev_cmf;
        trunc_rev_cmf = Eigen::Matrix<double, -1, 1>(delay_type_max[(trunc_id
                                                                    - 1)]);
        stan::math::fill(trunc_rev_cmf, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 46;
        assign(trunc_rev_cmf, nil_index_list(),
          get_delay_rev_pmf(trunc_id, delay_type_max[(trunc_id - 1)],
            delay_types_p, delay_types_id, delay_types_groups, delay_max,
            delay_np_pmf, delay_np_pmf_groups, delay_mean, delay_sd,
            delay_dist, 0, 1, 1, pstream__),
          "assigning variable trunc_rev_cmf");
        current_statement__ = 47;
        assign(obs_reports, nil_index_list(),
          truncate(
            rvalue(reports,
              cons_list(index_min_max(1, ot), nil_index_list()), "reports"),
            trunc_rev_cmf, 0, pstream__), "assigning variable obs_reports");
      } else {
        current_statement__ = 43;
        assign(obs_reports, nil_index_list(),
          rvalue(reports, cons_list(index_min_max(1, ot), nil_index_list()),
            "reports"), "assigning variable obs_reports");
      }
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
        current_statement__ = 15;
        current_statement__ = 15;
        check_greater_or_equal(function__, "R[sym1__]", R[(sym1__ - 1)], 0);}
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
        current_statement__ = 15;
        current_statement__ = 15;
        check_less_or_equal(function__, "R[sym1__]", R[(sym1__ - 1)],
                            (10 * r_mean));}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= noise_1dim__; ++sym1__) {
          vars__.emplace_back(noise[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
          vars__.emplace_back(R[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          vars__.emplace_back(infections[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
          vars__.emplace_back(reports[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= ot; ++sym1__) {
          vars__.emplace_back(obs_reports[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= gt_rev_pmf_1dim__; ++sym1__) {
          vars__.emplace_back(gt_rev_pmf[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> imputed_reports;
      imputed_reports = std::vector<int>(ot_h, std::numeric_limits<int>::min());
      
      Eigen::Matrix<double, -1, 1> gen_R;
      gen_R = Eigen::Matrix<double, -1, 1>(gen_R_1dim__);
      stan::math::fill(gen_R, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> r;
      r = std::vector<double>(ot_h, std::numeric_limits<double>::quiet_NaN());
      
      double gt_mean;
      gt_mean = std::numeric_limits<double>::quiet_NaN();
      
      double gt_var;
      gt_var = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(log_lik_1dim__);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 71;
      if (estimate_r) {
        current_statement__ = 67;
        gt_mean = rev_pmf_mean(gt_rev_pmf, 1, pstream__);
        current_statement__ = 68;
        gt_var = rev_pmf_var(gt_rev_pmf, 1, gt_mean, pstream__);
        current_statement__ = 69;
        assign(r, nil_index_list(),
          R_to_growth(R, gt_mean, gt_var, pstream__), "assigning variable r");
      } else {
        current_statement__ = 56;
        validate_non_negative_index("delay_mean_sample", "delay_n_p",
                                    delay_n_p);
        std::vector<double> delay_mean_sample;
        delay_mean_sample = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 57;
        assign(delay_mean_sample, nil_index_list(),
          normal_rng(delay_mean_mean, delay_mean_sd, base_rng__),
          "assigning variable delay_mean_sample");
        current_statement__ = 58;
        validate_non_negative_index("delay_sd_sample", "delay_n_p", delay_n_p);
        std::vector<double> delay_sd_sample;
        delay_sd_sample = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 59;
        assign(delay_sd_sample, nil_index_list(),
          normal_rng(delay_sd_mean, delay_sd_sd, base_rng__),
          "assigning variable delay_sd_sample");
        current_statement__ = 60;
        validate_non_negative_index("sampled_gt_rev_pmf",
                                    "delay_type_max[gt_id]",
                                    delay_type_max[(gt_id - 1)]);
        Eigen::Matrix<double, -1, 1> sampled_gt_rev_pmf;
        sampled_gt_rev_pmf = Eigen::Matrix<double, -1, 1>(delay_type_max[
          (gt_id - 1)]);
        stan::math::fill(sampled_gt_rev_pmf, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 61;
        assign(sampled_gt_rev_pmf, nil_index_list(),
          get_delay_rev_pmf(gt_id, delay_type_max[(gt_id - 1)],
            delay_types_p, delay_types_id, delay_types_groups, delay_max,
            delay_np_pmf, delay_np_pmf_groups, delay_mean_sample,
            delay_sd_sample, delay_dist, 1, 1, 0, pstream__),
          "assigning variable sampled_gt_rev_pmf");
        current_statement__ = 62;
        gt_mean = rev_pmf_mean(sampled_gt_rev_pmf, 1, pstream__);
        current_statement__ = 63;
        gt_var = rev_pmf_var(sampled_gt_rev_pmf, 1, gt_mean, pstream__);
        current_statement__ = 64;
        assign(gen_R, nil_index_list(),
          calculate_Rt(infections, seeding_time, sampled_gt_rev_pmf,
            rt_half_window, pstream__), "assigning variable gen_R");
        current_statement__ = 65;
        assign(r, nil_index_list(),
          R_to_growth(gen_R, gt_mean, gt_var, pstream__),
          "assigning variable r");
      }
      current_statement__ = 72;
      assign(imputed_reports, nil_index_list(),
        report_rng(reports, rep_phi, model_type, base_rng__, pstream__),
        "assigning variable imputed_reports");
      current_statement__ = 75;
      if (return_likelihood) {
        current_statement__ = 73;
        assign(log_lik, nil_index_list(),
          report_log_lik(cases, obs_reports, rep_phi, model_type,
            obs_weight, pstream__), "assigning variable log_lik");
      } 
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        vars__.emplace_back(imputed_reports[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gen_R_1dim__; ++sym1__) {
        vars__.emplace_back(gen_R[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        vars__.emplace_back(r[(sym1__ - 1)]);}
      vars__.emplace_back(gt_mean);
      vars__.emplace_back(gt_var);
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        vars__.emplace_back(log_lik[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> rho;
      rho = std::vector<double>(rho_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(rho, nil_index_list(), context__.vals_r("rho"),
        "assigning variable rho");
      std::vector<double> rho_free__;
      rho_free__ = std::vector<double>(rho_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(rho_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(rho[(sym1__ - 1)], ls_min, ls_max),
          "assigning variable rho_free__");}
      std::vector<double> alpha;
      alpha = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(alpha, nil_index_list(), context__.vals_r("alpha"),
        "assigning variable alpha");
      std::vector<double> alpha_free__;
      alpha_free__ = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(eta_1dim__);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 3;
        assign(eta_flat__, nil_index_list(), context__.vals_r("eta"),
          "assigning variable eta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
            eta_flat__[(pos__ - 1)], "assigning variable eta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> log_R;
      log_R = Eigen::Matrix<double, -1, 1>(estimate_r);
      stan::math::fill(log_R, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> log_R_flat__;
        current_statement__ = 4;
        assign(log_R_flat__, nil_index_list(), context__.vals_r("log_R"),
          "assigning variable log_R_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
          current_statement__ = 4;
          assign(log_R, cons_list(index_uni(sym1__), nil_index_list()),
            log_R_flat__[(pos__ - 1)], "assigning variable log_R");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      std::vector<double> initial_infections;
      initial_infections = std::vector<double>(estimate_r, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(initial_infections, nil_index_list(),
        context__.vals_r("initial_infections"),
        "assigning variable initial_infections");
      std::vector<double> initial_growth;
      initial_growth = std::vector<double>(initial_growth_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(initial_growth, nil_index_list(),
        context__.vals_r("initial_growth"),
        "assigning variable initial_growth");
      std::vector<double> bp_sd;
      bp_sd = std::vector<double>(bp_sd_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(bp_sd, nil_index_list(), context__.vals_r("bp_sd"),
        "assigning variable bp_sd");
      std::vector<double> bp_sd_free__;
      bp_sd_free__ = std::vector<double>(bp_sd_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(bp_sd_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(bp_sd[(sym1__ - 1)], 0),
          "assigning variable bp_sd_free__");}
      std::vector<double> bp_effects;
      bp_effects = std::vector<double>(bp_n, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      assign(bp_effects, nil_index_list(), context__.vals_r("bp_effects"),
        "assigning variable bp_effects");
      std::vector<double> delay_mean;
      delay_mean = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(delay_mean, nil_index_list(), context__.vals_r("delay_mean"),
        "assigning variable delay_mean");
      std::vector<double> delay_sd;
      delay_sd = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(delay_sd, nil_index_list(), context__.vals_r("delay_sd"),
        "assigning variable delay_sd");
      std::vector<double> delay_sd_free__;
      delay_sd_free__ = std::vector<double>(delay_n_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        current_statement__ = 10;
        assign(delay_sd_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(delay_sd[(sym1__ - 1)], 0),
          "assigning variable delay_sd_free__");}
      Eigen::Matrix<double, -1, 1> day_of_week_simplex;
      day_of_week_simplex = Eigen::Matrix<double, -1, 1>(week_effect);
      stan::math::fill(day_of_week_simplex, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> day_of_week_simplex_flat__;
        current_statement__ = 11;
        assign(day_of_week_simplex_flat__, nil_index_list(),
          context__.vals_r("day_of_week_simplex"),
          "assigning variable day_of_week_simplex_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
          current_statement__ = 11;
          assign(day_of_week_simplex,
            cons_list(index_uni(sym1__), nil_index_list()),
            day_of_week_simplex_flat__[(pos__ - 1)],
            "assigning variable day_of_week_simplex");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> day_of_week_simplex_free__;
      day_of_week_simplex_free__ = Eigen::Matrix<double, -1, 1>((week_effect
                                                                  - 1));
      stan::math::fill(day_of_week_simplex_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      assign(day_of_week_simplex_free__, nil_index_list(),
        stan::math::simplex_free(day_of_week_simplex),
        "assigning variable day_of_week_simplex_free__");
      std::vector<double> frac_obs;
      frac_obs = std::vector<double>(obs_scale, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(frac_obs, nil_index_list(), context__.vals_r("frac_obs"),
        "assigning variable frac_obs");
      std::vector<double> frac_obs_free__;
      frac_obs_free__ = std::vector<double>(obs_scale, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
        current_statement__ = 12;
        assign(frac_obs_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(frac_obs[(sym1__ - 1)], 0, 1),
          "assigning variable frac_obs_free__");}
      std::vector<double> rep_phi;
      rep_phi = std::vector<double>(model_type, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(rep_phi, nil_index_list(), context__.vals_r("rep_phi"),
        "assigning variable rep_phi");
      std::vector<double> rep_phi_free__;
      rep_phi_free__ = std::vector<double>(model_type, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
        current_statement__ = 13;
        assign(rep_phi_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(rep_phi[(sym1__ - 1)], 0),
          "assigning variable rep_phi_free__");}
      for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
        vars__.emplace_back(rho_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
        vars__.emplace_back(eta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
        vars__.emplace_back(log_R[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
        vars__.emplace_back(initial_infections[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= initial_growth_1dim__; ++sym1__) {
        vars__.emplace_back(initial_growth[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
        vars__.emplace_back(bp_sd_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= bp_n; ++sym1__) {
        vars__.emplace_back(bp_effects[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        vars__.emplace_back(delay_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
        vars__.emplace_back(delay_sd_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= (week_effect - 1); ++sym1__) {
        vars__.emplace_back(day_of_week_simplex_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
        vars__.emplace_back(frac_obs_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
        vars__.emplace_back(rep_phi_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("rho");
    names__.emplace_back("alpha");
    names__.emplace_back("eta");
    names__.emplace_back("log_R");
    names__.emplace_back("initial_infections");
    names__.emplace_back("initial_growth");
    names__.emplace_back("bp_sd");
    names__.emplace_back("bp_effects");
    names__.emplace_back("delay_mean");
    names__.emplace_back("delay_sd");
    names__.emplace_back("day_of_week_simplex");
    names__.emplace_back("frac_obs");
    names__.emplace_back("rep_phi");
    names__.emplace_back("noise");
    names__.emplace_back("R");
    names__.emplace_back("infections");
    names__.emplace_back("reports");
    names__.emplace_back("obs_reports");
    names__.emplace_back("gt_rev_pmf");
    names__.emplace_back("imputed_reports");
    names__.emplace_back("gen_R");
    names__.emplace_back("r");
    names__.emplace_back("gt_mean");
    names__.emplace_back("gt_var");
    names__.emplace_back("log_lik");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(rho_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(eta_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(estimate_r)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(estimate_r)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(initial_growth_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(bp_sd_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(bp_n)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(delay_n_p)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(delay_n_p)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(week_effect)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(obs_scale)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(model_type)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(noise_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(R_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(t)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ot_h)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ot)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gt_rev_pmf_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ot_h)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gen_R_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ot_h)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(log_lik_1dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_R" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "initial_infections" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= initial_growth_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "initial_growth" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bp_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= bp_n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bp_effects" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delay_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delay_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "day_of_week_simplex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "frac_obs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rep_phi" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= noise_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "noise" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "R" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "infections" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "reports" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "obs_reports" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= gt_rev_pmf_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gt_rev_pmf" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "imputed_reports" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= gen_R_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gen_R" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "gt_mean");
      param_names__.emplace_back(std::string() + "gt_var");
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_R" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "initial_infections" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= initial_growth_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "initial_growth" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bp_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= bp_n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bp_effects" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delay_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= delay_n_p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "delay_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (week_effect - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "day_of_week_simplex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "frac_obs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rep_phi" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= noise_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "noise" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "R" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "infections" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "reports" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ot; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "obs_reports" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= gt_rev_pmf_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gt_rev_pmf" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "imputed_reports" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= gen_R_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gen_R" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "gt_mean");
      param_names__.emplace_back(std::string() + "gt_var");
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" << rho_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << alpha_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << eta_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"log_R\",\"type\":{\"name\":\"vector\",\"length\":" << estimate_r << "},\"block\":\"parameters\"},{\"name\":\"initial_infections\",\"type\":{\"name\":\"array\",\"length\":" << estimate_r << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"initial_growth\",\"type\":{\"name\":\"array\",\"length\":" << initial_growth_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bp_sd\",\"type\":{\"name\":\"array\",\"length\":" << bp_sd_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bp_effects\",\"type\":{\"name\":\"array\",\"length\":" << bp_n << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"delay_mean\",\"type\":{\"name\":\"array\",\"length\":" << delay_n_p << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"delay_sd\",\"type\":{\"name\":\"array\",\"length\":" << delay_n_p << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"day_of_week_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << week_effect << "},\"block\":\"parameters\"},{\"name\":\"frac_obs\",\"type\":{\"name\":\"array\",\"length\":" << obs_scale << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rep_phi\",\"type\":{\"name\":\"array\",\"length\":" << model_type << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"vector\",\"length\":" << noise_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" << R_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"infections\",\"type\":{\"name\":\"vector\",\"length\":" << t << "},\"block\":\"transformed_parameters\"},{\"name\":\"reports\",\"type\":{\"name\":\"vector\",\"length\":" << ot_h << "},\"block\":\"transformed_parameters\"},{\"name\":\"obs_reports\",\"type\":{\"name\":\"vector\",\"length\":" << ot << "},\"block\":\"transformed_parameters\"},{\"name\":\"gt_rev_pmf\",\"type\":{\"name\":\"vector\",\"length\":" << gt_rev_pmf_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"imputed_reports\",\"type\":{\"name\":\"array\",\"length\":" << ot_h << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"gen_R\",\"type\":{\"name\":\"vector\",\"length\":" << gen_R_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"r\",\"type\":{\"name\":\"array\",\"length\":" << ot_h << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"gt_mean\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gt_var\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << log_lik_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" << rho_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << alpha_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << eta_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"log_R\",\"type\":{\"name\":\"vector\",\"length\":" << estimate_r << "},\"block\":\"parameters\"},{\"name\":\"initial_infections\",\"type\":{\"name\":\"array\",\"length\":" << estimate_r << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"initial_growth\",\"type\":{\"name\":\"array\",\"length\":" << initial_growth_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bp_sd\",\"type\":{\"name\":\"array\",\"length\":" << bp_sd_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bp_effects\",\"type\":{\"name\":\"array\",\"length\":" << bp_n << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"delay_mean\",\"type\":{\"name\":\"array\",\"length\":" << delay_n_p << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"delay_sd\",\"type\":{\"name\":\"array\",\"length\":" << delay_n_p << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"day_of_week_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << (week_effect - 1) << "},\"block\":\"parameters\"},{\"name\":\"frac_obs\",\"type\":{\"name\":\"array\",\"length\":" << obs_scale << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rep_phi\",\"type\":{\"name\":\"array\",\"length\":" << model_type << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"vector\",\"length\":" << noise_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" << R_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"infections\",\"type\":{\"name\":\"vector\",\"length\":" << t << "},\"block\":\"transformed_parameters\"},{\"name\":\"reports\",\"type\":{\"name\":\"vector\",\"length\":" << ot_h << "},\"block\":\"transformed_parameters\"},{\"name\":\"obs_reports\",\"type\":{\"name\":\"vector\",\"length\":" << ot << "},\"block\":\"transformed_parameters\"},{\"name\":\"gt_rev_pmf\",\"type\":{\"name\":\"vector\",\"length\":" << gt_rev_pmf_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"imputed_reports\",\"type\":{\"name\":\"array\",\"length\":" << ot_h << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"gen_R\",\"type\":{\"name\":\"vector\",\"length\":" << gen_R_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"r\",\"type\":{\"name\":\"array\",\"length\":" << ot_h << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"gt_mean\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gt_var\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << log_lik_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_estimate_infections_namespace::model_estimate_infections;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_estimate_infections_namespace::profiles__;
}
#endif
#endif
