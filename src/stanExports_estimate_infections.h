// Generated by rstantools.  Do not edit by hand.

/*
    EpiNow2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiNow2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiNow2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_estimate_infections_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 707> locations_array__ =
  {" (found before start of program)",
  " (in 'estimate_infections', line 720, column 2 to column 61)",
  " (in 'estimate_infections', line 721, column 2 to column 45)",
  " (in 'estimate_infections', line 722, column 2 to column 28)",
  " (in 'estimate_infections', line 724, column 2 to column 27)",
  " (in 'estimate_infections', line 725, column 2 to column 45)",
  " (in 'estimate_infections', line 726, column 2 to column 68)",
  " (in 'estimate_infections', line 727, column 2 to column 48)",
  " (in 'estimate_infections', line 728, column 2 to column 30)",
  " (in 'estimate_infections', line 730, column 2 to column 71)",
  " (in 'estimate_infections', line 731, column 2 to column 43)",
  " (in 'estimate_infections', line 732, column 2 to column 70)",
  " (in 'estimate_infections', line 733, column 2 to column 44)",
  " (in 'estimate_infections', line 736, column 2 to column 40)",
  " (in 'estimate_infections', line 737, column 2 to column 49)",
  " (in 'estimate_infections', line 738, column 2 to column 23)",
  " (in 'estimate_infections', line 739, column 2 to column 23)",
  " (in 'estimate_infections', line 740, column 2 to column 25)",
  " (in 'estimate_infections', line 741, column 2 to column 62)",
  " (in 'estimate_infections', line 868, column 2 to column 34)",
  " (in 'estimate_infections', line 869, column 2 to column 41)",
  " (in 'estimate_infections', line 870, column 2 to column 21)",
  " (in 'estimate_infections', line 871, column 2 to column 45)",
  " (in 'estimate_infections', line 745, column 6 to column 67)",
  " (in 'estimate_infections', line 744, column 16 to line 746, column 5)",
  " (in 'estimate_infections', line 744, column 4 to line 746, column 5)",
  " (in 'estimate_infections', line 743, column 2 to line 747, column 3)",
  " (in 'estimate_infections', line 772, column 6 to line 774, column 8)",
  " (in 'estimate_infections', line 771, column 4 to line 775, column 5)",
  " (in 'estimate_infections', line 769, column 9 to line 776, column 3)",
  " (in 'estimate_infections', line 751, column 6 to line 756, column 8)",
  " (in 'estimate_infections', line 750, column 4 to line 757, column 5)",
  " (in 'estimate_infections', line 759, column 6 to line 761, column 8)",
  " (in 'estimate_infections', line 758, column 4 to line 762, column 5)",
  " (in 'estimate_infections', line 764, column 6 to line 767, column 8)",
  " (in 'estimate_infections', line 763, column 4 to line 768, column 5)",
  " (in 'estimate_infections', line 749, column 18 to line 769, column 3)",
  " (in 'estimate_infections', line 749, column 2 to line 776, column 3)",
  " (in 'estimate_infections', line 792, column 4 to column 47)",
  " (in 'estimate_infections', line 791, column 9 to line 793, column 3)",
  " (in 'estimate_infections', line 779, column 11 to column 39)",
  " (in 'estimate_infections', line 779, column 4 to column 55)",
  " (in 'estimate_infections', line 781, column 6 to line 786, column 8)",
  " (in 'estimate_infections', line 780, column 4 to line 787, column 5)",
  " (in 'estimate_infections', line 789, column 6 to column 76)",
  " (in 'estimate_infections', line 788, column 4 to line 790, column 5)",
  " (in 'estimate_infections', line 778, column 16 to line 791, column 3)",
  " (in 'estimate_infections', line 778, column 2 to line 793, column 3)",
  " (in 'estimate_infections', line 797, column 6 to column 78)",
  " (in 'estimate_infections', line 796, column 4 to line 798, column 5)",
  " (in 'estimate_infections', line 795, column 23 to line 799, column 3)",
  " (in 'estimate_infections', line 795, column 2 to line 799, column 3)",
  " (in 'estimate_infections', line 803, column 6 to line 805, column 8)",
  " (in 'estimate_infections', line 802, column 4 to line 806, column 5)",
  " (in 'estimate_infections', line 801, column 17 to line 807, column 3)",
  " (in 'estimate_infections', line 801, column 2 to line 807, column 3)",
  " (in 'estimate_infections', line 823, column 4 to column 32)",
  " (in 'estimate_infections', line 822, column 9 to line 824, column 3)",
  " (in 'estimate_infections', line 810, column 11 to column 39)",
  " (in 'estimate_infections', line 810, column 4 to column 55)",
  " (in 'estimate_infections', line 812, column 6 to line 817, column 8)",
  " (in 'estimate_infections', line 811, column 4 to line 818, column 5)",
  " (in 'estimate_infections', line 820, column 6 to column 62)",
  " (in 'estimate_infections', line 819, column 4 to line 821, column 5)",
  " (in 'estimate_infections', line 809, column 16 to line 822, column 3)",
  " (in 'estimate_infections', line 809, column 2 to line 824, column 3)",
  " (in 'estimate_infections', line 875, column 13 to column 32)",
  " (in 'estimate_infections', line 875, column 6 to line 877, column 9)",
  " (in 'estimate_infections', line 878, column 13 to column 38)",
  " (in 'estimate_infections', line 878, column 6 to line 883, column 8)",
  " (in 'estimate_infections', line 885, column 6 to line 887, column 8)",
  " (in 'estimate_infections', line 873, column 24 to line 888, column 5)",
  " (in 'estimate_infections', line 873, column 4 to line 888, column 5)",
  " (in 'estimate_infections', line 890, column 4 to column 55)",
  " (in 'estimate_infections', line 892, column 4 to column 63)",
  " (in 'estimate_infections', line 895, column 6 to line 897, column 8)",
  " (in 'estimate_infections', line 894, column 27 to line 898, column 5)",
  " (in 'estimate_infections', line 894, column 4 to line 898, column 5)",
  " (in 'estimate_infections', line 872, column 2 to line 899, column 3)",
  " (in 'estimate_infections', line 830, column 6 to line 832, column 8)",
  " (in 'estimate_infections', line 829, column 4 to line 833, column 5)",
  " (in 'estimate_infections', line 828, column 14 to line 834, column 3)",
  " (in 'estimate_infections', line 828, column 2 to line 834, column 3)",
  " (in 'estimate_infections', line 837, column 4 to line 840, column 6)",
  " (in 'estimate_infections', line 836, column 2 to line 841, column 3)",
  " (in 'estimate_infections', line 845, column 6 to line 848, column 8)",
  " (in 'estimate_infections', line 844, column 4 to line 849, column 5)",
  " (in 'estimate_infections', line 842, column 18 to line 850, column 3)",
  " (in 'estimate_infections', line 842, column 2 to line 850, column 3)",
  " (in 'estimate_infections', line 854, column 6 to column 65)",
  " (in 'estimate_infections', line 854, column 62 to column 63)",
  " (in 'estimate_infections', line 854, column 59 to column 60)",
  " (in 'estimate_infections', line 853, column 4 to line 855, column 5)",
  " (in 'estimate_infections', line 852, column 24 to line 856, column 3)",
  " (in 'estimate_infections', line 852, column 2 to line 856, column 3)",
  " (in 'estimate_infections', line 860, column 6 to line 863, column 8)",
  " (in 'estimate_infections', line 859, column 4 to line 864, column 5)",
  " (in 'estimate_infections', line 858, column 18 to line 865, column 3)",
  " (in 'estimate_infections', line 858, column 2 to line 865, column 3)",
  " (in 'estimate_infections', line 628, column 2 to column 8)",
  " (in 'estimate_infections', line 629, column 2 to column 9)",
  " (in 'estimate_infections', line 630, column 2 to column 19)",
  " (in 'estimate_infections', line 631, column 2 to column 14)",
  " (in 'estimate_infections', line 632, column 2 to column 18)",
  " (in 'estimate_infections', line 633, column 8 to column 10)",
  " (in 'estimate_infections', line 633, column 2 to column 33)",
  " (in 'estimate_infections', line 634, column 8 to column 10)",
  " (in 'estimate_infections', line 634, column 2 to column 27)",
  " (in 'estimate_infections', line 635, column 20 to column 21)",
  " (in 'estimate_infections', line 635, column 2 to column 37)",
  " (in 'estimate_infections', line 637, column 2 to column 25)",
  " (in 'estimate_infections', line 638, column 2 to column 27)",
  " (in 'estimate_infections', line 639, column 2 to column 28)",
  " (in 'estimate_infections', line 640, column 8 to column 17)",
  " (in 'estimate_infections', line 640, column 2 to column 44)",
  " (in 'estimate_infections', line 641, column 8 to column 17)",
  " (in 'estimate_infections', line 641, column 2 to column 45)",
  " (in 'estimate_infections', line 643, column 2 to column 37)",
  " (in 'estimate_infections', line 644, column 31 to column 50)",
  " (in 'estimate_infections', line 644, column 2 to column 65)",
  " (in 'estimate_infections', line 645, column 8 to column 22)",
  " (in 'estimate_infections', line 645, column 2 to column 59)",
  " (in 'estimate_infections', line 647, column 2 to column 37)",
  " (in 'estimate_infections', line 648, column 9 to column 28)",
  " (in 'estimate_infections', line 648, column 2 to column 49)",
  " (in 'estimate_infections', line 649, column 37 to column 56)",
  " (in 'estimate_infections', line 649, column 2 to column 76)",
  " (in 'estimate_infections', line 650, column 20 to column 39)",
  " (in 'estimate_infections', line 650, column 2 to column 57)",
  " (in 'estimate_infections', line 651, column 8 to column 21)",
  " (in 'estimate_infections', line 651, column 2 to column 58)",
  " (in 'estimate_infections', line 653, column 8 to column 17)",
  " (in 'estimate_infections', line 653, column 2 to column 47)",
  " (in 'estimate_infections', line 654, column 2 to column 29)",
  " (in 'estimate_infections', line 655, column 8 to column 15)",
  " (in 'estimate_infections', line 655, column 2 to column 46)",
  " (in 'estimate_infections', line 656, column 8 to column 15)",
  " (in 'estimate_infections', line 656, column 2 to column 47)",
  " (in 'estimate_infections', line 657, column 8 to column 23)",
  " (in 'estimate_infections', line 657, column 2 to column 59)",
  " (in 'estimate_infections', line 659, column 2 to column 9)",
  " (in 'estimate_infections', line 660, column 2 to column 17)",
  " (in 'estimate_infections', line 661, column 2 to column 18)",
  " (in 'estimate_infections', line 662, column 2 to column 16)",
  " (in 'estimate_infections', line 663, column 2 to column 23)",
  " (in 'estimate_infections', line 664, column 2 to column 23)",
  " (in 'estimate_infections', line 665, column 2 to column 16)",
  " (in 'estimate_infections', line 666, column 2 to column 14)",
  " (in 'estimate_infections', line 667, column 2 to column 17)",
  " (in 'estimate_infections', line 668, column 2 to column 12)",
  " (in 'estimate_infections', line 670, column 2 to column 17)",
  " (in 'estimate_infections', line 671, column 2 to column 24)",
  " (in 'estimate_infections', line 672, column 2 to column 20)",
  " (in 'estimate_infections', line 673, column 2 to column 26)",
  " (in 'estimate_infections', line 674, column 2 to column 24)",
  " (in 'estimate_infections', line 675, column 2 to column 11)",
  " (in 'estimate_infections', line 676, column 8 to column 24)",
  " (in 'estimate_infections', line 676, column 2 to column 42)",
  " (in 'estimate_infections', line 677, column 2 to column 19)",
  " (in 'estimate_infections', line 678, column 2 to column 17)",
  " (in 'estimate_infections', line 679, column 2 to column 10)",
  " (in 'estimate_infections', line 680, column 2 to column 23)",
  " (in 'estimate_infections', line 682, column 2 to column 21)",
  " (in 'estimate_infections', line 683, column 2 to column 21)",
  " (in 'estimate_infections', line 685, column 8 to column 24)",
  " (in 'estimate_infections', line 685, column 2 to column 42)",
  " (in 'estimate_infections', line 686, column 2 to column 17)",
  " (in 'estimate_infections', line 687, column 2 to column 16)",
  " (in 'estimate_infections', line 688, column 2 to column 14)",
  " (in 'estimate_infections', line 689, column 2 to column 18)",
  " (in 'estimate_infections', line 690, column 2 to column 16)",
  " (in 'estimate_infections', line 691, column 2 to column 22)",
  " (in 'estimate_infections', line 692, column 2 to column 20)",
  " (in 'estimate_infections', line 693, column 2 to column 18)",
  " (in 'estimate_infections', line 694, column 2 to column 17)",
  " (in 'estimate_infections', line 695, column 2 to column 24)",
  " (in 'estimate_infections', line 696, column 2 to column 17)",
  " (in 'estimate_infections', line 697, column 2 to column 26)",
  " (in 'estimate_infections', line 698, column 2 to column 26)",
  " (in 'estimate_infections', line 702, column 2 to column 38)",
  " (in 'estimate_infections', line 703, column 2 to column 26)",
  " (in 'estimate_infections', line 705, column 2 to column 100)",
  " (in 'estimate_infections', line 706, column 9 to column 20)",
  " (in 'estimate_infections', line 706, column 22 to column 23)",
  " (in 'estimate_infections', line 706, column 2 to column 59)",
  " (in 'estimate_infections', line 708, column 2 to column 59)",
  " (in 'estimate_infections', line 709, column 2 to column 52)",
  " (in 'estimate_infections', line 710, column 8 to column 19)",
  " (in 'estimate_infections', line 710, column 2 to column 40)",
  " (in 'estimate_infections', line 712, column 4 to line 715, column 6)",
  " (in 'estimate_infections', line 711, column 2 to line 716, column 3)",
  " (in 'estimate_infections', line 720, column 8 to column 21)",
  " (in 'estimate_infections', line 721, column 8 to column 21)",
  " (in 'estimate_infections', line 722, column 9 to column 22)",
  " (in 'estimate_infections', line 724, column 9 to column 19)",
  " (in 'estimate_infections', line 725, column 8 to column 18)",
  " (in 'estimate_infections', line 726, column 8 to column 46)",
  " (in 'estimate_infections', line 727, column 8 to column 24)",
  " (in 'estimate_infections', line 728, column 8 to column 12)",
  " (in 'estimate_infections', line 730, column 37 to column 56)",
  " (in 'estimate_infections', line 731, column 10 to column 21)",
  " (in 'estimate_infections', line 732, column 8 to column 32)",
  " (in 'estimate_infections', line 733, column 8 to column 18)",
  " (in 'estimate_infections', line 736, column 9 to column 32)",
  " (in 'estimate_infections', line 737, column 20 to column 45)",
  " (in 'estimate_infections', line 738, column 9 to column 10)",
  " (in 'estimate_infections', line 739, column 9 to column 13)",
  " (in 'estimate_infections', line 740, column 9 to column 11)",
  " (in 'estimate_infections', line 741, column 9 to column 49)",
  " (in 'estimate_infections', line 868, column 8 to column 12)",
  " (in 'estimate_infections', line 869, column 9 to column 33)",
  " (in 'estimate_infections', line 870, column 9 to column 17)",
  " (in 'estimate_infections', line 871, column 9 to column 35)",
  " (in 'estimate_infections', line 7, column 4 to column 31)",
  " (in 'estimate_infections', line 8, column 4 to column 31)",
  " (in 'estimate_infections', line 9, column 11 to column 14)",
  " (in 'estimate_infections', line 9, column 4 to column 18)",
  " (in 'estimate_infections', line 11, column 6 to column 75)",
  " (in 'estimate_infections', line 10, column 28 to line 12, column 5)",
  " (in 'estimate_infections', line 10, column 4 to line 12, column 5)",
  " (in 'estimate_infections', line 14, column 6 to line 17, column 8)",
  " (in 'estimate_infections', line 13, column 21 to line 18, column 5)",
  " (in 'estimate_infections', line 13, column 4 to line 18, column 5)",
  " (in 'estimate_infections', line 19, column 3 to column 13)",
  " (in 'estimate_infections', line 6, column 58 to line 20, column 3)",
  " (in 'estimate_infections', line 27, column 2 to column 35)",
  " (in 'estimate_infections', line 28, column 9 to column 25)",
  " (in 'estimate_infections', line 28, column 2 to column 35)",
  " (in 'estimate_infections', line 29, column 9 to column 10)",
  " (in 'estimate_infections', line 29, column 2 to column 39)",
  " (in 'estimate_infections', line 30, column 2 to column 43)",
  " (in 'estimate_infections', line 35, column 4 to column 47)",
  " (in 'estimate_infections', line 34, column 9 to line 36, column 3)",
  " (in 'estimate_infections', line 32, column 4 to column 75)",
  " (in 'estimate_infections', line 33, column 4 to column 50)",
  " (in 'estimate_infections', line 31, column 14 to line 34, column 3)",
  " (in 'estimate_infections', line 31, column 2 to line 36, column 3)",
  " (in 'estimate_infections', line 37, column 2 to column 18)",
  " (in 'estimate_infections', line 26, column 44 to line 38, column 1)",
  " (in 'estimate_infections', line 45, column 9 to column 10)",
  " (in 'estimate_infections', line 45, column 2 to column 17)",
  " (in 'estimate_infections', line 46, column 9 to column 10)",
  " (in 'estimate_infections', line 46, column 2 to column 23)",
  " (in 'estimate_infections', line 56, column 4 to column 54)",
  " (in 'estimate_infections', line 55, column 9 to line 57, column 3)",
  " (in 'estimate_infections', line 53, column 6 to column 59)",
  " (in 'estimate_infections', line 52, column 19 to line 54, column 5)",
  " (in 'estimate_infections', line 52, column 4 to line 54, column 5)",
  " (in 'estimate_infections', line 51, column 24 to line 55, column 3)",
  " (in 'estimate_infections', line 51, column 9 to line 57, column 3)",
  " (in 'estimate_infections', line 49, column 6 to column 63)",
  " (in 'estimate_infections', line 48, column 19 to line 50, column 5)",
  " (in 'estimate_infections', line 48, column 4 to line 50, column 5)",
  " (in 'estimate_infections', line 47, column 17 to line 51, column 3)",
  " (in 'estimate_infections', line 47, column 2 to line 57, column 3)",
  " (in 'estimate_infections', line 68, column 4 to column 16)",
  " (in 'estimate_infections', line 67, column 9 to line 69, column 3)",
  " (in 'estimate_infections', line 60, column 4 to column 28)",
  " (in 'estimate_infections', line 61, column 4 to column 28)",
  " (in 'estimate_infections', line 63, column 6 to column 71)",
  " (in 'estimate_infections', line 62, column 15 to line 64, column 5)",
  " (in 'estimate_infections', line 62, column 4 to line 64, column 5)",
  " (in 'estimate_infections', line 66, column 4 to column 53)",
  " (in 'estimate_infections', line 59, column 13 to line 67, column 3)",
  " (in 'estimate_infections', line 59, column 2 to line 69, column 3)",
  " (in 'estimate_infections', line 70, column 2 to column 20)",
  " (in 'estimate_infections', line 44, column 55 to line 71, column 1)",
  " (in 'estimate_infections', line 75, column 2 to column 37)",
  " (in 'estimate_infections', line 76, column 9 to column 19)",
  " (in 'estimate_infections', line 76, column 2 to column 29)",
  " (in 'estimate_infections', line 78, column 4 to column 41)",
  " (in 'estimate_infections', line 77, column 26 to line 79, column 3)",
  " (in 'estimate_infections', line 77, column 2 to line 79, column 3)",
  " (in 'estimate_infections', line 80, column 2 to column 17)",
  " (in 'estimate_infections', line 74, column 30 to line 81, column 1)",
  " (in 'estimate_infections', line 84, column 9 to column 12)",
  " (in 'estimate_infections', line 84, column 2 to column 18)",
  " (in 'estimate_infections', line 86, column 4 to column 28)",
  " (in 'estimate_infections', line 85, column 19 to line 87, column 3)",
  " (in 'estimate_infections', line 85, column 2 to line 87, column 3)",
  " (in 'estimate_infections', line 88, column 2 to column 14)",
  " (in 'estimate_infections', line 83, column 34 to line 89, column 1)",
  " (in 'estimate_infections', line 92, column 2 to column 34)",
  " (in 'estimate_infections', line 93, column 9 to column 12)",
  " (in 'estimate_infections', line 93, column 2 to column 47)",
  " (in 'estimate_infections', line 94, column 2 to column 44)",
  " (in 'estimate_infections', line 91, column 44 to line 95, column 1)",
  " (in 'estimate_infections', line 98, column 2 to column 34)",
  " (in 'estimate_infections', line 99, column 9 to column 12)",
  " (in 'estimate_infections', line 99, column 2 to column 47)",
  " (in 'estimate_infections', line 101, column 4 to column 44)",
  " (in 'estimate_infections', line 100, column 19 to line 102, column 3)",
  " (in 'estimate_infections', line 100, column 2 to line 102, column 3)",
  " (in 'estimate_infections', line 103, column 2 to column 59)",
  " (in 'estimate_infections', line 97, column 54 to line 104, column 1)",
  " (in 'estimate_infections', line 110, column 8 to column 19)",
  " (in 'estimate_infections', line 110, column 2 to column 29)",
  " (in 'estimate_infections', line 112, column 4 to column 15)",
  " (in 'estimate_infections', line 117, column 8 to line 118, column 53)",
  " (in 'estimate_infections', line 116, column 13 to line 119, column 7)",
  " (in 'estimate_infections', line 115, column 8 to column 47)",
  " (in 'estimate_infections', line 114, column 28 to line 116, column 7)",
  " (in 'estimate_infections', line 114, column 6 to line 119, column 7)",
  " (in 'estimate_infections', line 113, column 69 to line 120, column 5)",
  " (in 'estimate_infections', line 113, column 4 to line 120, column 5)",
  " (in 'estimate_infections', line 111, column 27 to line 121, column 3)",
  " (in 'estimate_infections', line 111, column 2 to line 121, column 3)",
  " (in 'estimate_infections', line 122, column 2 to column 13)",
  " (in 'estimate_infections', line 109, column 2 to line 123, column 1)",
  " (in 'estimate_infections', line 133, column 9 to column 12)",
  " (in 'estimate_infections', line 133, column 2 to column 39)",
  " (in 'estimate_infections', line 134, column 2 to column 22)",
  " (in 'estimate_infections', line 135, column 2 to column 14)",
  " (in 'estimate_infections', line 155, column 6 to column 57)",
  " (in 'estimate_infections', line 156, column 6 to column 63)",
  " (in 'estimate_infections', line 157, column 6 to column 42)",
  " (in 'estimate_infections', line 161, column 8 to line 163, column 10)",
  " (in 'estimate_infections', line 160, column 13 to line 164, column 7)",
  " (in 'estimate_infections', line 159, column 8 to column 49)",
  " (in 'estimate_infections', line 158, column 28 to line 160, column 7)",
  " (in 'estimate_infections', line 158, column 6 to line 164, column 7)",
  " (in 'estimate_infections', line 154, column 11 to line 165, column 5)",
  " (in 'estimate_infections', line 138, column 6 to column 57)",
  " (in 'estimate_infections', line 139, column 6 to column 63)",
  " (in 'estimate_infections', line 140, column 13 to column 45)",
  " (in 'estimate_infections', line 140, column 6 to line 145, column 8)",
  " (in 'estimate_infections', line 146, column 6 to column 59)",
  " (in 'estimate_infections', line 150, column 8 to line 152, column 10)",
  " (in 'estimate_infections', line 149, column 13 to line 153, column 7)",
  " (in 'estimate_infections', line 148, column 8 to column 42)",
  " (in 'estimate_infections', line 147, column 28 to line 149, column 7)",
  " (in 'estimate_infections', line 147, column 6 to line 153, column 7)",
  " (in 'estimate_infections', line 137, column 26 to line 154, column 5)",
  " (in 'estimate_infections', line 137, column 4 to line 165, column 5)",
  " (in 'estimate_infections', line 166, column 4 to column 26)",
  " (in 'estimate_infections', line 136, column 81 to line 167, column 3)",
  " (in 'estimate_infections', line 136, column 2 to line 167, column 3)",
  " (in 'estimate_infections', line 169, column 4 to line 172, column 6)",
  " (in 'estimate_infections', line 168, column 21 to line 173, column 3)",
  " (in 'estimate_infections', line 168, column 2 to line 173, column 3)",
  " (in 'estimate_infections', line 175, column 4 to column 30)",
  " (in 'estimate_infections', line 174, column 18 to line 176, column 3)",
  " (in 'estimate_infections', line 174, column 2 to line 176, column 3)",
  " (in 'estimate_infections', line 178, column 4 to column 26)",
  " (in 'estimate_infections', line 177, column 19 to line 179, column 3)",
  " (in 'estimate_infections', line 177, column 2 to line 179, column 3)",
  " (in 'estimate_infections', line 180, column 2 to column 13)",
  " (in 'estimate_infections', line 131, column 2 to line 181, column 1)",
  " (in 'estimate_infections', line 188, column 2 to column 55)",
  " (in 'estimate_infections', line 190, column 4 to column 11)",
  " (in 'estimate_infections', line 189, column 21 to line 191, column 3)",
  " (in 'estimate_infections', line 189, column 2 to line 191, column 3)",
  " (in 'estimate_infections', line 193, column 4 to column 39)",
  " (in 'estimate_infections', line 194, column 4 to column 45)",
  " (in 'estimate_infections', line 198, column 8 to line 200, column 22)",
  " (in 'estimate_infections', line 203, column 10 to line 205, column 24)",
  " (in 'estimate_infections', line 202, column 32 to line 206, column 9)",
  " (in 'estimate_infections', line 202, column 8 to line 206, column 9)",
  " (in 'estimate_infections', line 196, column 34 to line 207, column 7)",
  " (in 'estimate_infections', line 196, column 6 to line 207, column 7)",
  " (in 'estimate_infections', line 195, column 25 to line 208, column 5)",
  " (in 'estimate_infections', line 195, column 4 to line 208, column 5)",
  " (in 'estimate_infections', line 192, column 24 to line 209, column 3)",
  " (in 'estimate_infections', line 192, column 2 to line 209, column 3)",
  " (in 'estimate_infections', line 187, column 59 to line 210, column 1)",
  " (in 'estimate_infections', line 213, column 2 to column 29)",
  " (in 'estimate_infections', line 214, column 9 to column 12)",
  " (in 'estimate_infections', line 214, column 2 to column 18)",
  " (in 'estimate_infections', line 216, column 4 to column 49)",
  " (in 'estimate_infections', line 217, column 4 to column 31)",
  " (in 'estimate_infections', line 218, column 4 to column 45)",
  " (in 'estimate_infections', line 215, column 19 to line 219, column 3)",
  " (in 'estimate_infections', line 215, column 2 to line 219, column 3)",
  " (in 'estimate_infections', line 220, column 2 to column 13)",
  " (in 'estimate_infections', line 212, column 57 to line 221, column 1)",
  " (in 'estimate_infections', line 226, column 2 to column 11)",
  " (in 'estimate_infections', line 227, column 2 to column 27)",
  " (in 'estimate_infections', line 228, column 2 to column 13)",
  " (in 'estimate_infections', line 225, column 27 to line 229, column 1)",
  " (in 'estimate_infections', line 233, column 9 to column 16)",
  " (in 'estimate_infections', line 233, column 2 to column 21)",
  " (in 'estimate_infections', line 234, column 2 to column 45)",
  " (in 'estimate_infections', line 235, column 2 to column 12)",
  " (in 'estimate_infections', line 232, column 36 to line 236, column 1)",
  " (in 'estimate_infections', line 239, column 2 to column 9)",
  " (in 'estimate_infections', line 240, column 2 to column 63)",
  " (in 'estimate_infections', line 241, column 2 to column 11)",
  " (in 'estimate_infections', line 238, column 42 to line 242, column 1)",
  " (in 'estimate_infections', line 245, column 2 to column 9)",
  " (in 'estimate_infections', line 246, column 2 to column 64)",
  " (in 'estimate_infections', line 247, column 2 to column 11)",
  " (in 'estimate_infections', line 244, column 46 to line 248, column 1)",
  " (in 'estimate_infections', line 252, column 2 to column 75)",
  " (in 'estimate_infections', line 253, column 2 to column 89)",
  " (in 'estimate_infections', line 254, column 2 to column 22)",
  " (in 'estimate_infections', line 251, column 66 to line 255, column 1)",
  " (in 'estimate_infections', line 258, column 9 to column 18)",
  " (in 'estimate_infections', line 258, column 2 to column 25)",
  " (in 'estimate_infections', line 259, column 9 to column 18)",
  " (in 'estimate_infections', line 259, column 20 to column 21)",
  " (in 'estimate_infections', line 259, column 2 to column 27)",
  " (in 'estimate_infections', line 260, column 2 to column 34)",
  " (in 'estimate_infections', line 262, column 4 to column 40)",
  " (in 'estimate_infections', line 261, column 25 to line 263, column 3)",
  " (in 'estimate_infections', line 261, column 2 to line 263, column 3)",
  " (in 'estimate_infections', line 265, column 4 to column 30)",
  " (in 'estimate_infections', line 264, column 16 to line 266, column 3)",
  " (in 'estimate_infections', line 264, column 2 to line 266, column 3)",
  " (in 'estimate_infections', line 267, column 2 to column 14)",
  " (in 'estimate_infections', line 257, column 46 to line 268, column 1)",
  " (in 'estimate_infections', line 272, column 9 to column 10)",
  " (in 'estimate_infections', line 272, column 2 to column 20)",
  " (in 'estimate_infections', line 273, column 9 to column 10)",
  " (in 'estimate_infections', line 273, column 2 to column 20)",
  " (in 'estimate_infections', line 274, column 2 to column 30)",
  " (in 'estimate_infections', line 275, column 9 to column 20)",
  " (in 'estimate_infections', line 275, column 2 to column 60)",
  " (in 'estimate_infections', line 276, column 2 to column 36)",
  " (in 'estimate_infections', line 284, column 6 to column 74)",
  " (in 'estimate_infections', line 283, column 17 to line 285, column 5)",
  " (in 'estimate_infections', line 283, column 4 to line 285, column 5)",
  " (in 'estimate_infections', line 282, column 23 to line 286, column 3)",
  " (in 'estimate_infections', line 282, column 8 to line 286, column 3)",
  " (in 'estimate_infections', line 280, column 6 to column 70)",
  " (in 'estimate_infections', line 279, column 17 to line 281, column 5)",
  " (in 'estimate_infections', line 279, column 4 to line 281, column 5)",
  " (in 'estimate_infections', line 278, column 17 to line 282, column 3)",
  " (in 'estimate_infections', line 278, column 2 to line 286, column 3)",
  " (in 'estimate_infections', line 287, column 2 to column 27)",
  " (in 'estimate_infections', line 288, column 2 to column 35)",
  " (in 'estimate_infections', line 289, column 2 to column 16)",
  " (in 'estimate_infections', line 271, column 49 to line 290, column 1)",
  " (in 'estimate_infections', line 298, column 4 to column 67)",
  " (in 'estimate_infections', line 298, column 59 to column 65)",
  " (in 'estimate_infections', line 298, column 51 to column 57)",
  " (in 'estimate_infections', line 297, column 9 to line 299, column 3)",
  " (in 'estimate_infections', line 296, column 4 to column 60)",
  " (in 'estimate_infections', line 296, column 52 to column 58)",
  " (in 'estimate_infections', line 296, column 44 to column 50)",
  " (in 'estimate_infections', line 295, column 20 to line 297, column 3)",
  " (in 'estimate_infections', line 295, column 2 to line 299, column 3)",
  " (in 'estimate_infections', line 300, column 2 to column 30)",
  " (in 'estimate_infections', line 301, column 2 to column 21)",
  " (in 'estimate_infections', line 294, column 66 to line 302, column 1)",
  " (in 'estimate_infections', line 308, column 2 to column 38)",
  " (in 'estimate_infections', line 309, column 2 to column 15)",
  " (in 'estimate_infections', line 310, column 2 to column 33)",
  " (in 'estimate_infections', line 312, column 9 to column 10)",
  " (in 'estimate_infections', line 312, column 2 to column 34)",
  " (in 'estimate_infections', line 313, column 9 to column 10)",
  " (in 'estimate_infections', line 313, column 2 to column 34)",
  " (in 'estimate_infections', line 314, column 9 to column 10)",
  " (in 'estimate_infections', line 314, column 2 to column 14)",
  " (in 'estimate_infections', line 319, column 8 to column 23)",
  " (in 'estimate_infections', line 320, column 8 to column 33)",
  " (in 'estimate_infections', line 318, column 18 to line 321, column 7)",
  " (in 'estimate_infections', line 318, column 6 to line 321, column 7)",
  " (in 'estimate_infections', line 317, column 19 to line 322, column 5)",
  " (in 'estimate_infections', line 317, column 4 to line 322, column 5)",
  " (in 'estimate_infections', line 323, column 4 to column 28)",
  " (in 'estimate_infections', line 316, column 12 to line 324, column 3)",
  " (in 'estimate_infections', line 316, column 2 to line 324, column 3)",
  " (in 'estimate_infections', line 334, column 6 to column 31)",
  " (in 'estimate_infections', line 335, column 6 to column 30)",
  " (in 'estimate_infections', line 333, column 9 to line 336, column 5)",
  " (in 'estimate_infections', line 328, column 6 to column 25)",
  " (in 'estimate_infections', line 331, column 8 to column 61)",
  " (in 'estimate_infections', line 330, column 20 to line 332, column 7)",
  " (in 'estimate_infections', line 330, column 6 to line 332, column 7)",
  " (in 'estimate_infections', line 327, column 20 to line 333, column 5)",
  " (in 'estimate_infections', line 327, column 4 to line 336, column 5)",
  " (in 'estimate_infections', line 326, column 12 to line 337, column 3)",
  " (in 'estimate_infections', line 326, column 2 to line 337, column 3)",
  " (in 'estimate_infections', line 339, column 2 to column 37)",
  " (in 'estimate_infections', line 340, column 2 to column 13)",
  " (in 'estimate_infections', line 341, column 2 to column 12)",
  " (in 'estimate_infections', line 306, column 58 to line 342, column 1)",
  " (in 'estimate_infections', line 349, column 2 to column 37)",
  " (in 'estimate_infections', line 352, column 4 to column 36)",
  " (in 'estimate_infections', line 352, column 32 to column 33)",
  " (in 'estimate_infections', line 353, column 4 to column 37)",
  " (in 'estimate_infections', line 351, column 16 to line 354, column 3)",
  " (in 'estimate_infections', line 351, column 2 to line 354, column 3)",
  " (in 'estimate_infections', line 356, column 2 to column 53)",
  " (in 'estimate_infections', line 358, column 4 to column 47)",
  " (in 'estimate_infections', line 357, column 24 to line 359, column 3)",
  " (in 'estimate_infections', line 357, column 2 to line 359, column 3)",
  " (in 'estimate_infections', line 347, column 30 to line 360, column 1)",
  " (in 'estimate_infections', line 366, column 2 to column 43)",
  " (in 'estimate_infections', line 370, column 2 to column 65)",
  " (in 'estimate_infections', line 372, column 2 to column 39)",
  " (in 'estimate_infections', line 374, column 2 to column 58)",
  " (in 'estimate_infections', line 376, column 2 to line 378, column 4)",
  " (in 'estimate_infections', line 379, column 2 to column 18)",
  " (in 'estimate_infections', line 365, column 55 to line 380, column 1)",
  " (in 'estimate_infections', line 386, column 2 to column 28)",
  " (in 'estimate_infections', line 387, column 2 to column 20)",
  " (in 'estimate_infections', line 388, column 2 to column 19)",
  " (in 'estimate_infections', line 389, column 9 to column 11)",
  " (in 'estimate_infections', line 389, column 2 to column 20)",
  " (in 'estimate_infections', line 390, column 2 to column 18)",
  " (in 'estimate_infections', line 391, column 9 to column 10)",
  " (in 'estimate_infections', line 391, column 2 to column 42)",
  " (in 'estimate_infections', line 392, column 9 to column 11)",
  " (in 'estimate_infections', line 392, column 2 to column 28)",
  " (in 'estimate_infections', line 393, column 9 to column 11)",
  " (in 'estimate_infections', line 393, column 2 to column 28)",
  " (in 'estimate_infections', line 395, column 2 to column 45)",
  " (in 'estimate_infections', line 397, column 4 to column 41)",
  " (in 'estimate_infections', line 399, column 6 to column 49)",
  " (in 'estimate_infections', line 398, column 21 to line 400, column 5)",
  " (in 'estimate_infections', line 398, column 4 to line 400, column 5)",
  " (in 'estimate_infections', line 396, column 15 to line 401, column 3)",
  " (in 'estimate_infections', line 396, column 2 to line 401, column 3)",
  " (in 'estimate_infections', line 404, column 4 to column 47)",
  " (in 'estimate_infections', line 403, column 11 to line 405, column 3)",
  " (in 'estimate_infections', line 403, column 2 to line 405, column 3)",
  " (in 'estimate_infections', line 408, column 4 to column 78)",
  " (in 'estimate_infections', line 414, column 6 to column 53)",
  " (in 'estimate_infections', line 413, column 9 to line 415, column 5)",
  " (in 'estimate_infections', line 410, column 6 to column 80)",
  " (in 'estimate_infections', line 411, column 6 to column 51)",
  " (in 'estimate_infections', line 412, column 6 to column 73)",
  " (in 'estimate_infections', line 409, column 24 to line 413, column 5)",
  " (in 'estimate_infections', line 409, column 4 to line 415, column 5)",
  " (in 'estimate_infections', line 417, column 6 to column 70)",
  " (in 'estimate_infections', line 416, column 23 to line 418, column 5)",
  " (in 'estimate_infections', line 416, column 4 to line 418, column 5)",
  " (in 'estimate_infections', line 407, column 18 to line 419, column 3)",
  " (in 'estimate_infections', line 407, column 2 to line 419, column 3)",
  " (in 'estimate_infections', line 420, column 2 to column 21)",
  " (in 'estimate_infections', line 384, column 44 to line 421, column 1)",
  " (in 'estimate_infections', line 425, column 2 to column 38)",
  " (in 'estimate_infections', line 426, column 9 to column 10)",
  " (in 'estimate_infections', line 426, column 2 to column 45)",
  " (in 'estimate_infections', line 440, column 4 to column 44)",
  " (in 'estimate_infections', line 439, column 7 to line 441, column 3)",
  " (in 'estimate_infections', line 428, column 11 to column 12)",
  " (in 'estimate_infections', line 428, column 4 to column 37)",
  " (in 'estimate_infections', line 434, column 6 to column 70)",
  " (in 'estimate_infections', line 436, column 8 to column 57)",
  " (in 'estimate_infections', line 435, column 21 to line 437, column 7)",
  " (in 'estimate_infections', line 435, column 6 to line 437, column 7)",
  " (in 'estimate_infections', line 433, column 26 to line 438, column 5)",
  " (in 'estimate_infections', line 433, column 10 to line 438, column 5)",
  " (in 'estimate_infections', line 432, column 5 to column 41)",
  " (in 'estimate_infections', line 431, column 26 to line 433, column 5)",
  " (in 'estimate_infections', line 431, column 10 to line 438, column 5)",
  " (in 'estimate_infections', line 430, column 6 to column 59)",
  " (in 'estimate_infections', line 429, column 20 to line 431, column 5)",
  " (in 'estimate_infections', line 429, column 4 to line 438, column 5)",
  " (in 'estimate_infections', line 427, column 13 to line 439, column 3)",
  " (in 'estimate_infections', line 427, column 2 to line 441, column 3)",
  " (in 'estimate_infections', line 442, column 2 to column 21)",
  " (in 'estimate_infections', line 424, column 40 to line 443, column 1)",
  " (in 'estimate_infections', line 447, column 2 to column 32)",
  " (in 'estimate_infections', line 448, column 2 to column 32)",
  " (in 'estimate_infections', line 450, column 9 to column 11)",
  " (in 'estimate_infections', line 450, column 2 to column 41)",
  " (in 'estimate_infections', line 451, column 9 to column 10)",
  " (in 'estimate_infections', line 451, column 2 to column 27)",
  " (in 'estimate_infections', line 454, column 4 to column 67)",
  " (in 'estimate_infections', line 452, column 17 to line 455, column 4)",
  " (in 'estimate_infections', line 452, column 2 to line 455, column 4)",
  " (in 'estimate_infections', line 456, column 2 to column 25)",
  " (in 'estimate_infections', line 446, column 82 to line 457, column 1)",
  " (in 'estimate_infections', line 461, column 2 to column 32)",
  " (in 'estimate_infections', line 462, column 9 to column 10)",
  " (in 'estimate_infections', line 462, column 2 to column 27)",
  " (in 'estimate_infections', line 463, column 2 to column 38)",
  " (in 'estimate_infections', line 464, column 2 to column 25)",
  " (in 'estimate_infections', line 460, column 48 to line 465, column 1)",
  " (in 'estimate_infections', line 468, column 2 to column 32)",
  " (in 'estimate_infections', line 469, column 9 to column 10)",
  " (in 'estimate_infections', line 469, column 2 to column 36)",
  " (in 'estimate_infections', line 471, column 2 to column 54)",
  " (in 'estimate_infections', line 472, column 2 to column 34)",
  " (in 'estimate_infections', line 477, column 4 to column 60)",
  " (in 'estimate_infections', line 476, column 9 to line 478, column 3)",
  " (in 'estimate_infections', line 475, column 4 to column 60)",
  " (in 'estimate_infections', line 474, column 19 to line 476, column 3)",
  " (in 'estimate_infections', line 474, column 2 to line 478, column 3)",
  " (in 'estimate_infections', line 479, column 2 to column 24)",
  " (in 'estimate_infections', line 467, column 71 to line 480, column 1)",
  " (in 'estimate_infections', line 485, column 2 to column 49)",
  " (in 'estimate_infections', line 489, column 6 to column 63)",
  " (in 'estimate_infections', line 487, column 30 to line 490, column 5)",
  " (in 'estimate_infections', line 487, column 4 to line 490, column 5)",
  " (in 'estimate_infections', line 493, column 6 to column 57)",
  " (in 'estimate_infections', line 491, column 28 to line 494, column 5)",
  " (in 'estimate_infections', line 491, column 4 to line 494, column 5)",
  " (in 'estimate_infections', line 486, column 18 to line 495, column 3)",
  " (in 'estimate_infections', line 486, column 2 to line 495, column 3)",
  " (in 'estimate_infections', line 484, column 73 to line 496, column 1)",
  " (in 'estimate_infections', line 501, column 2 to column 48)",
  " (in 'estimate_infections', line 502, column 9 to column 10)",
  " (in 'estimate_infections', line 502, column 2 to column 24)",
  " (in 'estimate_infections', line 503, column 8 to column 9)",
  " (in 'estimate_infections', line 503, column 2 to column 25)",
  " (in 'estimate_infections', line 520, column 4 to column 38)",
  " (in 'estimate_infections', line 521, column 4 to column 22)",
  " (in 'estimate_infections', line 519, column 9 to line 522, column 3)",
  " (in 'estimate_infections', line 505, column 4 to column 34)",
  " (in 'estimate_infections', line 506, column 4 to column 14)",
  " (in 'estimate_infections', line 507, column 4 to column 24)",
  " (in 'estimate_infections', line 508, column 4 to column 35)",
  " (in 'estimate_infections', line 511, column 8 to column 47)",
  " (in 'estimate_infections', line 510, column 27 to line 512, column 7)",
  " (in 'estimate_infections', line 510, column 6 to line 512, column 7)",
  " (in 'estimate_infections', line 514, column 8 to column 25)",
  " (in 'estimate_infections', line 513, column 44 to line 515, column 7)",
  " (in 'estimate_infections', line 513, column 6 to line 515, column 7)",
  " (in 'estimate_infections', line 516, column 6 to column 13)",
  " (in 'estimate_infections', line 509, column 39 to line 517, column 5)",
  " (in 'estimate_infections', line 509, column 4 to line 517, column 5)",
  " (in 'estimate_infections', line 518, column 4 to column 33)",
  " (in 'estimate_infections', line 504, column 18 to line 519, column 3)",
  " (in 'estimate_infections', line 504, column 2 to line 522, column 3)",
  " (in 'estimate_infections', line 539, column 6 to column 63)",
  " (in 'estimate_infections', line 538, column 11 to line 540, column 5)",
  " (in 'estimate_infections', line 537, column 6 to column 39)",
  " (in 'estimate_infections', line 536, column 21 to line 538, column 5)",
  " (in 'estimate_infections', line 536, column 4 to line 540, column 5)",
  " (in 'estimate_infections', line 535, column 9 to line 541, column 3)",
  " (in 'estimate_infections', line 524, column 4 to column 78)",
  " (in 'estimate_infections', line 526, column 6 to column 59)",
  " (in 'estimate_infections', line 526, column 55 to column 56)",
  " (in 'estimate_infections', line 525, column 20 to line 527, column 5)",
  " (in 'estimate_infections', line 525, column 4 to line 527, column 5)",
  " (in 'estimate_infections', line 531, column 6 to line 533, column 17)",
  " (in 'estimate_infections', line 530, column 11 to line 534, column 5)",
  " (in 'estimate_infections', line 529, column 6 to column 58)",
  " (in 'estimate_infections', line 528, column 21 to line 530, column 5)",
  " (in 'estimate_infections', line 528, column 4 to line 534, column 5)",
  " (in 'estimate_infections', line 523, column 18 to line 535, column 3)",
  " (in 'estimate_infections', line 523, column 2 to line 541, column 3)",
  " (in 'estimate_infections', line 500, column 60 to line 542, column 1)",
  " (in 'estimate_infections', line 546, column 2 to column 32)",
  " (in 'estimate_infections', line 547, column 9 to column 10)",
  " (in 'estimate_infections', line 547, column 2 to column 20)",
  " (in 'estimate_infections', line 555, column 4 to column 54)",
  " (in 'estimate_infections', line 557, column 6 to column 83)",
  " (in 'estimate_infections', line 556, column 19 to line 558, column 5)",
  " (in 'estimate_infections', line 556, column 4 to line 558, column 5)",
  " (in 'estimate_infections', line 554, column 9 to line 559, column 3)",
  " (in 'estimate_infections', line 552, column 6 to column 64)",
  " (in 'estimate_infections', line 551, column 19 to line 553, column 5)",
  " (in 'estimate_infections', line 551, column 4 to line 553, column 5)",
  " (in 'estimate_infections', line 550, column 23 to line 554, column 3)",
  " (in 'estimate_infections', line 550, column 2 to line 559, column 3)",
  " (in 'estimate_infections', line 560, column 2 to column 18)",
  " (in 'estimate_infections', line 545, column 73 to line 561, column 1)",
  " (in 'estimate_infections', line 564, column 2 to column 32)",
  " (in 'estimate_infections', line 565, column 8 to column 9)",
  " (in 'estimate_infections', line 565, column 2 to column 31)",
  " (in 'estimate_infections', line 566, column 2 to column 24)",
  " (in 'estimate_infections', line 568, column 4 to column 49)",
  " (in 'estimate_infections', line 567, column 18 to line 569, column 3)",
  " (in 'estimate_infections', line 567, column 2 to line 569, column 3)",
  " (in 'estimate_infections', line 579, column 8 to column 97)",
  " (in 'estimate_infections', line 578, column 13 to line 580, column 7)",
  " (in 'estimate_infections', line 577, column 8 to column 78)",
  " (in 'estimate_infections', line 576, column 28 to line 578, column 7)",
  " (in 'estimate_infections', line 576, column 6 to line 580, column 7)",
  " (in 'estimate_infections', line 574, column 11 to line 581, column 5)",
  " (in 'estimate_infections', line 573, column 6 to column 29)",
  " (in 'estimate_infections', line 572, column 27 to line 574, column 5)",
  " (in 'estimate_infections', line 572, column 4 to line 581, column 5)",
  " (in 'estimate_infections', line 571, column 17 to line 582, column 3)",
  " (in 'estimate_infections', line 571, column 2 to line 582, column 3)",
  " (in 'estimate_infections', line 583, column 2 to column 26)",
  " (in 'estimate_infections', line 563, column 77 to line 584, column 1)",
  " (in 'estimate_infections', line 589, column 2 to column 35)",
  " (in 'estimate_infections', line 590, column 2 to column 28)",
  " (in 'estimate_infections', line 591, column 9 to column 11)",
  " (in 'estimate_infections', line 591, column 2 to column 15)",
  " (in 'estimate_infections', line 592, column 9 to column 11)",
  " (in 'estimate_infections', line 592, column 2 to column 16)",
  " (in 'estimate_infections', line 593, column 9 to column 11)",
  " (in 'estimate_infections', line 593, column 2 to column 51)",
  " (in 'estimate_infections', line 596, column 4 to line 598, column 6)",
  " (in 'estimate_infections', line 599, column 4 to column 60)",
  " (in 'estimate_infections', line 595, column 18 to line 600, column 3)",
  " (in 'estimate_infections', line 595, column 2 to line 600, column 3)",
  " (in 'estimate_infections', line 612, column 4 to column 11)",
  " (in 'estimate_infections', line 611, column 7 to line 613, column 3)",
  " (in 'estimate_infections', line 603, column 6 to column 22)",
  " (in 'estimate_infections', line 604, column 6 to column 16)",
  " (in 'estimate_infections', line 606, column 8 to column 22)",
  " (in 'estimate_infections', line 607, column 8 to column 20)",
  " (in 'estimate_infections', line 605, column 56 to line 608, column 7)",
  " (in 'estimate_infections', line 605, column 6 to line 608, column 7)",
  " (in 'estimate_infections', line 609, column 6 to column 29)",
  " (in 'estimate_infections', line 602, column 20 to line 610, column 5)",
  " (in 'estimate_infections', line 602, column 4 to line 610, column 5)",
  " (in 'estimate_infections', line 601, column 14 to line 611, column 3)",
  " (in 'estimate_infections', line 601, column 2 to line 613, column 3)",
  " (in 'estimate_infections', line 614, column 2 to column 13)",
  " (in 'estimate_infections', line 588, column 51 to line 615, column 1)",
  " (in 'estimate_infections', line 619, column 2 to column 35)",
  " (in 'estimate_infections', line 620, column 2 to column 28)",
  " (in 'estimate_infections', line 621, column 9 to column 10)",
  " (in 'estimate_infections', line 621, column 2 to column 38)",
  " (in 'estimate_infections', line 622, column 9 to column 11)",
  " (in 'estimate_infections', line 622, column 2 to column 84)",
  " (in 'estimate_infections', line 623, column 2 to column 17)",
  " (in 'estimate_infections', line 618, column 61 to line 624, column 1)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__, const int&
                      len, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_to_report(const T0__& infections_arg__, const T1__&
                   delay_rev_pmf_arg__, const int& seeding_time,
                   std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
discretised_pmf(const T0__& params_arg__, const int& n, const int& dist,
                std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
reverse_mf(const T0__& pmf_arg__, std::ostream* pstream__);
Eigen::Matrix<double,-1,1>
rev_seq(const int& base, const int& len, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>>
rev_pmf_mean(const T0__& rev_pmf_arg__, const int& base, std::ostream*
             pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, T2__>
rev_pmf_var(const T0__& rev_pmf_arg__, const int& base, const T2__& mean,
            std::ostream* pstream__);
std::vector<int>
get_delay_type_max(const int& delay_types, const std::vector<int>&
                   delay_types_p, const std::vector<int>& delay_types_id,
                   const std::vector<int>& delay_types_groups,
                   const std::vector<int>& delay_max, const std::vector<int>&
                   delay_np_pmf_groups, std::ostream* pstream__);
template <typename T6__, typename T8__,
          stan::require_all_t<stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T6__>,
                stan::base_type_t<T8__>>,-1,1>
get_delay_rev_pmf(const int& delay_id, const int& len,
                  const std::vector<int>& delay_types_p,
                  const std::vector<int>& delay_types_id,
                  const std::vector<int>& delay_types_groups,
                  const std::vector<int>& delay_max, const T6__&
                  delay_np_pmf_arg__, const std::vector<int>&
                  delay_np_pmf_groups, const T8__& delay_params_arg__,
                  const std::vector<int>& delay_params_groups,
                  const std::vector<int>& delay_dist, const int&
                  left_truncate, const int& reverse_pmf, const int&
                  cumulative, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
void
delays_lp(const T0__& delay_params_arg__, const T1__&
          delay_params_mean_arg__, const T2__& delay_params_sd_arg__,
          const std::vector<int>& delay_params_groups,
          const std::vector<int>& delay_dist, const std::vector<int>& weight,
          T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
normal_lb_rng(const T0__& mu_arg__, const T1__& sigma_arg__, const T2__&
              lb_arg__, RNG& base_rng__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
lambda(const T0__& L, const int& m, std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T2__>>,-1,1>
phi(const T0__& L, const int& m, const T2__& x_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
spd_se(const T0__& alpha, const T1__& rho, const T2__& w, std::ostream*
       pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
spd_matern(const T0__& alpha, const T1__& rho, const T2__& w, std::ostream*
           pstream__);
int
setup_noise(const int& ot_h, const int& t, const int& horizon, const int&
            estimate_r, const int& stationary, const int& future_fixed,
            const int& fixed_from, std::ostream* pstream__);
template <typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__>,-1,-1>
setup_gp(const int& M, const T1__& L, const int& dimension, std::ostream*
         pstream__);
template <typename T0__, typename T2__, typename T3__, typename T4__,
          typename T5__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__, T3__, T4__,
                stan::base_type_t<T5__>>,-1,1>
update_gp(const T0__& PHI_arg__, const int& M, const T2__& L, const T3__&
          alpha, const T4__& rho, const T5__& eta_arg__, const int& type,
          std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>* = nullptr>
void
gaussian_process_lp(const T0__& rho, const T1__& alpha, const T2__&
                    eta_arg__, const T3__& ls_meanlog, const T4__& ls_sdlog,
                    const T5__& ls_min, const T6__& ls_max, const T7__&
                    alpha_sd, T_lp__& lp__, T_lp_accum__& lp_accum__,
                    std::ostream* pstream__);
template <typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>, T4__>,-1,1>
update_Rt(const int& t, const T1__& log_R, const T2__& noise_arg__,
          const std::vector<int>& bps, const std::vector<T4__>& bp_effects,
          const int& stationary, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T7__, typename T8__,
          typename T9__, typename T10__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>>* = nullptr>
void
rt_lp(const T0__& log_R_arg__, const std::vector<T1__>& initial_infections,
      const std::vector<T2__>& initial_growth, const std::vector<T3__>&
      bp_effects, const std::vector<T4__>& bp_sd, const int& bp_n, const int&
      seeding_time, const T7__& r_logmean, const T8__& r_logsd, const T9__&
      prior_infections, const T10__& prior_growth, T_lp__& lp__,
      T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>>
update_infectiousness(const T0__& infections_arg__, const T1__&
                      gt_rev_pmf_arg__, const int& seeding_time, const int&
                      index, std::ostream* pstream__);
template <typename T0__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>, T3__, T4__>,-1,1>
generate_infections(const T0__& oR_arg__, const int& uot, const T2__&
                    gt_rev_pmf_arg__, const std::vector<T3__>&
                    initial_infections, const std::vector<T4__>&
                    initial_growth, const int& pop, const int& ht,
                    std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
deconvolve_infections(const T0__& shifted_cases_arg__, const T1__&
                      noise_arg__, const int& fixed, const int& prior,
                      std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
day_of_week_effect(const T0__& reports_arg__, const std::vector<int>&
                   day_of_week, const T2__& effect_arg__, std::ostream*
                   pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs, std::ostream*
          pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
truncate(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
         const int& reconstruct, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
void
truncation_lp(const std::vector<T0__>& truncation_mean,
              const std::vector<T1__>& truncation_sd,
              const std::vector<T2__>& trunc_mean_mean,
              const std::vector<T3__>& trunc_mean_sd,
              const std::vector<T4__>& trunc_sd_mean,
              const std::vector<T5__>& trunc_sd_sd, T_lp__& lp__,
              T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <bool propto__, typename T2__, typename T3__, typename T4__,
          typename T5__, typename T7__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T7__>>* = nullptr>
void
report_lp(const std::vector<int>& cases, const std::vector<int>& cases_time,
          const T2__& reports_arg__, const std::vector<T3__>& rep_phi,
          const T4__& phi_mean, const T5__& phi_sd, const int& model_type,
          const T7__& weight, const int& accumulate, T_lp__& lp__,
          T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>, T2__, T4__>,-1,1>
report_log_lik(const std::vector<int>& cases, const T1__& reports_arg__,
               const std::vector<T2__>& rep_phi, const int& model_type,
               const T4__& weight, std::ostream* pstream__);
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
std::vector<int>
report_rng(const T0__& reports_arg__, const std::vector<T1__>& rep_phi,
           const int& model_type, RNG& base_rng__, std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
calculate_Rt(const T0__& infections_arg__, const int& seeding_time,
             const T2__& gt_rev_pmf_arg__, const int& smooth, std::ostream*
             pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
calculate_growth(const T0__& infections_arg__, const int& seeding_time,
                 std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__, const int&
                      len, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  const auto& y = stan::math::to_ref(y_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int xlen = std::numeric_limits<int>::min();
    current_statement__ = 213;
    xlen = stan::math::num_elements(x);
    int ylen = std::numeric_limits<int>::min();
    current_statement__ = 214;
    ylen = stan::math::num_elements(y);
    current_statement__ = 215;
    stan::math::validate_non_negative_index("z", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> z =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 219;
    if (stan::math::logical_lte((xlen + ylen), len)) {
      current_statement__ = 217;
      std::stringstream errmsg_stream__;
      stan::math::stan_print(&errmsg_stream__,
        "convolve_with_rev_pmf: len is longer then x and y combined");
      throw std::domain_error(errmsg_stream__.str());
    }
    current_statement__ = 222;
    for (int s = 1; s <= len; ++s) {
      current_statement__ = 220;
      stan::model::assign(z,
        stan::math::dot_product(
          stan::model::rvalue(x, "x",
            stan::model::index_min_max(stan::math::max(1, ((s - ylen) + 1)),
              stan::math::min(s, xlen))),
          stan::model::rvalue(y, "y",
            stan::model::index_min_max(stan::math::max(1, ((ylen - s) + 1)),
              stan::math::min(ylen, ((ylen + xlen) - s))))),
        "assigning variable z", stan::model::index_uni(s));
    }
    current_statement__ = 223;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_to_report(const T0__& infections_arg__, const T1__&
                   delay_rev_pmf_arg__, const int& seeding_time,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& infections = stan::math::to_ref(infections_arg__);
  const auto& delay_rev_pmf = stan::math::to_ref(delay_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 225;
    t = stan::math::num_elements(infections);
    current_statement__ = 226;
    stan::math::validate_non_negative_index("reports", "t - seeding_time", (t
      - seeding_time));
    Eigen::Matrix<local_scalar_t__,-1,1> reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((t - seeding_time),
        DUMMY_VAR__);
    current_statement__ = 228;
    stan::math::validate_non_negative_index("unobs_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> unobs_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 229;
    stan::model::assign(unobs_reports, infections,
      "assigning variable unobs_reports");
    int delays = std::numeric_limits<int>::min();
    current_statement__ = 230;
    delays = stan::math::num_elements(delay_rev_pmf);
    current_statement__ = 236;
    if (delays) {
      current_statement__ = 233;
      stan::model::assign(unobs_reports,
        convolve_with_rev_pmf(stan::model::deep_copy(unobs_reports),
          delay_rev_pmf, t, pstream__), "assigning variable unobs_reports");
      current_statement__ = 234;
      stan::model::assign(reports,
        stan::model::rvalue(unobs_reports, "unobs_reports",
          stan::model::index_min_max((seeding_time + 1), t)),
        "assigning variable reports");
    } else {
      current_statement__ = 231;
      stan::model::assign(reports,
        stan::model::rvalue(infections, "infections",
          stan::model::index_min_max((seeding_time + 1), t)),
        "assigning variable reports");
    }
    current_statement__ = 237;
    return reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
discretised_pmf(const T0__& params_arg__, const int& n, const int& dist,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& params = stan::math::to_ref(params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 239;
    stan::math::validate_non_negative_index("lpmf", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> lpmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 241;
    stan::math::validate_non_negative_index("upper_lcdf", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> upper_lcdf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 254;
    if (stan::math::logical_eq(dist, 0)) {
      current_statement__ = 252;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 250;
        stan::model::assign(upper_lcdf,
          stan::math::lognormal_lcdf(i,
            stan::model::rvalue(params, "params", stan::model::index_uni(1)),
            stan::model::rvalue(params, "params", stan::model::index_uni(2))),
          "assigning variable upper_lcdf", stan::model::index_uni(i));
      }
    } else {
      current_statement__ = 249;
      if (stan::math::logical_eq(dist, 1)) {
        current_statement__ = 247;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 245;
          stan::model::assign(upper_lcdf,
            stan::math::gamma_lcdf(i,
              stan::model::rvalue(params, "params", stan::model::index_uni(1)),
              stan::model::rvalue(params, "params", stan::model::index_uni(2))),
            "assigning variable upper_lcdf", stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 243;
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "Unknown distribution function provided.");
        throw std::domain_error(errmsg_stream__.str());
      }
    }
    current_statement__ = 264;
    if (stan::math::logical_gt(n, 1)) {
      current_statement__ = 257;
      stan::model::assign(lpmf,
        stan::model::rvalue(upper_lcdf, "upper_lcdf",
          stan::model::index_uni(1)), "assigning variable lpmf",
        stan::model::index_uni(1));
      current_statement__ = 258;
      stan::model::assign(lpmf,
        stan::model::rvalue(upper_lcdf, "upper_lcdf",
          stan::model::index_uni(2)), "assigning variable lpmf",
        stan::model::index_uni(2));
      current_statement__ = 261;
      if (stan::math::logical_gt(n, 2)) {
        current_statement__ = 259;
        stan::model::assign(lpmf,
          stan::math::log_diff_exp(
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max(3, n)),
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max(1, (n - 2)))),
          "assigning variable lpmf", stan::model::index_min_max(3, n));
      }
      current_statement__ = 262;
      stan::model::assign(lpmf,
        stan::math::subtract(stan::model::deep_copy(lpmf),
          stan::math::log_sum_exp(
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max((n - 1), n)))),
        "assigning variable lpmf");
    } else {
      current_statement__ = 255;
      stan::model::assign(lpmf, 0, "assigning variable lpmf",
        stan::model::index_uni(1));
    }
    current_statement__ = 265;
    return stan::math::exp(lpmf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
reverse_mf(const T0__& pmf_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& pmf = stan::math::to_ref(pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int pmf_length = std::numeric_limits<int>::min();
    current_statement__ = 267;
    pmf_length = stan::math::num_elements(pmf);
    current_statement__ = 268;
    stan::math::validate_non_negative_index("rev_pmf", "pmf_length",
      pmf_length);
    Eigen::Matrix<local_scalar_t__,-1,1> rev_pmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(pmf_length, DUMMY_VAR__);
    current_statement__ = 272;
    for (int d = 1; d <= pmf_length; ++d) {
      current_statement__ = 270;
      stan::model::assign(rev_pmf,
        stan::model::rvalue(pmf, "pmf",
          stan::model::index_uni(((pmf_length - d) + 1))),
        "assigning variable rev_pmf", stan::model::index_uni(d));
    }
    current_statement__ = 273;
    return rev_pmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,1>
rev_seq(const int& base, const int& len, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 275;
    stan::math::validate_non_negative_index("seq", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> seq =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 279;
    for (int i = 1; i <= len; ++i) {
      current_statement__ = 277;
      stan::model::assign(seq, ((len + base) - i), "assigning variable seq",
        stan::model::index_uni(i));
    }
    current_statement__ = 280;
    return seq;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
stan::promote_args_t<stan::base_type_t<T0__>>
rev_pmf_mean(const T0__& rev_pmf_arg__, const int& base, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& rev_pmf = stan::math::to_ref(rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int len = std::numeric_limits<int>::min();
    current_statement__ = 282;
    len = stan::math::num_elements(rev_pmf);
    current_statement__ = 283;
    stan::math::validate_non_negative_index("rev_pmf_seq", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> rev_pmf_seq =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 284;
    stan::model::assign(rev_pmf_seq, rev_seq(base, len, pstream__),
      "assigning variable rev_pmf_seq");
    current_statement__ = 285;
    return stan::math::dot_product(rev_pmf_seq, rev_pmf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, T2__>
rev_pmf_var(const T0__& rev_pmf_arg__, const int& base, const T2__& mean,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__>;
  int current_statement__ = 0;
  const auto& rev_pmf = stan::math::to_ref(rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int len = std::numeric_limits<int>::min();
    current_statement__ = 287;
    len = stan::math::num_elements(rev_pmf);
    current_statement__ = 288;
    stan::math::validate_non_negative_index("rev_pmf_seq", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> rev_pmf_seq =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 289;
    stan::model::assign(rev_pmf_seq, rev_seq(base, len, pstream__),
      "assigning variable rev_pmf_seq");
    current_statement__ = 292;
    for (int i = 1; i <= len; ++i) {
      current_statement__ = 290;
      stan::model::assign(rev_pmf_seq,
        stan::math::pow(
          stan::model::rvalue(rev_pmf_seq, "rev_pmf_seq",
            stan::model::index_uni(i)), 2), "assigning variable rev_pmf_seq",
        stan::model::index_uni(i));
    }
    current_statement__ = 293;
    return (stan::math::dot_product(rev_pmf_seq, rev_pmf) -
           stan::math::pow(mean, 2));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
get_delay_type_max(const int& delay_types, const std::vector<int>&
                   delay_types_p, const std::vector<int>& delay_types_id,
                   const std::vector<int>& delay_types_groups,
                   const std::vector<int>& delay_max, const std::vector<int>&
                   delay_np_pmf_groups, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 295;
    stan::math::validate_non_negative_index("ret", "delay_types", delay_types);
    std::vector<int> ret =
      std::vector<int>(delay_types, std::numeric_limits<int>::min());
    current_statement__ = 306;
    for (int i = 1; i <= delay_types; ++i) {
      current_statement__ = 297;
      stan::model::assign(ret, 0, "assigning variable ret",
        stan::model::index_uni(i));
      current_statement__ = 304;
      for (int j =
             stan::model::rvalue(delay_types_groups, "delay_types_groups",
               stan::model::index_uni(i)); j <=
           (stan::model::rvalue(delay_types_groups, "delay_types_groups",
              stan::model::index_uni((i + 1))) - 1); ++j) {
        current_statement__ = 302;
        if (stan::model::rvalue(delay_types_p, "delay_types_p",
              stan::model::index_uni(j))) {
          current_statement__ = 300;
          stan::model::assign(ret,
            (stan::model::rvalue(ret, "ret", stan::model::index_uni(i)) +
            stan::model::rvalue(delay_max, "delay_max",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(j))))), "assigning variable ret",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 298;
          stan::model::assign(ret,
            (stan::model::rvalue(ret, "ret", stan::model::index_uni(i)) +
            ((stan::model::rvalue(delay_np_pmf_groups, "delay_np_pmf_groups",
                stan::model::index_uni(
                  (stan::model::rvalue(delay_types_id, "delay_types_id",
                     stan::model::index_uni(j)) + 1))) -
            stan::model::rvalue(delay_np_pmf_groups, "delay_np_pmf_groups",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(j))))) - 1)),
            "assigning variable ret", stan::model::index_uni(i));
        }
      }
    }
    current_statement__ = 307;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T6__, typename T8__,
          stan::require_all_t<stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T6__>,
                stan::base_type_t<T8__>>,-1,1>
get_delay_rev_pmf(const int& delay_id, const int& len,
                  const std::vector<int>& delay_types_p,
                  const std::vector<int>& delay_types_id,
                  const std::vector<int>& delay_types_groups,
                  const std::vector<int>& delay_max, const T6__&
                  delay_np_pmf_arg__, const std::vector<int>&
                  delay_np_pmf_groups, const T8__& delay_params_arg__,
                  const std::vector<int>& delay_params_groups,
                  const std::vector<int>& delay_dist, const int&
                  left_truncate, const int& reverse_pmf, const int&
                  cumulative, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T6__>,
                             stan::base_type_t<T8__>>;
  int current_statement__ = 0;
  const auto& delay_np_pmf = stan::math::to_ref(delay_np_pmf_arg__);
  const auto& delay_params = stan::math::to_ref(delay_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 309;
    stan::math::validate_non_negative_index("pmf", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> pmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 310;
    stan::model::assign(pmf, stan::math::rep_vector(0, len),
      "assigning variable pmf");
    int current_len = std::numeric_limits<int>::min();
    current_statement__ = 311;
    current_len = 1;
    int new_len = std::numeric_limits<int>::min();
    current_statement__ = 336;
    for (int i =
           stan::model::rvalue(delay_types_groups, "delay_types_groups",
             stan::model::index_uni(delay_id)); i <=
         (stan::model::rvalue(delay_types_groups, "delay_types_groups",
            stan::model::index_uni((delay_id + 1))) - 1); ++i) {
      current_statement__ = 333;
      if (stan::model::rvalue(delay_types_p, "delay_types_p",
            stan::model::index_uni(i))) {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 322;
        start = stan::model::rvalue(delay_params_groups,
                  "delay_params_groups",
                  stan::model::index_uni(
                    stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i))));
        int end = std::numeric_limits<int>::min();
        current_statement__ = 323;
        end = (stan::model::rvalue(delay_params_groups,
                 "delay_params_groups",
                 stan::model::index_uni(
                   (stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i)) + 1)))
          - 1);
        current_statement__ = 324;
        stan::math::validate_non_negative_index("new_variable_pmf",
          "delay_max[delay_types_id[i]] + 1",
          (stan::model::rvalue(delay_max, "delay_max",
             stan::model::index_uni(
               stan::model::rvalue(delay_types_id, "delay_types_id",
                 stan::model::index_uni(i)))) + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> new_variable_pmf =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            delay_max,
                                                            "delay_max",
                                                            stan::model::index_uni(
                                                              stan::model::rvalue(
                                                                delay_types_id,
                                                                "delay_types_id",
                                                                stan::model::index_uni(
                                                                  i)))) + 1),
            DUMMY_VAR__);
        current_statement__ = 325;
        stan::model::assign(new_variable_pmf,
          discretised_pmf(
            stan::model::rvalue(delay_params, "delay_params",
              stan::model::index_min_max(start, end)),
            (stan::model::rvalue(delay_max, "delay_max",
               stan::model::index_uni(
                 stan::model::rvalue(delay_types_id, "delay_types_id",
                   stan::model::index_uni(i)))) + 1),
            stan::model::rvalue(delay_dist, "delay_dist",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(i)))), pstream__),
          "assigning variable new_variable_pmf");
        current_statement__ = 326;
        new_len = (current_len +
          stan::model::rvalue(delay_max, "delay_max",
            stan::model::index_uni(
              stan::model::rvalue(delay_types_id, "delay_types_id",
                stan::model::index_uni(i)))));
        current_statement__ = 331;
        if (stan::math::logical_eq(current_len, 1)) {
          current_statement__ = 329;
          stan::model::assign(pmf, new_variable_pmf,
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        } else {
          current_statement__ = 327;
          stan::model::assign(pmf,
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                stan::model::rvalue(pmf, "pmf",
                  stan::model::index_min_max(1, current_len))),
              reverse_mf(new_variable_pmf, pstream__), new_len, pstream__),
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        }
      } else {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 313;
        start = stan::model::rvalue(delay_np_pmf_groups,
                  "delay_np_pmf_groups",
                  stan::model::index_uni(
                    stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i))));
        int end = std::numeric_limits<int>::min();
        current_statement__ = 314;
        end = (stan::model::rvalue(delay_np_pmf_groups,
                 "delay_np_pmf_groups",
                 stan::model::index_uni(
                   (stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i)) + 1)))
          - 1);
        current_statement__ = 315;
        new_len = ((current_len + end) - start);
        current_statement__ = 320;
        if (stan::math::logical_eq(current_len, 1)) {
          current_statement__ = 318;
          stan::model::assign(pmf,
            stan::model::rvalue(delay_np_pmf, "delay_np_pmf",
              stan::model::index_min_max(start, end)),
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        } else {
          current_statement__ = 316;
          stan::model::assign(pmf,
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                stan::model::rvalue(pmf, "pmf",
                  stan::model::index_min_max(1, current_len))),
              reverse_mf(
                stan::model::rvalue(delay_np_pmf, "delay_np_pmf",
                  stan::model::index_min_max(start, end)), pstream__),
              new_len, pstream__), "assigning variable pmf",
            stan::model::index_min_max(1, new_len));
        }
      }
      current_statement__ = 334;
      current_len = new_len;
    }
    current_statement__ = 339;
    if (left_truncate) {
      current_statement__ = 337;
      stan::model::assign(pmf,
        stan::math::append_row(stan::math::rep_vector(0, left_truncate),
          stan::math::divide(
            stan::model::deep_copy(
              stan::model::rvalue(pmf, "pmf",
                stan::model::index_min_max((left_truncate + 1), len))),
            stan::math::sum(
              stan::model::rvalue(pmf, "pmf",
                stan::model::index_min_max((left_truncate + 1), len))))),
        "assigning variable pmf");
    }
    current_statement__ = 342;
    if (cumulative) {
      current_statement__ = 340;
      stan::model::assign(pmf,
        stan::math::cumulative_sum(stan::model::deep_copy(pmf)),
        "assigning variable pmf");
    }
    current_statement__ = 345;
    if (reverse_pmf) {
      current_statement__ = 343;
      stan::model::assign(pmf,
        reverse_mf(stan::model::deep_copy(pmf), pstream__),
        "assigning variable pmf");
    }
    current_statement__ = 346;
    return pmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
void
delays_lp(const T0__& delay_params_arg__, const T1__&
          delay_params_mean_arg__, const T2__& delay_params_sd_arg__,
          const std::vector<int>& delay_params_groups,
          const std::vector<int>& delay_dist, const std::vector<int>& weight,
          T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& delay_params = stan::math::to_ref(delay_params_arg__);
  const auto& delay_params_mean = stan::math::to_ref(delay_params_mean_arg__);
  const auto& delay_params_sd = stan::math::to_ref(delay_params_sd_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_delays = std::numeric_limits<int>::min();
    current_statement__ = 348;
    n_delays = (stan::math::num_elements(delay_params_groups) - 1);
    current_statement__ = 351;
    if (stan::math::logical_eq(n_delays, 0)) {
      current_statement__ = 349;
      return ;
    }
    current_statement__ = 363;
    for (int d = 1; d <= n_delays; ++d) {
      int start = std::numeric_limits<int>::min();
      current_statement__ = 352;
      start = stan::model::rvalue(delay_params_groups, "delay_params_groups",
                stan::model::index_uni(d));
      int end = std::numeric_limits<int>::min();
      current_statement__ = 353;
      end = (stan::model::rvalue(delay_params_groups, "delay_params_groups",
               stan::model::index_uni((d + 1)))
        - 1);
      current_statement__ = 361;
      for (int s = start; s <= end; ++s) {
        current_statement__ = 359;
        if (stan::math::logical_gt(
              stan::model::rvalue(delay_params_sd, "delay_params_sd",
                stan::model::index_uni(s)), 0)) {
          current_statement__ = 354;
          lp_accum__.add((stan::math::normal_lpdf<false>(
                            stan::model::rvalue(delay_params, "delay_params",
                              stan::model::index_uni(s)),
                            stan::model::rvalue(delay_params_mean,
                              "delay_params_mean", stan::model::index_uni(s)),
                            stan::model::rvalue(delay_params_sd,
                              "delay_params_sd", stan::model::index_uni(s)))
            *
            stan::model::rvalue(weight, "weight", stan::model::index_uni(d))));
          current_statement__ = 357;
          if (stan::math::logical_eq(
                stan::model::rvalue(delay_dist, "delay_dist",
                  stan::model::index_uni(d)), 1)) {
            current_statement__ = 355;
            lp_accum__.add((-stan::math::normal_lccdf(0,
                               stan::model::rvalue(delay_params_mean,
                                 "delay_params_mean",
                                 stan::model::index_uni(s)),
                               stan::model::rvalue(delay_params_sd,
                                 "delay_params_sd", stan::model::index_uni(s)))
              *
              stan::model::rvalue(weight, "weight", stan::model::index_uni(d))));
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
normal_lb_rng(const T0__& mu_arg__, const T1__& sigma_arg__, const T2__&
              lb_arg__, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& lb = stan::math::to_ref(lb_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int len = std::numeric_limits<int>::min();
    current_statement__ = 365;
    len = stan::math::num_elements(mu);
    current_statement__ = 366;
    stan::math::validate_non_negative_index("ret", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> ret =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 372;
    for (int i = 1; i <= len; ++i) {
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 368;
      p = stan::math::normal_cdf(
            stan::model::rvalue(lb, "lb", stan::model::index_uni(i)),
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
            stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)));
      local_scalar_t__ u = DUMMY_VAR__;
      current_statement__ = 369;
      u = stan::math::uniform_rng(p, 1, base_rng__);
      current_statement__ = 370;
      stan::model::assign(ret,
        ((stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)) *
        stan::math::inv_Phi(u)) +
        stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
        "assigning variable ret", stan::model::index_uni(i));
    }
    current_statement__ = 373;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
lambda(const T0__& L, const int& m, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ lam = DUMMY_VAR__;
    current_statement__ = 376;
    lam = stan::math::pow(((m * stan::math::pi()) / (2 * L)), 2);
    current_statement__ = 377;
    return lam;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T2__>>,-1,1>
phi(const T0__& L, const int& m, const T2__& x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 379;
    stan::math::validate_non_negative_index("fi", "rows(x)",
      stan::math::rows(x));
    Eigen::Matrix<local_scalar_t__,-1,1> fi =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(x),
        DUMMY_VAR__);
    current_statement__ = 381;
    stan::model::assign(fi,
      stan::math::multiply((1 / stan::math::sqrt(L)),
        stan::math::sin(
          stan::math::multiply(((m * stan::math::pi()) / (2 * L)),
            stan::math::add(x, L)))), "assigning variable fi");
    current_statement__ = 382;
    return fi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
spd_se(const T0__& alpha, const T1__& rho, const T2__& w, std::ostream*
       pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ S = DUMMY_VAR__;
    current_statement__ = 385;
    S = (((stan::math::pow(alpha, 2) *
      stan::math::sqrt((2 * stan::math::pi()))) * rho) *
      stan::math::exp(((-0.5 * stan::math::pow(rho, 2)) *
        stan::math::pow(w, 2))));
    current_statement__ = 386;
    return S;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
spd_matern(const T0__& alpha, const T1__& rho, const T2__& w, std::ostream*
           pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ S = DUMMY_VAR__;
    current_statement__ = 389;
    S = ((((4 * stan::math::pow(alpha, 2)) *
      stan::math::pow((stan::math::sqrt(3) / rho), 3)) * 1) /
      stan::math::pow((stan::math::pow((stan::math::sqrt(3) / rho), 2) +
        stan::math::pow(w, 2)), 2));
    current_statement__ = 390;
    return S;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
setup_noise(const int& ot_h, const int& t, const int& horizon, const int&
            estimate_r, const int& stationary, const int& future_fixed,
            const int& fixed_from, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int noise_time = std::numeric_limits<int>::min();
    current_statement__ = 392;
    noise_time = (stan::math::logical_gt(estimate_r, 0) ? (stan::math::logical_gt(
                                                             stationary, 0) ? ot_h : (ot_h
      - 1)) : t);
    int noise_terms = std::numeric_limits<int>::min();
    current_statement__ = 393;
    noise_terms = (stan::math::logical_gt(future_fixed, 0) ? ((noise_time -
      horizon) + fixed_from) : noise_time);
    current_statement__ = 394;
    return noise_terms;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, stan::require_all_t<stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T1__>,-1,-1>
setup_gp(const int& M, const T1__& L, const int& dimension, std::ostream*
         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 396;
    stan::math::validate_non_negative_index("time", "dimension", dimension);
    Eigen::Matrix<local_scalar_t__,-1,1> time =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(dimension, DUMMY_VAR__);
    current_statement__ = 398;
    stan::math::validate_non_negative_index("PHI", "dimension", dimension);
    current_statement__ = 399;
    stan::math::validate_non_negative_index("PHI", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,-1> PHI =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(dimension, M,
        DUMMY_VAR__);
    local_scalar_t__ half_dim = DUMMY_VAR__;
    current_statement__ = 401;
    half_dim = (dimension / 2.0);
    current_statement__ = 404;
    for (int s = 1; s <= dimension; ++s) {
      current_statement__ = 402;
      stan::model::assign(time, ((s - half_dim) / half_dim),
        "assigning variable time", stan::model::index_uni(s));
    }
    current_statement__ = 407;
    for (int m = 1; m <= M; ++m) {
      current_statement__ = 405;
      stan::model::assign(PHI, phi(L, m, time, pstream__),
        "assigning variable PHI", stan::model::index_omni(),
        stan::model::index_uni(m));
    }
    current_statement__ = 408;
    return PHI;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__, typename T3__, typename T4__,
          typename T5__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__, T3__, T4__,
                stan::base_type_t<T5__>>,-1,1>
update_gp(const T0__& PHI_arg__, const int& M, const T2__& L, const T3__&
          alpha, const T4__& rho, const T5__& eta_arg__, const int& type,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__, T3__, T4__, stan::base_type_t<T5__>>;
  int current_statement__ = 0;
  const auto& PHI = stan::math::to_ref(PHI_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 410;
    stan::math::validate_non_negative_index("diagSPD", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,1> diagSPD =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
    current_statement__ = 412;
    stan::math::validate_non_negative_index("SPD_eta", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,1> SPD_eta =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
    int noise_terms = std::numeric_limits<int>::min();
    current_statement__ = 414;
    noise_terms = stan::math::rows(PHI);
    current_statement__ = 415;
    stan::math::validate_non_negative_index("noise", "noise_terms",
      noise_terms);
    Eigen::Matrix<local_scalar_t__,-1,1> noise =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(noise_terms,
        DUMMY_VAR__);
    current_statement__ = 416;
    stan::model::assign(noise, stan::math::rep_vector(1e-6, noise_terms),
      "assigning variable noise");
    local_scalar_t__ unit_rho = DUMMY_VAR__;
    current_statement__ = 417;
    unit_rho = (rho / noise_terms);
    current_statement__ = 427;
    if (stan::math::logical_eq(type, 0)) {
      current_statement__ = 425;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 423;
        stan::model::assign(diagSPD,
          stan::math::sqrt(
            spd_se(alpha, unit_rho,
              stan::math::sqrt(lambda(L, m, pstream__)), pstream__)),
          "assigning variable diagSPD", stan::model::index_uni(m));
      }
    } else {
      current_statement__ = 422;
      if (stan::math::logical_eq(type, 1)) {
        current_statement__ = 420;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 418;
          stan::model::assign(diagSPD,
            stan::math::sqrt(
              spd_matern(alpha, unit_rho,
                stan::math::sqrt(lambda(L, m, pstream__)), pstream__)),
            "assigning variable diagSPD", stan::model::index_uni(m));
        }
      }
    }
    current_statement__ = 428;
    stan::model::assign(SPD_eta, stan::math::elt_multiply(diagSPD, eta),
      "assigning variable SPD_eta");
    current_statement__ = 429;
    stan::model::assign(noise,
      stan::math::add(stan::model::deep_copy(noise),
        stan::math::multiply(
          stan::model::rvalue(PHI, "PHI", stan::model::index_omni(),
            stan::model::index_omni()), SPD_eta)), "assigning variable noise");
    current_statement__ = 430;
    return noise;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>*>
void
gaussian_process_lp(const T0__& rho, const T1__& alpha, const T2__&
                    eta_arg__, const T3__& ls_meanlog, const T4__& ls_sdlog,
                    const T5__& ls_min, const T6__& ls_max, const T7__&
                    alpha_sd, T_lp__& lp__, T_lp_accum__& lp_accum__,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__,
                             stan::base_type_t<T2__>, T3__, T4__,
                             stan::promote_args_t<T5__, T6__, T7__>>;
  int current_statement__ = 0;
  const auto& eta = stan::math::to_ref(eta_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 440;
    if (stan::math::logical_gt(ls_sdlog, 0)) {
      current_statement__ = 436;
      lp_accum__.add(stan::math::lognormal_lpdf<propto__>(rho, ls_meanlog,
                       ls_sdlog));
      current_statement__ = 438;
      if (stan::math::logical_lt(rho, ls_min)) {
        current_statement__ = 438;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 437;
        if (stan::math::logical_gt(rho, ls_max)) {
          current_statement__ = 437;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 437;
          lp_accum__.add(-stan::math::log_diff_exp(
                            stan::math::lognormal_lcdf(ls_max, ls_meanlog,
                              ls_sdlog),
                            stan::math::lognormal_lcdf(ls_min, ls_meanlog,
                              ls_sdlog)));
        }
      }
    } else {
      current_statement__ = 432;
      lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(rho, 1.499007,
                       (0.057277 * ls_max)));
      current_statement__ = 434;
      if (stan::math::logical_lt(rho, ls_min)) {
        current_statement__ = 434;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 433;
        if (stan::math::logical_gt(rho, ls_max)) {
          current_statement__ = 433;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 433;
          lp_accum__.add(-stan::math::log_diff_exp(
                            stan::math::inv_gamma_lcdf(ls_max, 1.499007,
                              (0.057277 * ls_max)),
                            stan::math::inv_gamma_lcdf(ls_min, 1.499007,
                              (0.057277 * ls_max))));
        }
      }
    }
    current_statement__ = 441;
    lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, alpha_sd));
    current_statement__ = 442;
    lp_accum__.add(stan::math::std_normal_lpdf<propto__>(eta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>, T4__>,-1,1>
update_Rt(const int& t, const T1__& log_R, const T2__& noise_arg__,
          const std::vector<int>& bps, const std::vector<T4__>& bp_effects,
          const int& stationary, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T2__>, T4__>;
  int current_statement__ = 0;
  const auto& noise = stan::math::to_ref(noise_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int bp_n = std::numeric_limits<int>::min();
    current_statement__ = 444;
    bp_n = stan::math::num_elements(bp_effects);
    int bp_c = std::numeric_limits<int>::min();
    current_statement__ = 445;
    bp_c = 0;
    int gp_n = std::numeric_limits<int>::min();
    current_statement__ = 446;
    gp_n = stan::math::num_elements(noise);
    current_statement__ = 447;
    stan::math::validate_non_negative_index("bp", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> bp =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 448;
    stan::model::assign(bp, stan::math::rep_vector(0, t),
      "assigning variable bp");
    current_statement__ = 449;
    stan::math::validate_non_negative_index("gp", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> gp =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 450;
    stan::model::assign(gp, stan::math::rep_vector(0, t),
      "assigning variable gp");
    current_statement__ = 451;
    stan::math::validate_non_negative_index("R", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> R =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 461;
    if (bp_n) {
      current_statement__ = 458;
      for (int s = 1; s <= t; ++s) {
        current_statement__ = 456;
        if (stan::model::rvalue(bps, "bps", stan::model::index_uni(s))) {
          current_statement__ = 453;
          bp_c = (bp_c +
            stan::model::rvalue(bps, "bps", stan::model::index_uni(s)));
          current_statement__ = 454;
          stan::model::assign(bp,
            stan::model::rvalue(bp_effects, "bp_effects",
              stan::model::index_uni(bp_c)), "assigning variable bp",
            stan::model::index_uni(s));
        }
      }
      current_statement__ = 459;
      stan::model::assign(bp,
        stan::math::cumulative_sum(stan::model::deep_copy(bp)),
        "assigning variable bp");
    }
    current_statement__ = 472;
    if (gp_n) {
      current_statement__ = 470;
      if (stationary) {
        current_statement__ = 465;
        stan::model::assign(gp, noise, "assigning variable gp",
          stan::model::index_min_max(1, gp_n));
        current_statement__ = 468;
        if (stan::math::logical_gt(t, gp_n)) {
          current_statement__ = 466;
          stan::model::assign(gp,
            stan::math::rep_vector(
              stan::model::rvalue(noise, "noise",
                stan::model::index_uni(gp_n)), (t - gp_n)),
            "assigning variable gp",
            stan::model::index_min_max((gp_n + 1), t));
        }
      } else {
        current_statement__ = 462;
        stan::model::assign(gp, noise, "assigning variable gp",
          stan::model::index_min_max(2, (gp_n + 1)));
        current_statement__ = 463;
        stan::model::assign(gp,
          stan::math::cumulative_sum(stan::model::deep_copy(gp)),
          "assigning variable gp");
      }
    }
    current_statement__ = 473;
    stan::model::assign(R,
      stan::math::add(stan::math::add(stan::math::rep_vector(log_R, t), bp),
        gp), "assigning variable R");
    current_statement__ = 474;
    stan::model::assign(R, stan::math::exp(stan::model::deep_copy(R)),
      "assigning variable R");
    current_statement__ = 475;
    return R;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T7__, typename T8__,
          typename T9__, typename T10__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>>*>
void
rt_lp(const T0__& log_R_arg__, const std::vector<T1__>& initial_infections,
      const std::vector<T2__>& initial_growth, const std::vector<T3__>&
      bp_effects, const std::vector<T4__>& bp_sd, const int& bp_n, const int&
      seeding_time, const T7__& r_logmean, const T8__& r_logsd, const T9__&
      prior_infections, const T10__& prior_growth, T_lp__& lp__,
      T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T7__, T8__, T9__, T10__>>;
  int current_statement__ = 0;
  const auto& log_R = stan::math::to_ref(log_R_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 477;
    lp_accum__.add(stan::math::normal_lpdf<propto__>(log_R, r_logmean,
                     r_logsd));
    current_statement__ = 482;
    if (stan::math::logical_gt(bp_n, 0)) {
      current_statement__ = 478;
      lp_accum__.add(stan::math::normal_lpdf<propto__>(
                       stan::model::rvalue(bp_sd, "bp_sd",
                         stan::model::index_uni(1)), 0, 0.1));
      current_statement__ = 479;
      if (stan::math::logical_lt(
            stan::model::rvalue(bp_sd, "bp_sd", stan::model::index_uni(1)), 0)) {
        current_statement__ = 479;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 479;
        lp_accum__.add(-stan::math::normal_lccdf(0, 0, 0.1));
      }
      current_statement__ = 480;
      lp_accum__.add(stan::math::normal_lpdf<propto__>(bp_effects, 0,
                       stan::model::rvalue(bp_sd, "bp_sd",
                         stan::model::index_uni(1))));
    }
    current_statement__ = 483;
    lp_accum__.add(stan::math::normal_lpdf<propto__>(initial_infections,
                     prior_infections, 0.2));
    current_statement__ = 486;
    if (stan::math::logical_gt(seeding_time, 1)) {
      current_statement__ = 484;
      lp_accum__.add(stan::math::normal_lpdf<propto__>(initial_growth,
                       prior_growth, 0.2));
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>>
update_infectiousness(const T0__& infections_arg__, const T1__&
                      gt_rev_pmf_arg__, const int& seeding_time, const int&
                      index, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& infections = stan::math::to_ref(infections_arg__);
  const auto& gt_rev_pmf = stan::math::to_ref(gt_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int gt_length = std::numeric_limits<int>::min();
    current_statement__ = 488;
    gt_length = stan::math::num_elements(gt_rev_pmf);
    int inf_start = std::numeric_limits<int>::min();
    current_statement__ = 489;
    inf_start = stan::math::max(1, (((index + seeding_time) - gt_length) + 1));
    int inf_end = std::numeric_limits<int>::min();
    current_statement__ = 490;
    inf_end = (index + seeding_time);
    int pmf_accessed = std::numeric_limits<int>::min();
    current_statement__ = 491;
    pmf_accessed = stan::math::min(gt_length, (index + seeding_time));
    local_scalar_t__ new_inf = DUMMY_VAR__;
    current_statement__ = 492;
    new_inf = stan::math::dot_product(
                stan::model::rvalue(infections, "infections",
                  stan::model::index_min_max(inf_start, inf_end)),
                stan::math::tail(gt_rev_pmf, pmf_accessed));
    current_statement__ = 493;
    return new_inf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>, T3__, T4__>,-1,1>
generate_infections(const T0__& oR_arg__, const int& uot, const T2__&
                    gt_rev_pmf_arg__, const std::vector<T3__>&
                    initial_infections, const std::vector<T4__>&
                    initial_growth, const int& pop, const int& ht,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>, T3__, T4__>;
  int current_statement__ = 0;
  const auto& oR = stan::math::to_ref(oR_arg__);
  const auto& gt_rev_pmf = stan::math::to_ref(gt_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ot = std::numeric_limits<int>::min();
    current_statement__ = 495;
    ot = stan::math::num_elements(oR);
    int nht = std::numeric_limits<int>::min();
    current_statement__ = 496;
    nht = (ot - ht);
    int t = std::numeric_limits<int>::min();
    current_statement__ = 497;
    t = (ot + uot);
    current_statement__ = 498;
    stan::math::validate_non_negative_index("R", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> R =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 499;
    stan::model::assign(R, oR, "assigning variable R");
    local_scalar_t__ exp_adj_Rt = DUMMY_VAR__;
    current_statement__ = 501;
    stan::math::validate_non_negative_index("infections", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> infections =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 502;
    stan::model::assign(infections, stan::math::rep_vector(0, t),
      "assigning variable infections");
    current_statement__ = 503;
    stan::math::validate_non_negative_index("cum_infections", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> cum_infections =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 505;
    stan::math::validate_non_negative_index("infectiousness", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> infectiousness =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 507;
    stan::model::assign(infections,
      stan::math::exp(
        stan::model::rvalue(initial_infections, "initial_infections",
          stan::model::index_uni(1))), "assigning variable infections",
      stan::model::index_uni(1));
    current_statement__ = 513;
    if (stan::math::logical_gt(uot, 1)) {
      local_scalar_t__ growth = DUMMY_VAR__;
      current_statement__ = 508;
      growth = stan::math::exp(
                 stan::model::rvalue(initial_growth, "initial_growth",
                   stan::model::index_uni(1)));
      current_statement__ = 511;
      for (int s = 2; s <= uot; ++s) {
        current_statement__ = 509;
        stan::model::assign(infections,
          (stan::model::rvalue(infections, "infections",
             stan::model::index_uni((s - 1))) * growth),
          "assigning variable infections", stan::model::index_uni(s));
      }
    }
    current_statement__ = 516;
    if (pop) {
      current_statement__ = 514;
      stan::model::assign(cum_infections,
        stan::math::sum(
          stan::model::rvalue(infections, "infections",
            stan::model::index_min_max(1, uot))),
        "assigning variable cum_infections", stan::model::index_uni(1));
    }
    current_statement__ = 529;
    for (int s = 1; s <= ot; ++s) {
      current_statement__ = 517;
      stan::model::assign(infectiousness,
        update_infectiousness(infections, gt_rev_pmf, uot, s, pstream__),
        "assigning variable infectiousness", stan::model::index_uni(s));
      current_statement__ = 524;
      if ((stan::math::primitive_value(pop) &&
          stan::math::primitive_value(stan::math::logical_gt(s, nht)))) {
        current_statement__ = 520;
        exp_adj_Rt = stan::math::exp(
                       ((-stan::model::rvalue(R, "R",
                            stan::model::index_uni(s)) *
                       stan::model::rvalue(infectiousness, "infectiousness",
                         stan::model::index_uni(s))) / (pop -
                       stan::model::rvalue(cum_infections, "cum_infections",
                         stan::model::index_uni(nht)))));
        current_statement__ = 521;
        exp_adj_Rt = (stan::math::logical_gt(exp_adj_Rt, 1) ? 1 : exp_adj_Rt);
        current_statement__ = 522;
        stan::model::assign(infections, ((pop -
          stan::model::rvalue(cum_infections, "cum_infections",
            stan::model::index_uni(s))) * (1 - exp_adj_Rt)),
          "assigning variable infections", stan::model::index_uni((s + uot)));
      } else {
        current_statement__ = 518;
        stan::model::assign(infections,
          (stan::model::rvalue(R, "R", stan::model::index_uni(s)) *
          stan::model::rvalue(infectiousness, "infectiousness",
            stan::model::index_uni(s))), "assigning variable infections",
          stan::model::index_uni((s + uot)));
      }
      current_statement__ = 527;
      if ((stan::math::primitive_value(pop) &&
          stan::math::primitive_value(stan::math::logical_lt(s, ot)))) {
        current_statement__ = 525;
        stan::model::assign(cum_infections,
          (stan::model::rvalue(cum_infections, "cum_infections",
             stan::model::index_uni(s)) +
          stan::model::rvalue(infections, "infections",
            stan::model::index_uni((s + uot)))),
          "assigning variable cum_infections",
          stan::model::index_uni((s + 1)));
      }
    }
    current_statement__ = 530;
    return infections;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
deconvolve_infections(const T0__& shifted_cases_arg__, const T1__&
                      noise_arg__, const int& fixed, const int& prior,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& shifted_cases = stan::math::to_ref(shifted_cases_arg__);
  const auto& noise = stan::math::to_ref(noise_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 532;
    t = stan::math::num_elements(shifted_cases);
    current_statement__ = 533;
    stan::math::validate_non_negative_index("infections", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> infections =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 534;
    stan::model::assign(infections, stan::math::rep_vector(1e-5, t),
      "assigning variable infections");
    current_statement__ = 552;
    if (stan::math::logical_negation(fixed)) {
      current_statement__ = 537;
      stan::math::validate_non_negative_index("exp_noise", "t", t);
      Eigen::Matrix<local_scalar_t__,-1,1> exp_noise =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
      current_statement__ = 538;
      stan::model::assign(exp_noise, stan::math::exp(noise),
        "assigning variable exp_noise");
      current_statement__ = 550;
      if (stan::math::logical_eq(prior, 1)) {
        current_statement__ = 548;
        stan::model::assign(infections,
          stan::math::add(stan::model::deep_copy(infections),
            stan::math::elt_multiply(shifted_cases, exp_noise)),
          "assigning variable infections");
      } else {
        current_statement__ = 547;
        if (stan::math::logical_eq(prior, 0)) {
          current_statement__ = 545;
          stan::model::assign(infections,
            stan::math::add(stan::model::deep_copy(infections), exp_noise),
            "assigning variable infections");
        } else {
          current_statement__ = 544;
          if (stan::math::logical_eq(prior, 2)) {
            current_statement__ = 539;
            stan::model::assign(infections,
              (stan::model::rvalue(infections, "infections",
                 stan::model::index_uni(1)) +
              (stan::model::rvalue(shifted_cases, "shifted_cases",
                 stan::model::index_uni(1)) *
              stan::model::rvalue(exp_noise, "exp_noise",
                stan::model::index_uni(1)))),
              "assigning variable infections", stan::model::index_uni(1));
            current_statement__ = 542;
            for (int i = 2; i <= t; ++i) {
              current_statement__ = 540;
              stan::model::assign(infections,
                (stan::model::rvalue(infections, "infections",
                   stan::model::index_uni((i - 1))) *
                stan::model::rvalue(exp_noise, "exp_noise",
                  stan::model::index_uni(i))),
                "assigning variable infections", stan::model::index_uni(i));
            }
          }
        }
      }
    } else {
      current_statement__ = 535;
      stan::model::assign(infections,
        stan::math::add(stan::model::deep_copy(infections), shifted_cases),
        "assigning variable infections");
    }
    current_statement__ = 553;
    return infections;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
day_of_week_effect(const T0__& reports_arg__, const std::vector<int>&
                   day_of_week, const T2__& effect_arg__, std::ostream*
                   pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  const auto& effect = stan::math::to_ref(effect_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 555;
    t = stan::math::num_elements(reports);
    int wl = std::numeric_limits<int>::min();
    current_statement__ = 556;
    wl = stan::math::num_elements(effect);
    current_statement__ = 557;
    stan::math::validate_non_negative_index("scaled_effect", "wl", wl);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_effect =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(wl, DUMMY_VAR__);
    current_statement__ = 558;
    stan::model::assign(scaled_effect, stan::math::multiply(wl, effect),
      "assigning variable scaled_effect");
    current_statement__ = 559;
    stan::math::validate_non_negative_index("scaled_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 563;
    for (int s = 1; s <= t; ++s) {
      current_statement__ = 561;
      stan::model::assign(scaled_reports,
        (stan::model::rvalue(reports, "reports", stan::model::index_uni(s)) *
        stan::model::rvalue(scaled_effect, "scaled_effect",
          stan::model::index_uni(
            stan::model::rvalue(day_of_week, "day_of_week",
              stan::model::index_uni(s))))),
        "assigning variable scaled_reports", stan::model::index_uni(s));
    }
    current_statement__ = 564;
    return scaled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 566;
    t = stan::math::num_elements(reports);
    current_statement__ = 567;
    stan::math::validate_non_negative_index("scaled_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 569;
    stan::model::assign(scaled_reports,
      stan::math::multiply(reports, frac_obs),
      "assigning variable scaled_reports");
    current_statement__ = 570;
    return scaled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
truncate(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
         const int& reconstruct, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  const auto& trunc_rev_cmf = stan::math::to_ref(trunc_rev_cmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 572;
    t = stan::math::num_elements(reports);
    current_statement__ = 573;
    stan::math::validate_non_negative_index("trunc_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> trunc_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 574;
    stan::model::assign(trunc_reports, reports,
      "assigning variable trunc_reports");
    int trunc_max = std::numeric_limits<int>::min();
    current_statement__ = 575;
    trunc_max = stan::math::min(t, stan::math::num_elements(trunc_rev_cmf));
    int first_t = std::numeric_limits<int>::min();
    current_statement__ = 576;
    first_t = ((t - trunc_max) + 1);
    current_statement__ = 581;
    if (reconstruct) {
      current_statement__ = 579;
      stan::model::assign(trunc_reports,
        stan::math::elt_divide(
          stan::model::deep_copy(
            stan::model::rvalue(trunc_reports, "trunc_reports",
              stan::model::index_min_max(first_t, t))),
          stan::model::rvalue(trunc_rev_cmf, "trunc_rev_cmf",
            stan::model::index_min_max(1, trunc_max))),
        "assigning variable trunc_reports",
        stan::model::index_min_max(first_t, t));
    } else {
      current_statement__ = 577;
      stan::model::assign(trunc_reports,
        stan::math::elt_multiply(
          stan::model::deep_copy(
            stan::model::rvalue(trunc_reports, "trunc_reports",
              stan::model::index_min_max(first_t, t))),
          stan::model::rvalue(trunc_rev_cmf, "trunc_rev_cmf",
            stan::model::index_min_max(1, trunc_max))),
        "assigning variable trunc_reports",
        stan::model::index_min_max(first_t, t));
    }
    current_statement__ = 582;
    return trunc_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
void
truncation_lp(const std::vector<T0__>& truncation_mean,
              const std::vector<T1__>& truncation_sd,
              const std::vector<T2__>& trunc_mean_mean,
              const std::vector<T3__>& trunc_mean_sd,
              const std::vector<T4__>& trunc_sd_mean,
              const std::vector<T5__>& trunc_sd_sd, T_lp__& lp__,
              T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__,
                             stan::promote_args_t<T5__>>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int truncation = std::numeric_limits<int>::min();
    current_statement__ = 584;
    truncation = stan::math::num_elements(truncation_mean);
    current_statement__ = 592;
    if (truncation) {
      current_statement__ = 587;
      if (stan::math::logical_gt(
            stan::model::rvalue(trunc_mean_sd, "trunc_mean_sd",
              stan::model::index_uni(1)), 0)) {
        current_statement__ = 585;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(truncation_mean,
                         trunc_mean_mean, trunc_mean_sd));
      }
      current_statement__ = 590;
      if (stan::math::logical_gt(
            stan::model::rvalue(trunc_sd_sd, "trunc_sd_sd",
              stan::model::index_uni(1)), 0)) {
        current_statement__ = 588;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(truncation_sd,
                         trunc_sd_mean, trunc_sd_sd));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T2__, typename T3__, typename T4__,
          typename T5__, typename T7__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T7__>>*>
void
report_lp(const std::vector<int>& cases, const std::vector<int>& cases_time,
          const T2__& reports_arg__, const std::vector<T3__>& rep_phi,
          const T4__& phi_mean, const T5__& phi_sd, const int& model_type,
          const T7__& weight, const int& accumulate, T_lp__& lp__,
          T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             T3__, T4__, T5__, T7__>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 594;
    n = (stan::math::num_elements(cases_time) - accumulate);
    current_statement__ = 595;
    stan::math::validate_non_negative_index("obs_reports", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> obs_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 597;
    stan::math::validate_non_negative_index("obs_cases", "n", n);
    std::vector<int> obs_cases =
      std::vector<int>(n, std::numeric_limits<int>::min());
    current_statement__ = 617;
    if (accumulate) {
      int t = std::numeric_limits<int>::min();
      current_statement__ = 602;
      t = stan::math::num_elements(reports);
      int i = std::numeric_limits<int>::min();
      current_statement__ = 603;
      i = 0;
      int current_obs = std::numeric_limits<int>::min();
      current_statement__ = 604;
      current_obs = 0;
      current_statement__ = 605;
      stan::model::assign(obs_reports, stan::math::rep_vector(0, n),
        "assigning variable obs_reports");
      current_statement__ = 614;
      while ((stan::math::primitive_value(stan::math::logical_lte(i, t)) &&
             stan::math::primitive_value(
               stan::math::logical_lte(current_obs, n)))) {
        current_statement__ = 608;
        if (stan::math::logical_gt(current_obs, 0)) {
          current_statement__ = 606;
          stan::model::assign(obs_reports,
            (stan::model::rvalue(obs_reports, "obs_reports",
               stan::model::index_uni(current_obs)) +
            stan::model::rvalue(reports, "reports", stan::model::index_uni(i))),
            "assigning variable obs_reports",
            stan::model::index_uni(current_obs));
        }
        current_statement__ = 611;
        if (stan::math::logical_eq(i,
              stan::model::rvalue(cases_time, "cases_time",
                stan::model::index_uni((current_obs + 1))))) {
          current_statement__ = 609;
          current_obs = (current_obs + 1);
        }
        current_statement__ = 612;
        i = (i + 1);
      }
      current_statement__ = 615;
      stan::model::assign(obs_cases,
        stan::model::rvalue(cases, "cases",
          stan::model::index_min_max(2, (n + 1))),
        "assigning variable obs_cases");
    } else {
      current_statement__ = 599;
      stan::model::assign(obs_reports,
        stan::model::rvalue(reports, "reports",
          stan::model::index_multi(cases_time)),
        "assigning variable obs_reports");
      current_statement__ = 600;
      stan::model::assign(obs_cases, cases, "assigning variable obs_cases");
    }
    current_statement__ = 635;
    if (model_type) {
      local_scalar_t__ dispersion = DUMMY_VAR__;
      current_statement__ = 624;
      dispersion = stan::math::inv_square(
                     (stan::math::logical_gt(phi_sd, 0) ? stan::model::rvalue(
                                                            rep_phi,
                                                            "rep_phi",
                                                            stan::model::index_uni(
                                                              model_type)) : phi_mean));
      current_statement__ = 628;
      if (stan::math::logical_gt(phi_sd, 0)) {
        current_statement__ = 625;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(rep_phi, "rep_phi",
                           stan::model::index_uni(model_type)), phi_mean,
                         phi_sd));
        current_statement__ = 626;
        if (stan::math::logical_lt(
              stan::model::rvalue(rep_phi, "rep_phi",
                stan::model::index_uni(model_type)), 0)) {
          current_statement__ = 626;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 626;
          lp_accum__.add(-stan::math::normal_lccdf(0, phi_mean, phi_sd));
        }
      }
      current_statement__ = 633;
      if (stan::math::logical_eq(weight, 1)) {
        current_statement__ = 631;
        lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(obs_cases,
                         obs_reports, dispersion));
      } else {
        current_statement__ = 629;
        lp_accum__.add((stan::math::neg_binomial_2_lpmf<false>(obs_cases,
                          obs_reports, dispersion) * weight));
      }
    } else {
      current_statement__ = 622;
      if (stan::math::logical_eq(weight, 1)) {
        current_statement__ = 620;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(obs_cases,
                         obs_reports));
      } else {
        current_statement__ = 618;
        lp_accum__.add((stan::math::poisson_lpmf<false>(obs_cases,
                          obs_reports) * weight));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>, T2__, T4__>,-1,1>
report_log_lik(const std::vector<int>& cases, const T1__& reports_arg__,
               const std::vector<T2__>& rep_phi, const int& model_type,
               const T4__& weight, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             T2__, T4__>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 637;
    t = stan::math::num_elements(reports);
    current_statement__ = 638;
    stan::math::validate_non_negative_index("log_lik", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 649;
    if (stan::math::logical_eq(model_type, 0)) {
      current_statement__ = 647;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 645;
        stan::model::assign(log_lik,
          (stan::math::poisson_lpmf<false>(
             stan::model::rvalue(cases, "cases", stan::model::index_uni(i)),
             stan::model::rvalue(reports, "reports",
               stan::model::index_uni(i))) * weight),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
    } else {
      local_scalar_t__ dispersion = DUMMY_VAR__;
      current_statement__ = 640;
      dispersion = stan::math::inv_square(
                     stan::model::rvalue(rep_phi, "rep_phi",
                       stan::model::index_uni(model_type)));
      current_statement__ = 643;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 641;
        stan::model::assign(log_lik,
          (stan::math::neg_binomial_2_lpmf<false>(
             stan::model::rvalue(cases, "cases", stan::model::index_uni(i)),
             stan::model::rvalue(reports, "reports",
               stan::model::index_uni(i)), dispersion) * weight),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
    }
    current_statement__ = 650;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>*>
std::vector<int>
report_rng(const T0__& reports_arg__, const std::vector<T1__>& rep_phi,
           const int& model_type, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 652;
    t = stan::math::num_elements(reports);
    current_statement__ = 653;
    stan::math::validate_non_negative_index("sampled_reports", "t", t);
    std::vector<int> sampled_reports =
      std::vector<int>(t, std::numeric_limits<int>::min());
    local_scalar_t__ dispersion = DUMMY_VAR__;
    current_statement__ = 655;
    dispersion = 1e5;
    current_statement__ = 658;
    if (model_type) {
      current_statement__ = 656;
      dispersion = stan::math::inv_square(
                     stan::model::rvalue(rep_phi, "rep_phi",
                       stan::model::index_uni(model_type)));
    }
    current_statement__ = 669;
    for (int s = 1; s <= t; ++s) {
      current_statement__ = 667;
      if (stan::math::logical_lt(
            stan::model::rvalue(reports, "reports", stan::model::index_uni(s)),
            1e-8)) {
        current_statement__ = 665;
        stan::model::assign(sampled_reports, 0,
          "assigning variable sampled_reports", stan::model::index_uni(s));
      } else {
        current_statement__ = 663;
        if (stan::math::logical_gt(dispersion, 1e4)) {
          current_statement__ = 661;
          stan::model::assign(sampled_reports,
            stan::math::poisson_rng(
              (stan::math::logical_gt(
                 stan::model::rvalue(reports, "reports",
                   stan::model::index_uni(s)), 1e8) ? 1e8 : stan::model::rvalue(
                                                              reports,
                                                              "reports",
                                                              stan::model::index_uni(
                                                                s))),
              base_rng__), "assigning variable sampled_reports",
            stan::model::index_uni(s));
        } else {
          current_statement__ = 659;
          stan::model::assign(sampled_reports,
            stan::math::neg_binomial_2_rng(
              (stan::math::logical_gt(
                 stan::model::rvalue(reports, "reports",
                   stan::model::index_uni(s)), 1e8) ? 1e8 : stan::model::rvalue(
                                                              reports,
                                                              "reports",
                                                              stan::model::index_uni(
                                                                s))),
              dispersion, base_rng__), "assigning variable sampled_reports",
            stan::model::index_uni(s));
        }
      }
    }
    current_statement__ = 670;
    return sampled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
calculate_Rt(const T0__& infections_arg__, const int& seeding_time,
             const T2__& gt_rev_pmf_arg__, const int& smooth, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& infections = stan::math::to_ref(infections_arg__);
  const auto& gt_rev_pmf = stan::math::to_ref(gt_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 672;
    t = stan::math::num_elements(infections);
    int ot = std::numeric_limits<int>::min();
    current_statement__ = 673;
    ot = (t - seeding_time);
    current_statement__ = 674;
    stan::math::validate_non_negative_index("R", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> R =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 676;
    stan::math::validate_non_negative_index("sR", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> sR =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 678;
    stan::math::validate_non_negative_index("infectiousness", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> infectiousness =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 679;
    stan::model::assign(infectiousness, stan::math::rep_vector(1e-5, ot),
      "assigning variable infectiousness");
    current_statement__ = 683;
    for (int s = 1; s <= ot; ++s) {
      current_statement__ = 680;
      stan::model::assign(infectiousness,
        (stan::model::rvalue(infectiousness, "infectiousness",
           stan::model::index_uni(s)) +
        update_infectiousness(infections, gt_rev_pmf, seeding_time, s,
          pstream__)), "assigning variable infectiousness",
        stan::model::index_uni(s));
      current_statement__ = 681;
      stan::model::assign(R,
        (stan::model::rvalue(infections, "infections",
           stan::model::index_uni((s + seeding_time))) /
        stan::model::rvalue(infectiousness, "infectiousness",
          stan::model::index_uni(s))), "assigning variable R",
        stan::model::index_uni(s));
    }
    current_statement__ = 696;
    if (smooth) {
      current_statement__ = 694;
      for (int s = 1; s <= ot; ++s) {
        local_scalar_t__ window = DUMMY_VAR__;
        current_statement__ = 686;
        window = 0;
        current_statement__ = 687;
        stan::model::assign(sR, 0, "assigning variable sR",
          stan::model::index_uni(s));
        current_statement__ = 691;
        for (int i = stan::math::max(1, (s - smooth)); i <=
             stan::math::min(ot, (s + smooth)); ++i) {
          current_statement__ = 688;
          stan::model::assign(sR,
            (stan::model::rvalue(sR, "sR", stan::model::index_uni(s)) +
            stan::model::rvalue(R, "R", stan::model::index_uni(i))),
            "assigning variable sR", stan::model::index_uni(s));
          current_statement__ = 689;
          window = (window + 1);
        }
        current_statement__ = 692;
        stan::model::assign(sR,
          (stan::model::rvalue(sR, "sR", stan::model::index_uni(s)) /
          window), "assigning variable sR", stan::model::index_uni(s));
      }
    } else {
      current_statement__ = 684;
      stan::model::assign(sR, R, "assigning variable sR");
    }
    current_statement__ = 697;
    return sR;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
calculate_growth(const T0__& infections_arg__, const int& seeding_time,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& infections = stan::math::to_ref(infections_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 699;
    t = stan::math::num_elements(infections);
    int ot = std::numeric_limits<int>::min();
    current_statement__ = 700;
    ot = (t - seeding_time);
    current_statement__ = 701;
    stan::math::validate_non_negative_index("log_inf", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> log_inf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 702;
    stan::model::assign(log_inf, stan::math::log(infections),
      "assigning variable log_inf");
    current_statement__ = 703;
    stan::math::validate_non_negative_index("growth", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> growth =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 704;
    stan::model::assign(growth,
      stan::math::subtract(
        stan::model::rvalue(log_inf, "log_inf",
          stan::model::index_min_max((seeding_time + 1), t)),
        stan::model::rvalue(log_inf, "log_inf",
          stan::model::index_min_max(seeding_time, (t - 1)))),
      "assigning variable growth");
    current_statement__ = 705;
    return growth;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_estimate_infections final : public model_base_crtp<model_estimate_infections> {
private:
  int t;
  int lt;
  int seeding_time;
  int horizon;
  int future_time;
  std::vector<int> cases;
  std::vector<int> cases_time;
  Eigen::Matrix<double,-1,1> shifted_cases_data__;
  int delay_n;
  int delay_n_p;
  int delay_n_np;
  std::vector<int> delay_max;
  std::vector<int> delay_dist;
  int delay_np_pmf_length;
  Eigen::Matrix<double,-1,1> delay_np_pmf_data__;
  std::vector<int> delay_np_pmf_groups;
  int delay_params_length;
  Eigen::Matrix<double,-1,1> delay_params_lower_data__;
  Eigen::Matrix<double,-1,1> delay_params_mean_data__;
  Eigen::Matrix<double,-1,1> delay_params_sd_data__;
  std::vector<int> delay_params_groups;
  std::vector<int> delay_weight;
  int delay_types;
  std::vector<int> delay_types_p;
  std::vector<int> delay_types_id;
  std::vector<int> delay_types_groups;
  double L;
  int M;
  double ls_meanlog;
  double ls_sdlog;
  double ls_min;
  double ls_max;
  double alpha_sd;
  int gp_type;
  int stationary;
  int fixed;
  int estimate_r;
  double prior_infections;
  double prior_growth;
  double r_mean;
  double r_sd;
  int bp_n;
  std::vector<int> breakpoints;
  int future_fixed;
  int fixed_from;
  int pop;
  int gt_id;
  int backcalc_prior;
  int rt_half_window;
  std::vector<int> day_of_week;
  int model_type;
  double phi_mean;
  double phi_sd;
  int week_effect;
  int obs_scale;
  double obs_scale_mean;
  double obs_scale_sd;
  double obs_weight;
  int likelihood;
  int return_likelihood;
  int accumulate;
  int trunc_id;
  int delay_id;
  int ot;
  int ot_h;
  int noise_terms;
  Eigen::Matrix<double,-1,-1> PHI_data__;
  double r_logmean;
  double r_logsd;
  std::vector<int> delay_type_max;
  int rho_1dim__;
  int alpha_1dim__;
  int eta_1dim__;
  int initial_growth_1dim__;
  int bp_sd_1dim__;
  int frac_obs_1dim__;
  int noise_1dim__;
  int R_1dim__;
  int gt_rev_pmf_1dim__;
  int gen_R_1dim__;
  int r_1dim__;
  int log_lik_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> shifted_cases{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_np_pmf{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_params_lower{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_params_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_params_sd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> PHI{nullptr, 0, 0};
public:
  ~model_estimate_infections() {}
  model_estimate_infections(stan::io::var_context& context__, unsigned int
                            random_seed__ = 0, std::ostream*
                            pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_estimate_infections_namespace::model_estimate_infections";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 99;
      context__.validate_dims("data initialization", "t", "int",
        std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      current_statement__ = 99;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 100;
      context__.validate_dims("data initialization", "lt", "int",
        std::vector<size_t>{});
      lt = std::numeric_limits<int>::min();
      current_statement__ = 100;
      lt = context__.vals_i("lt")[(1 - 1)];
      current_statement__ = 101;
      context__.validate_dims("data initialization", "seeding_time", "int",
        std::vector<size_t>{});
      seeding_time = std::numeric_limits<int>::min();
      current_statement__ = 101;
      seeding_time = context__.vals_i("seeding_time")[(1 - 1)];
      current_statement__ = 102;
      context__.validate_dims("data initialization", "horizon", "int",
        std::vector<size_t>{});
      horizon = std::numeric_limits<int>::min();
      current_statement__ = 102;
      horizon = context__.vals_i("horizon")[(1 - 1)];
      current_statement__ = 103;
      context__.validate_dims("data initialization", "future_time", "int",
        std::vector<size_t>{});
      future_time = std::numeric_limits<int>::min();
      current_statement__ = 103;
      future_time = context__.vals_i("future_time")[(1 - 1)];
      current_statement__ = 104;
      stan::math::validate_non_negative_index("cases", "lt", lt);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "cases", "int",
        std::vector<size_t>{static_cast<size_t>(lt)});
      cases = std::vector<int>(lt, std::numeric_limits<int>::min());
      current_statement__ = 105;
      cases = context__.vals_i("cases");
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "cases", cases, 0);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("cases_time", "lt", lt);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "cases_time", "int",
        std::vector<size_t>{static_cast<size_t>(lt)});
      cases_time = std::vector<int>(lt, std::numeric_limits<int>::min());
      current_statement__ = 107;
      cases_time = context__.vals_i("cases_time");
      current_statement__ = 108;
      stan::math::validate_non_negative_index("shifted_cases", "t", t);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "shifted_cases",
        "double", std::vector<size_t>{static_cast<size_t>(t)});
      shifted_cases_data__ = Eigen::Matrix<double,-1,1>::Constant(t,
                               std::numeric_limits<double>::quiet_NaN());
      new (&shifted_cases)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(shifted_cases_data__.data(),
        t);
      {
        std::vector<local_scalar_t__> shifted_cases_flat__;
        current_statement__ = 109;
        shifted_cases_flat__ = context__.vals_r("shifted_cases");
        current_statement__ = 109;
        pos__ = 1;
        current_statement__ = 109;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 109;
          stan::model::assign(shifted_cases, shifted_cases_flat__[(pos__ -
            1)], "assigning variable shifted_cases",
            stan::model::index_uni(sym1__));
          current_statement__ = 109;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "shifted_cases",
        shifted_cases, 0);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "delay_n", "int",
        std::vector<size_t>{});
      delay_n = std::numeric_limits<int>::min();
      current_statement__ = 110;
      delay_n = context__.vals_i("delay_n")[(1 - 1)];
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "delay_n", delay_n, 0);
      current_statement__ = 111;
      context__.validate_dims("data initialization", "delay_n_p", "int",
        std::vector<size_t>{});
      delay_n_p = std::numeric_limits<int>::min();
      current_statement__ = 111;
      delay_n_p = context__.vals_i("delay_n_p")[(1 - 1)];
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "delay_n_p", delay_n_p,
        0);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "delay_n_np", "int",
        std::vector<size_t>{});
      delay_n_np = std::numeric_limits<int>::min();
      current_statement__ = 112;
      delay_n_np = context__.vals_i("delay_n_np")[(1 - 1)];
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "delay_n_np",
        delay_n_np, 0);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("delay_max", "delay_n_p",
        delay_n_p);
      current_statement__ = 114;
      context__.validate_dims("data initialization", "delay_max", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_max = std::vector<int>(delay_n_p,
                    std::numeric_limits<int>::min());
      current_statement__ = 114;
      delay_max = context__.vals_i("delay_max");
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "delay_max", delay_max,
        1);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("delay_dist", "delay_n_p",
        delay_n_p);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "delay_dist", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_dist = std::vector<int>(delay_n_p,
                     std::numeric_limits<int>::min());
      current_statement__ = 116;
      delay_dist = context__.vals_i("delay_dist");
      current_statement__ = 116;
      stan::math::check_greater_or_equal(function__, "delay_dist",
        delay_dist, 0);
      current_statement__ = 117;
      context__.validate_dims("data initialization", "delay_np_pmf_length",
        "int", std::vector<size_t>{});
      delay_np_pmf_length = std::numeric_limits<int>::min();
      current_statement__ = 117;
      delay_np_pmf_length = context__.vals_i("delay_np_pmf_length")[(1 - 1)];
      current_statement__ = 117;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf_length",
        delay_np_pmf_length, 0);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("delay_np_pmf",
        "delay_np_pmf_length", delay_np_pmf_length);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "delay_np_pmf",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_np_pmf_length)});
      delay_np_pmf_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_np_pmf_length,
                              std::numeric_limits<double>::quiet_NaN());
      new (&delay_np_pmf)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_np_pmf_data__.data(),
        delay_np_pmf_length);
      {
        std::vector<local_scalar_t__> delay_np_pmf_flat__;
        current_statement__ = 119;
        delay_np_pmf_flat__ = context__.vals_r("delay_np_pmf");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= delay_np_pmf_length; ++sym1__) {
          current_statement__ = 119;
          stan::model::assign(delay_np_pmf, delay_np_pmf_flat__[(pos__ - 1)],
            "assigning variable delay_np_pmf", stan::model::index_uni(sym1__));
          current_statement__ = 119;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf",
        delay_np_pmf, 0);
      current_statement__ = 119;
      stan::math::check_less_or_equal(function__, "delay_np_pmf",
        delay_np_pmf, 1);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("delay_np_pmf_groups",
        "delay_n_np + 1", (delay_n_np + 1));
      current_statement__ = 121;
      context__.validate_dims("data initialization", "delay_np_pmf_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_n_np + 1))});
      delay_np_pmf_groups = std::vector<int>((delay_n_np + 1),
                              std::numeric_limits<int>::min());
      current_statement__ = 121;
      delay_np_pmf_groups = context__.vals_i("delay_np_pmf_groups");
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf_groups",
        delay_np_pmf_groups, 1);
      current_statement__ = 122;
      context__.validate_dims("data initialization", "delay_params_length",
        "int", std::vector<size_t>{});
      delay_params_length = std::numeric_limits<int>::min();
      current_statement__ = 122;
      delay_params_length = context__.vals_i("delay_params_length")[(1 - 1)];
      current_statement__ = 122;
      stan::math::check_greater_or_equal(function__, "delay_params_length",
        delay_params_length, 0);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("delay_params_lower",
        "delay_params_length", delay_params_length);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "delay_params_lower",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_params_length)});
      delay_params_lower_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&delay_params_lower)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_params_lower_data__.data(),
        delay_params_length);
      {
        std::vector<local_scalar_t__> delay_params_lower_flat__;
        current_statement__ = 124;
        delay_params_lower_flat__ = context__.vals_r("delay_params_lower");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          current_statement__ = 124;
          stan::model::assign(delay_params_lower,
            delay_params_lower_flat__[(pos__ - 1)],
            "assigning variable delay_params_lower",
            stan::model::index_uni(sym1__));
          current_statement__ = 124;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 125;
      stan::math::validate_non_negative_index("delay_params_mean",
        "delay_params_length", delay_params_length);
      current_statement__ = 126;
      context__.validate_dims("data initialization", "delay_params_mean",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_params_length)});
      delay_params_mean_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&delay_params_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_params_mean_data__.data(),
        delay_params_length);
      {
        std::vector<local_scalar_t__> delay_params_mean_flat__;
        current_statement__ = 126;
        delay_params_mean_flat__ = context__.vals_r("delay_params_mean");
        current_statement__ = 126;
        pos__ = 1;
        current_statement__ = 126;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          current_statement__ = 126;
          stan::model::assign(delay_params_mean,
            delay_params_mean_flat__[(pos__ - 1)],
            "assigning variable delay_params_mean",
            stan::model::index_uni(sym1__));
          current_statement__ = 126;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 126;
      stan::math::check_matching_dims("constraint", "delay_params_mean",
        delay_params_mean, "lower", delay_params_lower);
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__, "delay_params_mean",
        delay_params_mean, delay_params_lower);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("delay_params_sd",
        "delay_params_length", delay_params_length);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "delay_params_sd",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_params_length)});
      delay_params_sd_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&delay_params_sd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_params_sd_data__.data(),
        delay_params_length);
      {
        std::vector<local_scalar_t__> delay_params_sd_flat__;
        current_statement__ = 128;
        delay_params_sd_flat__ = context__.vals_r("delay_params_sd");
        current_statement__ = 128;
        pos__ = 1;
        current_statement__ = 128;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          current_statement__ = 128;
          stan::model::assign(delay_params_sd, delay_params_sd_flat__[(pos__
            - 1)], "assigning variable delay_params_sd",
            stan::model::index_uni(sym1__));
          current_statement__ = 128;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "delay_params_sd",
        delay_params_sd, 0);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("delay_params_groups",
        "delay_n_p + 1", (delay_n_p + 1));
      current_statement__ = 130;
      context__.validate_dims("data initialization", "delay_params_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_n_p + 1))});
      delay_params_groups = std::vector<int>((delay_n_p + 1),
                              std::numeric_limits<int>::min());
      current_statement__ = 130;
      delay_params_groups = context__.vals_i("delay_params_groups");
      current_statement__ = 130;
      stan::math::check_greater_or_equal(function__, "delay_params_groups",
        delay_params_groups, 0);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("delay_weight", "delay_n_p",
        delay_n_p);
      current_statement__ = 132;
      context__.validate_dims("data initialization", "delay_weight", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_weight = std::vector<int>(delay_n_p,
                       std::numeric_limits<int>::min());
      current_statement__ = 132;
      delay_weight = context__.vals_i("delay_weight");
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "delay_weight",
        delay_weight, 0);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "delay_types", "int",
        std::vector<size_t>{});
      delay_types = std::numeric_limits<int>::min();
      current_statement__ = 133;
      delay_types = context__.vals_i("delay_types")[(1 - 1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "delay_types",
        delay_types, 0);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("delay_types_p", "delay_n",
        delay_n);
      current_statement__ = 135;
      context__.validate_dims("data initialization", "delay_types_p", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n)});
      delay_types_p = std::vector<int>(delay_n,
                        std::numeric_limits<int>::min());
      current_statement__ = 135;
      delay_types_p = context__.vals_i("delay_types_p");
      current_statement__ = 135;
      stan::math::check_greater_or_equal(function__, "delay_types_p",
        delay_types_p, 0);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("delay_types_id", "delay_n",
        delay_n);
      current_statement__ = 137;
      context__.validate_dims("data initialization", "delay_types_id", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n)});
      delay_types_id = std::vector<int>(delay_n,
                         std::numeric_limits<int>::min());
      current_statement__ = 137;
      delay_types_id = context__.vals_i("delay_types_id");
      current_statement__ = 137;
      stan::math::check_greater_or_equal(function__, "delay_types_id",
        delay_types_id, 0);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("delay_types_groups",
        "delay_types + 1", (delay_types + 1));
      current_statement__ = 139;
      context__.validate_dims("data initialization", "delay_types_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_types + 1))});
      delay_types_groups = std::vector<int>((delay_types + 1),
                             std::numeric_limits<int>::min());
      current_statement__ = 139;
      delay_types_groups = context__.vals_i("delay_types_groups");
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "delay_types_groups",
        delay_types_groups, 0);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "L", "double",
        std::vector<size_t>{});
      L = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 140;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 141;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 141;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 141;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 142;
      context__.validate_dims("data initialization", "ls_meanlog", "double",
        std::vector<size_t>{});
      ls_meanlog = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 142;
      ls_meanlog = context__.vals_r("ls_meanlog")[(1 - 1)];
      current_statement__ = 143;
      context__.validate_dims("data initialization", "ls_sdlog", "double",
        std::vector<size_t>{});
      ls_sdlog = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 143;
      ls_sdlog = context__.vals_r("ls_sdlog")[(1 - 1)];
      current_statement__ = 144;
      context__.validate_dims("data initialization", "ls_min", "double",
        std::vector<size_t>{});
      ls_min = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 144;
      ls_min = context__.vals_r("ls_min")[(1 - 1)];
      current_statement__ = 144;
      stan::math::check_greater_or_equal(function__, "ls_min", ls_min, 0);
      current_statement__ = 145;
      context__.validate_dims("data initialization", "ls_max", "double",
        std::vector<size_t>{});
      ls_max = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 145;
      ls_max = context__.vals_r("ls_max")[(1 - 1)];
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__, "ls_max", ls_max, 0);
      current_statement__ = 146;
      context__.validate_dims("data initialization", "alpha_sd", "double",
        std::vector<size_t>{});
      alpha_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 146;
      alpha_sd = context__.vals_r("alpha_sd")[(1 - 1)];
      current_statement__ = 147;
      context__.validate_dims("data initialization", "gp_type", "int",
        std::vector<size_t>{});
      gp_type = std::numeric_limits<int>::min();
      current_statement__ = 147;
      gp_type = context__.vals_i("gp_type")[(1 - 1)];
      current_statement__ = 148;
      context__.validate_dims("data initialization", "stationary", "int",
        std::vector<size_t>{});
      stationary = std::numeric_limits<int>::min();
      current_statement__ = 148;
      stationary = context__.vals_i("stationary")[(1 - 1)];
      current_statement__ = 149;
      context__.validate_dims("data initialization", "fixed", "int",
        std::vector<size_t>{});
      fixed = std::numeric_limits<int>::min();
      current_statement__ = 149;
      fixed = context__.vals_i("fixed")[(1 - 1)];
      current_statement__ = 150;
      context__.validate_dims("data initialization", "estimate_r", "int",
        std::vector<size_t>{});
      estimate_r = std::numeric_limits<int>::min();
      current_statement__ = 150;
      estimate_r = context__.vals_i("estimate_r")[(1 - 1)];
      current_statement__ = 151;
      context__.validate_dims("data initialization", "prior_infections",
        "double", std::vector<size_t>{});
      prior_infections = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 151;
      prior_infections = context__.vals_r("prior_infections")[(1 - 1)];
      current_statement__ = 152;
      context__.validate_dims("data initialization", "prior_growth",
        "double", std::vector<size_t>{});
      prior_growth = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 152;
      prior_growth = context__.vals_r("prior_growth")[(1 - 1)];
      current_statement__ = 153;
      context__.validate_dims("data initialization", "r_mean", "double",
        std::vector<size_t>{});
      r_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 153;
      r_mean = context__.vals_r("r_mean")[(1 - 1)];
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "r_mean", r_mean, 0);
      current_statement__ = 154;
      context__.validate_dims("data initialization", "r_sd", "double",
        std::vector<size_t>{});
      r_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 154;
      r_sd = context__.vals_r("r_sd")[(1 - 1)];
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "r_sd", r_sd, 0);
      current_statement__ = 155;
      context__.validate_dims("data initialization", "bp_n", "int",
        std::vector<size_t>{});
      bp_n = std::numeric_limits<int>::min();
      current_statement__ = 155;
      bp_n = context__.vals_i("bp_n")[(1 - 1)];
      current_statement__ = 156;
      stan::math::validate_non_negative_index("breakpoints",
        "t - seeding_time", (t - seeding_time));
      current_statement__ = 157;
      context__.validate_dims("data initialization", "breakpoints", "int",
        std::vector<size_t>{static_cast<size_t>((t - seeding_time))});
      breakpoints = std::vector<int>((t - seeding_time),
                      std::numeric_limits<int>::min());
      current_statement__ = 157;
      breakpoints = context__.vals_i("breakpoints");
      current_statement__ = 158;
      context__.validate_dims("data initialization", "future_fixed", "int",
        std::vector<size_t>{});
      future_fixed = std::numeric_limits<int>::min();
      current_statement__ = 158;
      future_fixed = context__.vals_i("future_fixed")[(1 - 1)];
      current_statement__ = 159;
      context__.validate_dims("data initialization", "fixed_from", "int",
        std::vector<size_t>{});
      fixed_from = std::numeric_limits<int>::min();
      current_statement__ = 159;
      fixed_from = context__.vals_i("fixed_from")[(1 - 1)];
      current_statement__ = 160;
      context__.validate_dims("data initialization", "pop", "int",
        std::vector<size_t>{});
      pop = std::numeric_limits<int>::min();
      current_statement__ = 160;
      pop = context__.vals_i("pop")[(1 - 1)];
      current_statement__ = 161;
      context__.validate_dims("data initialization", "gt_id", "int",
        std::vector<size_t>{});
      gt_id = std::numeric_limits<int>::min();
      current_statement__ = 161;
      gt_id = context__.vals_i("gt_id")[(1 - 1)];
      current_statement__ = 161;
      stan::math::check_greater_or_equal(function__, "gt_id", gt_id, 0);
      current_statement__ = 162;
      context__.validate_dims("data initialization", "backcalc_prior", "int",
        std::vector<size_t>{});
      backcalc_prior = std::numeric_limits<int>::min();
      current_statement__ = 162;
      backcalc_prior = context__.vals_i("backcalc_prior")[(1 - 1)];
      current_statement__ = 163;
      context__.validate_dims("data initialization", "rt_half_window", "int",
        std::vector<size_t>{});
      rt_half_window = std::numeric_limits<int>::min();
      current_statement__ = 163;
      rt_half_window = context__.vals_i("rt_half_window")[(1 - 1)];
      current_statement__ = 164;
      stan::math::validate_non_negative_index("day_of_week",
        "t - seeding_time", (t - seeding_time));
      current_statement__ = 165;
      context__.validate_dims("data initialization", "day_of_week", "int",
        std::vector<size_t>{static_cast<size_t>((t - seeding_time))});
      day_of_week = std::vector<int>((t - seeding_time),
                      std::numeric_limits<int>::min());
      current_statement__ = 165;
      day_of_week = context__.vals_i("day_of_week");
      current_statement__ = 166;
      context__.validate_dims("data initialization", "model_type", "int",
        std::vector<size_t>{});
      model_type = std::numeric_limits<int>::min();
      current_statement__ = 166;
      model_type = context__.vals_i("model_type")[(1 - 1)];
      current_statement__ = 167;
      context__.validate_dims("data initialization", "phi_mean", "double",
        std::vector<size_t>{});
      phi_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 167;
      phi_mean = context__.vals_r("phi_mean")[(1 - 1)];
      current_statement__ = 168;
      context__.validate_dims("data initialization", "phi_sd", "double",
        std::vector<size_t>{});
      phi_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 168;
      phi_sd = context__.vals_r("phi_sd")[(1 - 1)];
      current_statement__ = 169;
      context__.validate_dims("data initialization", "week_effect", "int",
        std::vector<size_t>{});
      week_effect = std::numeric_limits<int>::min();
      current_statement__ = 169;
      week_effect = context__.vals_i("week_effect")[(1 - 1)];
      current_statement__ = 170;
      context__.validate_dims("data initialization", "obs_scale", "int",
        std::vector<size_t>{});
      obs_scale = std::numeric_limits<int>::min();
      current_statement__ = 170;
      obs_scale = context__.vals_i("obs_scale")[(1 - 1)];
      current_statement__ = 171;
      context__.validate_dims("data initialization", "obs_scale_mean",
        "double", std::vector<size_t>{});
      obs_scale_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 171;
      obs_scale_mean = context__.vals_r("obs_scale_mean")[(1 - 1)];
      current_statement__ = 172;
      context__.validate_dims("data initialization", "obs_scale_sd",
        "double", std::vector<size_t>{});
      obs_scale_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 172;
      obs_scale_sd = context__.vals_r("obs_scale_sd")[(1 - 1)];
      current_statement__ = 173;
      context__.validate_dims("data initialization", "obs_weight", "double",
        std::vector<size_t>{});
      obs_weight = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 173;
      obs_weight = context__.vals_r("obs_weight")[(1 - 1)];
      current_statement__ = 174;
      context__.validate_dims("data initialization", "likelihood", "int",
        std::vector<size_t>{});
      likelihood = std::numeric_limits<int>::min();
      current_statement__ = 174;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 175;
      context__.validate_dims("data initialization", "return_likelihood",
        "int", std::vector<size_t>{});
      return_likelihood = std::numeric_limits<int>::min();
      current_statement__ = 175;
      return_likelihood = context__.vals_i("return_likelihood")[(1 - 1)];
      current_statement__ = 176;
      context__.validate_dims("data initialization", "accumulate", "int",
        std::vector<size_t>{});
      accumulate = std::numeric_limits<int>::min();
      current_statement__ = 176;
      accumulate = context__.vals_i("accumulate")[(1 - 1)];
      current_statement__ = 177;
      context__.validate_dims("data initialization", "trunc_id", "int",
        std::vector<size_t>{});
      trunc_id = std::numeric_limits<int>::min();
      current_statement__ = 177;
      trunc_id = context__.vals_i("trunc_id")[(1 - 1)];
      current_statement__ = 177;
      stan::math::check_greater_or_equal(function__, "trunc_id", trunc_id, 0);
      current_statement__ = 178;
      context__.validate_dims("data initialization", "delay_id", "int",
        std::vector<size_t>{});
      delay_id = std::numeric_limits<int>::min();
      current_statement__ = 178;
      delay_id = context__.vals_i("delay_id")[(1 - 1)];
      current_statement__ = 178;
      stan::math::check_greater_or_equal(function__, "delay_id", delay_id, 0);
      current_statement__ = 179;
      ot = std::numeric_limits<int>::min();
      current_statement__ = 179;
      ot = ((t - seeding_time) - horizon);
      current_statement__ = 180;
      ot_h = std::numeric_limits<int>::min();
      current_statement__ = 180;
      ot_h = (ot + horizon);
      current_statement__ = 181;
      noise_terms = std::numeric_limits<int>::min();
      current_statement__ = 181;
      noise_terms = setup_noise(ot_h, t, horizon, estimate_r, stationary,
                      future_fixed, fixed_from, pstream__);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("PHI", "noise_terms",
        noise_terms);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("PHI", "M", M);
      current_statement__ = 184;
      PHI_data__ = Eigen::Matrix<double,-1,-1>::Constant(noise_terms, M,
                     std::numeric_limits<double>::quiet_NaN());
      new (&PHI) Eigen::Map<Eigen::Matrix<double,-1,-1>>(PHI_data__.data(),
        noise_terms, M);
      current_statement__ = 184;
      stan::model::assign(PHI, setup_gp(M, L, noise_terms, pstream__),
        "assigning variable PHI");
      current_statement__ = 185;
      r_logmean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 185;
      r_logmean = stan::math::log((stan::math::pow(r_mean, 2) /
                    stan::math::sqrt((stan::math::pow(r_sd, 2) +
                      stan::math::pow(r_mean, 2)))));
      current_statement__ = 186;
      r_logsd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 186;
      r_logsd = stan::math::sqrt(
                  stan::math::log((1 + (stan::math::pow(r_sd, 2) /
                    stan::math::pow(r_mean, 2)))));
      current_statement__ = 187;
      stan::math::validate_non_negative_index("delay_type_max",
        "delay_types", delay_types);
      current_statement__ = 188;
      delay_type_max = std::vector<int>(delay_types,
                         std::numeric_limits<int>::min());
      current_statement__ = 190;
      {
        stan::math::profile<local_scalar_t__> profile__("assign max",
          const_cast<stan::math::profile_map&>(profiles__));
        current_statement__ = 189;
        stan::model::assign(delay_type_max,
          get_delay_type_max(delay_types, delay_types_p, delay_types_id,
            delay_types_groups, delay_max, delay_np_pmf_groups, pstream__),
          "assigning variable delay_type_max");
      }
      current_statement__ = 191;
      rho_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 191;
      rho_1dim__ = (fixed ? 0 : 1);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("rho", "fixed ? 0 : 1",
        rho_1dim__);
      current_statement__ = 192;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 192;
      alpha_1dim__ = (fixed ? 0 : 1);
      current_statement__ = 192;
      stan::math::validate_non_negative_index("alpha", "fixed ? 0 : 1",
        alpha_1dim__);
      current_statement__ = 193;
      eta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 193;
      eta_1dim__ = (fixed ? 0 : M);
      current_statement__ = 193;
      stan::math::validate_non_negative_index("eta", "fixed ? 0 : M",
        eta_1dim__);
      current_statement__ = 194;
      stan::math::validate_non_negative_index("log_R", "estimate_r",
        estimate_r);
      current_statement__ = 195;
      stan::math::validate_non_negative_index("initial_infections",
        "estimate_r", estimate_r);
      current_statement__ = 196;
      initial_growth_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 196;
      initial_growth_1dim__ = ((stan::math::primitive_value(estimate_r) &&
        stan::math::primitive_value(stan::math::logical_gt(seeding_time, 1))) ? 1 : 0);
      current_statement__ = 196;
      stan::math::validate_non_negative_index("initial_growth",
        "estimate_r && seeding_time > 1 ? 1 : 0", initial_growth_1dim__);
      current_statement__ = 197;
      bp_sd_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 197;
      bp_sd_1dim__ = (stan::math::logical_gt(bp_n, 0) ? 1 : 0);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("bp_sd", "bp_n > 0 ? 1 : 0",
        bp_sd_1dim__);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("bp_effects", "bp_n", bp_n);
      current_statement__ = 199;
      stan::math::validate_non_negative_index("delay_params",
        "delay_params_length", delay_params_length);
      current_statement__ = 200;
      stan::math::validate_positive_index("day_of_week_simplex",
        "week_effect", week_effect);
      current_statement__ = 201;
      frac_obs_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 201;
      frac_obs_1dim__ = (stan::math::logical_gt(obs_scale_sd, 0) ? 1 : 0);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("frac_obs",
        "obs_scale_sd > 0 ? 1 : 0", frac_obs_1dim__);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("rep_phi", "model_type",
        model_type);
      current_statement__ = 203;
      noise_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 203;
      noise_1dim__ = (fixed ? 0 : noise_terms);
      current_statement__ = 203;
      stan::math::validate_non_negative_index("noise",
        "fixed ? 0 : noise_terms", noise_1dim__);
      current_statement__ = 204;
      R_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 204;
      R_1dim__ = (stan::math::logical_gt(estimate_r, 0) ? ot_h : 0);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("R",
        "estimate_r > 0 ? ot_h : 0", R_1dim__);
      current_statement__ = 205;
      stan::math::validate_non_negative_index("infections", "t", t);
      current_statement__ = 206;
      stan::math::validate_non_negative_index("reports", "ot_h", ot_h);
      current_statement__ = 207;
      stan::math::validate_non_negative_index("obs_reports", "ot", ot);
      current_statement__ = 208;
      gt_rev_pmf_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 208;
      gt_rev_pmf_1dim__ = (estimate_r *
        (stan::model::rvalue(delay_type_max, "delay_type_max",
           stan::model::index_uni(gt_id))
        + 1));
      current_statement__ = 208;
      stan::math::validate_non_negative_index("gt_rev_pmf",
        "estimate_r * (delay_type_max[gt_id] + 1)", gt_rev_pmf_1dim__);
      current_statement__ = 209;
      stan::math::validate_non_negative_index("imputed_reports", "ot_h", ot_h);
      current_statement__ = 210;
      gen_R_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 210;
      gen_R_1dim__ = (stan::math::logical_gt(estimate_r, 0) ? 0 : ot_h);
      current_statement__ = 210;
      stan::math::validate_non_negative_index("gen_R",
        "estimate_r > 0 ? 0 : ot_h", gen_R_1dim__);
      current_statement__ = 211;
      r_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 211;
      r_1dim__ = (ot_h - 1);
      current_statement__ = 211;
      stan::math::validate_non_negative_index("r", "ot_h - 1", r_1dim__);
      current_statement__ = 212;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 212;
      log_lik_1dim__ = (return_likelihood ? ot : 0);
      current_statement__ = 212;
      stan::math::validate_non_negative_index("log_lik",
        "return_likelihood ? ot : 0", log_lik_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = rho_1dim__ + alpha_1dim__ + eta_1dim__ + estimate_r +
      estimate_r + initial_growth_1dim__ + bp_sd_1dim__ + bp_n +
      delay_params_length + (week_effect - 1) + frac_obs_1dim__ + model_type;
  }
  inline std::string model_name() const final {
    return "model_estimate_infections";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_estimate_infections_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(rho_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      rho = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(ls_min, ls_max, lp__, rho_1dim__);
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, alpha_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      eta = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(eta_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> log_R =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(estimate_r,
          DUMMY_VAR__);
      current_statement__ = 4;
      log_R = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(estimate_r);
      std::vector<local_scalar_t__> initial_infections =
        std::vector<local_scalar_t__>(estimate_r, DUMMY_VAR__);
      current_statement__ = 5;
      initial_infections = in__.template read<
                             std::vector<local_scalar_t__>>(estimate_r);
      std::vector<local_scalar_t__> initial_growth =
        std::vector<local_scalar_t__>(initial_growth_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      initial_growth = in__.template read<
                         std::vector<local_scalar_t__>>(initial_growth_1dim__);
      std::vector<local_scalar_t__> bp_sd =
        std::vector<local_scalar_t__>(bp_sd_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      bp_sd = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, bp_sd_1dim__);
      std::vector<local_scalar_t__> bp_effects =
        std::vector<local_scalar_t__>(bp_n, DUMMY_VAR__);
      current_statement__ = 8;
      bp_effects = in__.template read<std::vector<local_scalar_t__>>(bp_n);
      Eigen::Matrix<local_scalar_t__,-1,1> delay_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delay_params_length,
          DUMMY_VAR__);
      current_statement__ = 9;
      delay_params = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>,
                       jacobian__>(delay_params_lower, lp__,
                       delay_params_length);
      current_statement__ = 9;
      stan::math::check_matching_dims("constraint", "delay_params",
        delay_params, "lower", delay_params_lower);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      current_statement__ = 10;
      day_of_week_simplex = in__.template read_constrain_simplex<
                              Eigen::Matrix<local_scalar_t__,-1,1>,
                              jacobian__>(lp__, week_effect);
      std::vector<local_scalar_t__> frac_obs =
        std::vector<local_scalar_t__>(frac_obs_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      frac_obs = in__.template read_constrain_lub<
                   std::vector<local_scalar_t__>, jacobian__>(0, 1, lp__,
                   frac_obs_1dim__);
      std::vector<local_scalar_t__> rep_phi =
        std::vector<local_scalar_t__>(model_type, DUMMY_VAR__);
      current_statement__ = 12;
      rep_phi = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  model_type);
      Eigen::Matrix<local_scalar_t__,-1,1> noise =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(noise_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> R =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(R_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> infections =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> reports =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot_h, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> obs_reports =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> gt_rev_pmf =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gt_rev_pmf_1dim__,
          DUMMY_VAR__);
      current_statement__ = 26;
      {
        stan::math::profile<local_scalar_t__> profile__("update gp",
          const_cast<stan::math::profile_map&>(profiles__));
        current_statement__ = 25;
        if (stan::math::logical_negation(fixed)) {
          current_statement__ = 23;
          stan::model::assign(noise,
            update_gp(PHI, M, L,
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1)),
              stan::model::rvalue(rho, "rho", stan::model::index_uni(1)),
              eta, gp_type, pstream__), "assigning variable noise");
        }
      }
      current_statement__ = 37;
      if (estimate_r) {
        current_statement__ = 31;
        {
          stan::math::profile<local_scalar_t__> profile__("gt",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 30;
          stan::model::assign(gt_rev_pmf,
            get_delay_rev_pmf(gt_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(gt_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups, delay_params, delay_params_groups,
              delay_dist, 1, 1, 0, pstream__),
            "assigning variable gt_rev_pmf");
        }
        current_statement__ = 33;
        {
          stan::math::profile<local_scalar_t__> profile__("R",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 32;
          stan::model::assign(R,
            update_Rt(ot_h,
              stan::model::rvalue(log_R, "log_R",
                stan::model::index_uni(estimate_r)), noise, breakpoints,
              bp_effects, stationary, pstream__), "assigning variable R");
        }
        current_statement__ = 35;
        {
          stan::math::profile<local_scalar_t__> profile__("infections",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 34;
          stan::model::assign(infections,
            generate_infections(R, seeding_time, gt_rev_pmf,
              initial_infections, initial_growth, pop, future_time, pstream__),
            "assigning variable infections");
        }
      } else {
        current_statement__ = 28;
        {
          stan::math::profile<local_scalar_t__> profile__("infections",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 27;
          stan::model::assign(infections,
            deconvolve_infections(shifted_cases, noise, fixed,
              backcalc_prior, pstream__), "assigning variable infections");
        }
      }
      current_statement__ = 47;
      if (delay_id) {
        current_statement__ = 40;
        stan::math::validate_non_negative_index("delay_rev_pmf",
          "delay_type_max[delay_id] + 1",
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(delay_id)) + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> delay_rev_pmf =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            delay_type_max,
                                                            "delay_type_max",
                                                            stan::model::index_uni(
                                                              delay_id)) +
            1), DUMMY_VAR__);
        current_statement__ = 43;
        {
          stan::math::profile<local_scalar_t__> profile__("delays",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 42;
          stan::model::assign(delay_rev_pmf,
            get_delay_rev_pmf(delay_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(delay_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups, delay_params, delay_params_groups,
              delay_dist, 0, 1, 0, pstream__),
            "assigning variable delay_rev_pmf");
        }
        current_statement__ = 45;
        {
          stan::math::profile<local_scalar_t__> profile__("reports",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 44;
          stan::model::assign(reports,
            convolve_to_report(infections, delay_rev_pmf, seeding_time,
              pstream__), "assigning variable reports");
        }
      } else {
        current_statement__ = 38;
        stan::model::assign(reports,
          stan::model::rvalue(infections, "infections",
            stan::model::index_min_max((seeding_time + 1), t)),
          "assigning variable reports");
      }
      current_statement__ = 51;
      if (stan::math::logical_gt(week_effect, 1)) {
        current_statement__ = 49;
        {
          stan::math::profile<local_scalar_t__> profile__("day of the week",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 48;
          stan::model::assign(reports,
            day_of_week_effect(stan::model::deep_copy(reports), day_of_week,
              day_of_week_simplex, pstream__), "assigning variable reports");
        }
      }
      current_statement__ = 55;
      if (obs_scale) {
        current_statement__ = 53;
        {
          stan::math::profile<local_scalar_t__> profile__("scale",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 52;
          stan::model::assign(reports,
            scale_obs(stan::model::deep_copy(reports),
              (stan::math::logical_gt(obs_scale_sd, 0) ? stan::model::rvalue(
                                                           frac_obs,
                                                           "frac_obs",
                                                           stan::model::index_uni(
                                                             1)) : obs_scale_mean),
              pstream__), "assigning variable reports");
        }
      }
      current_statement__ = 65;
      if (trunc_id) {
        current_statement__ = 58;
        stan::math::validate_non_negative_index("trunc_rev_cmf",
          "delay_type_max[trunc_id] + 1",
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> trunc_rev_cmf =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            delay_type_max,
                                                            "delay_type_max",
                                                            stan::model::index_uni(
                                                              trunc_id)) +
            1), DUMMY_VAR__);
        current_statement__ = 61;
        {
          stan::math::profile<local_scalar_t__> profile__("truncation",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 60;
          stan::model::assign(trunc_rev_cmf,
            get_delay_rev_pmf(trunc_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(trunc_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups, delay_params, delay_params_groups,
              delay_dist, 0, 1, 1, pstream__),
            "assigning variable trunc_rev_cmf");
        }
        current_statement__ = 63;
        {
          stan::math::profile<local_scalar_t__> profile__("truncate",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 62;
          stan::model::assign(obs_reports,
            truncate(
              stan::model::rvalue(reports, "reports",
                stan::model::index_min_max(1, ot)), trunc_rev_cmf, 0,
              pstream__), "assigning variable obs_reports");
        }
      } else {
        current_statement__ = 56;
        stan::model::assign(obs_reports,
          stan::model::rvalue(reports, "reports",
            stan::model::index_min_max(1, ot)),
          "assigning variable obs_reports");
      }
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "R", R, 0);
      {
        current_statement__ = 82;
        if (stan::math::logical_negation(fixed)) {
          current_statement__ = 80;
          {
            stan::math::profile<local_scalar_t__> profile__("gp lp",
              const_cast<stan::math::profile_map&>(profiles__));
            current_statement__ = 79;
            gaussian_process_lp<propto__>(
              stan::model::rvalue(rho, "rho", stan::model::index_uni(1)),
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1)),
              eta, ls_meanlog, ls_sdlog, ls_min, ls_max, alpha_sd, lp__,
              lp_accum__, pstream__);
          }
        }
        current_statement__ = 84;
        {
          stan::math::profile<local_scalar_t__> profile__("delays lp",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 83;
          delays_lp<propto__>(delay_params, delay_params_mean,
            delay_params_sd, delay_params_groups, delay_dist, delay_weight,
            lp__, lp_accum__, pstream__);
        }
        current_statement__ = 88;
        if (estimate_r) {
          current_statement__ = 86;
          {
            stan::math::profile<local_scalar_t__> profile__("rt lp",
              const_cast<stan::math::profile_map&>(profiles__));
            current_statement__ = 85;
            rt_lp<propto__>(log_R, initial_infections, initial_growth,
              bp_effects, bp_sd, bp_n, seeding_time, r_logmean, r_logsd,
              prior_infections, prior_growth, lp__, lp_accum__, pstream__);
          }
        }
        current_statement__ = 94;
        if (stan::math::logical_gt(obs_scale_sd, 0)) {
          current_statement__ = 92;
          {
            stan::math::profile<local_scalar_t__> profile__("scale lp",
              const_cast<stan::math::profile_map&>(profiles__));
            current_statement__ = 89;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(frac_obs, "frac_obs",
                               stan::model::index_uni(1)), obs_scale_mean,
                             obs_scale_sd));
            current_statement__ = 91;
            if (stan::math::logical_lt(
                  stan::model::rvalue(frac_obs, "frac_obs",
                    stan::model::index_uni(1)), 0)) {
              current_statement__ = 91;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 90;
              if (stan::math::logical_gt(
                    stan::model::rvalue(frac_obs, "frac_obs",
                      stan::model::index_uni(1)), 1)) {
                current_statement__ = 90;
                lp_accum__.add(stan::math::negative_infinity());
              } else {
                current_statement__ = 90;
                lp_accum__.add(-stan::math::log_diff_exp(
                                  stan::math::normal_lcdf(1, obs_scale_mean,
                                    obs_scale_sd),
                                  stan::math::normal_lcdf(0, obs_scale_mean,
                                    obs_scale_sd)));
              }
            }
          }
        }
        current_statement__ = 98;
        if (likelihood) {
          current_statement__ = 96;
          {
            stan::math::profile<local_scalar_t__> profile__("report lp",
              const_cast<stan::math::profile_map&>(profiles__));
            current_statement__ = 95;
            report_lp<propto__>(cases, cases_time, obs_reports, rep_phi,
              phi_mean, phi_sd, model_type, obs_weight, accumulate, lp__,
              lp_accum__, pstream__);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_estimate_infections_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> rho =
        std::vector<double>(rho_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      rho = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(ls_min, ls_max, lp__, rho_1dim__);
      std::vector<double> alpha =
        std::vector<double>(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, alpha_1dim__);
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(eta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      eta = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(eta_1dim__);
      Eigen::Matrix<double,-1,1> log_R =
        Eigen::Matrix<double,-1,1>::Constant(estimate_r,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      log_R = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(estimate_r);
      std::vector<double> initial_infections =
        std::vector<double>(estimate_r,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      initial_infections = in__.template read<
                             std::vector<local_scalar_t__>>(estimate_r);
      std::vector<double> initial_growth =
        std::vector<double>(initial_growth_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      initial_growth = in__.template read<
                         std::vector<local_scalar_t__>>(initial_growth_1dim__);
      std::vector<double> bp_sd =
        std::vector<double>(bp_sd_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      bp_sd = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, bp_sd_1dim__);
      std::vector<double> bp_effects =
        std::vector<double>(bp_n, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      bp_effects = in__.template read<std::vector<local_scalar_t__>>(bp_n);
      Eigen::Matrix<double,-1,1> delay_params =
        Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      delay_params = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>,
                       jacobian__>(delay_params_lower, lp__,
                       delay_params_length);
      current_statement__ = 9;
      stan::math::check_matching_dims("constraint", "delay_params",
        delay_params, "lower", delay_params_lower);
      Eigen::Matrix<double,-1,1> day_of_week_simplex =
        Eigen::Matrix<double,-1,1>::Constant(week_effect,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      day_of_week_simplex = in__.template read_constrain_simplex<
                              Eigen::Matrix<local_scalar_t__,-1,1>,
                              jacobian__>(lp__, week_effect);
      std::vector<double> frac_obs =
        std::vector<double>(frac_obs_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      frac_obs = in__.template read_constrain_lub<
                   std::vector<local_scalar_t__>, jacobian__>(0, 1, lp__,
                   frac_obs_1dim__);
      std::vector<double> rep_phi =
        std::vector<double>(model_type,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      rep_phi = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  model_type);
      Eigen::Matrix<double,-1,1> noise =
        Eigen::Matrix<double,-1,1>::Constant(noise_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> R =
        Eigen::Matrix<double,-1,1>::Constant(R_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> infections =
        Eigen::Matrix<double,-1,1>::Constant(t,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> reports =
        Eigen::Matrix<double,-1,1>::Constant(ot_h,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> obs_reports =
        Eigen::Matrix<double,-1,1>::Constant(ot,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> gt_rev_pmf =
        Eigen::Matrix<double,-1,1>::Constant(gt_rev_pmf_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(rho);
      out__.write(alpha);
      out__.write(eta);
      out__.write(log_R);
      out__.write(initial_infections);
      out__.write(initial_growth);
      out__.write(bp_sd);
      out__.write(bp_effects);
      out__.write(delay_params);
      out__.write(day_of_week_simplex);
      out__.write(frac_obs);
      out__.write(rep_phi);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 26;
      {
        stan::math::profile<local_scalar_t__> profile__("update gp",
          const_cast<stan::math::profile_map&>(profiles__));
        current_statement__ = 25;
        if (stan::math::logical_negation(fixed)) {
          current_statement__ = 23;
          stan::model::assign(noise,
            update_gp(PHI, M, L,
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1)),
              stan::model::rvalue(rho, "rho", stan::model::index_uni(1)),
              eta, gp_type, pstream__), "assigning variable noise");
        }
      }
      current_statement__ = 37;
      if (estimate_r) {
        current_statement__ = 31;
        {
          stan::math::profile<local_scalar_t__> profile__("gt",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 30;
          stan::model::assign(gt_rev_pmf,
            get_delay_rev_pmf(gt_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(gt_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups, delay_params, delay_params_groups,
              delay_dist, 1, 1, 0, pstream__),
            "assigning variable gt_rev_pmf");
        }
        current_statement__ = 33;
        {
          stan::math::profile<local_scalar_t__> profile__("R",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 32;
          stan::model::assign(R,
            update_Rt(ot_h,
              stan::model::rvalue(log_R, "log_R",
                stan::model::index_uni(estimate_r)), noise, breakpoints,
              bp_effects, stationary, pstream__), "assigning variable R");
        }
        current_statement__ = 35;
        {
          stan::math::profile<local_scalar_t__> profile__("infections",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 34;
          stan::model::assign(infections,
            generate_infections(R, seeding_time, gt_rev_pmf,
              initial_infections, initial_growth, pop, future_time, pstream__),
            "assigning variable infections");
        }
      } else {
        current_statement__ = 28;
        {
          stan::math::profile<local_scalar_t__> profile__("infections",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 27;
          stan::model::assign(infections,
            deconvolve_infections(shifted_cases, noise, fixed,
              backcalc_prior, pstream__), "assigning variable infections");
        }
      }
      current_statement__ = 47;
      if (delay_id) {
        current_statement__ = 40;
        stan::math::validate_non_negative_index("delay_rev_pmf",
          "delay_type_max[delay_id] + 1",
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(delay_id)) + 1));
        Eigen::Matrix<double,-1,1> delay_rev_pmf =
          Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(
                                                  delay_type_max,
                                                  "delay_type_max",
                                                  stan::model::index_uni(
                                                    delay_id)) + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 43;
        {
          stan::math::profile<local_scalar_t__> profile__("delays",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 42;
          stan::model::assign(delay_rev_pmf,
            get_delay_rev_pmf(delay_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(delay_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups, delay_params, delay_params_groups,
              delay_dist, 0, 1, 0, pstream__),
            "assigning variable delay_rev_pmf");
        }
        current_statement__ = 45;
        {
          stan::math::profile<local_scalar_t__> profile__("reports",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 44;
          stan::model::assign(reports,
            convolve_to_report(infections, delay_rev_pmf, seeding_time,
              pstream__), "assigning variable reports");
        }
      } else {
        current_statement__ = 38;
        stan::model::assign(reports,
          stan::model::rvalue(infections, "infections",
            stan::model::index_min_max((seeding_time + 1), t)),
          "assigning variable reports");
      }
      current_statement__ = 51;
      if (stan::math::logical_gt(week_effect, 1)) {
        current_statement__ = 49;
        {
          stan::math::profile<local_scalar_t__> profile__("day of the week",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 48;
          stan::model::assign(reports,
            day_of_week_effect(stan::model::deep_copy(reports), day_of_week,
              day_of_week_simplex, pstream__), "assigning variable reports");
        }
      }
      current_statement__ = 55;
      if (obs_scale) {
        current_statement__ = 53;
        {
          stan::math::profile<local_scalar_t__> profile__("scale",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 52;
          stan::model::assign(reports,
            scale_obs(stan::model::deep_copy(reports),
              (stan::math::logical_gt(obs_scale_sd, 0) ? stan::model::rvalue(
                                                           frac_obs,
                                                           "frac_obs",
                                                           stan::model::index_uni(
                                                             1)) : obs_scale_mean),
              pstream__), "assigning variable reports");
        }
      }
      current_statement__ = 65;
      if (trunc_id) {
        current_statement__ = 58;
        stan::math::validate_non_negative_index("trunc_rev_cmf",
          "delay_type_max[trunc_id] + 1",
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1));
        Eigen::Matrix<double,-1,1> trunc_rev_cmf =
          Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(
                                                  delay_type_max,
                                                  "delay_type_max",
                                                  stan::model::index_uni(
                                                    trunc_id)) + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 61;
        {
          stan::math::profile<local_scalar_t__> profile__("truncation",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 60;
          stan::model::assign(trunc_rev_cmf,
            get_delay_rev_pmf(trunc_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(trunc_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups, delay_params, delay_params_groups,
              delay_dist, 0, 1, 1, pstream__),
            "assigning variable trunc_rev_cmf");
        }
        current_statement__ = 63;
        {
          stan::math::profile<local_scalar_t__> profile__("truncate",
            const_cast<stan::math::profile_map&>(profiles__));
          current_statement__ = 62;
          stan::model::assign(obs_reports,
            truncate(
              stan::model::rvalue(reports, "reports",
                stan::model::index_min_max(1, ot)), trunc_rev_cmf, 0,
              pstream__), "assigning variable obs_reports");
        }
      } else {
        current_statement__ = 56;
        stan::model::assign(obs_reports,
          stan::model::rvalue(reports, "reports",
            stan::model::index_min_max(1, ot)),
          "assigning variable obs_reports");
      }
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "R", R, 0);
      if (emit_transformed_parameters__) {
        out__.write(noise);
        out__.write(R);
        out__.write(infections);
        out__.write(reports);
        out__.write(obs_reports);
        out__.write(gt_rev_pmf);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<int> imputed_reports =
        std::vector<int>(ot_h, std::numeric_limits<int>::min());
      Eigen::Matrix<double,-1,1> gen_R =
        Eigen::Matrix<double,-1,1>::Constant(gen_R_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> r =
        Eigen::Matrix<double,-1,1>::Constant(r_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 78;
      {
        stan::math::profile<local_scalar_t__>
          profile__("generated quantities",
          const_cast<stan::math::profile_map&>(profiles__));
        current_statement__ = 72;
        if (stan::math::logical_eq(estimate_r, 0)) {
          current_statement__ = 66;
          stan::math::validate_non_negative_index("delay_params_sample",
            "delay_params_length", delay_params_length);
          Eigen::Matrix<double,-1,1> delay_params_sample =
            Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 67;
          stan::model::assign(delay_params_sample,
            stan::math::to_vector(
              normal_lb_rng(delay_params_mean, delay_params_sd,
                delay_params_lower, base_rng__, pstream__)),
            "assigning variable delay_params_sample");
          current_statement__ = 68;
          stan::math::validate_non_negative_index("sampled_gt_rev_pmf",
            "delay_type_max[gt_id] + 1",
            (stan::model::rvalue(delay_type_max, "delay_type_max",
               stan::model::index_uni(gt_id)) + 1));
          Eigen::Matrix<double,-1,1> sampled_gt_rev_pmf =
            Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(
                                                    delay_type_max,
                                                    "delay_type_max",
                                                    stan::model::index_uni(
                                                      gt_id)) + 1),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 69;
          stan::model::assign(sampled_gt_rev_pmf,
            get_delay_rev_pmf(gt_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(gt_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups, delay_params_sample, delay_params_groups,
              delay_dist, 1, 1, 0, pstream__),
            "assigning variable sampled_gt_rev_pmf");
          current_statement__ = 70;
          stan::model::assign(gen_R,
            calculate_Rt(infections, seeding_time, sampled_gt_rev_pmf,
              rt_half_window, pstream__), "assigning variable gen_R");
        }
        current_statement__ = 73;
        stan::model::assign(r,
          calculate_growth(infections, (seeding_time + 1), pstream__),
          "assigning variable r");
        current_statement__ = 74;
        stan::model::assign(imputed_reports,
          report_rng(reports, rep_phi, model_type, base_rng__, pstream__),
          "assigning variable imputed_reports");
        current_statement__ = 77;
        if (return_likelihood) {
          current_statement__ = 75;
          stan::model::assign(log_lik,
            report_log_lik(cases,
              stan::model::rvalue(obs_reports, "obs_reports",
                stan::model::index_multi(cases_time)), rep_phi, model_type,
              obs_weight, pstream__), "assigning variable log_lik");
        }
      }
      out__.write(imputed_reports);
      out__.write(gen_R);
      out__.write(r);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(rho_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(rho,
        in__.read<std::vector<local_scalar_t__>>(rho_1dim__),
        "assigning variable rho");
      out__.write_free_lub(ls_min, ls_max, rho);
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha,
        in__.read<std::vector<local_scalar_t__>>(alpha_1dim__),
        "assigning variable alpha");
      out__.write_free_lb(0, alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(eta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(eta_1dim__),
        "assigning variable eta");
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> log_R =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(estimate_r,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(log_R,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(estimate_r),
        "assigning variable log_R");
      out__.write(log_R);
      std::vector<local_scalar_t__> initial_infections =
        std::vector<local_scalar_t__>(estimate_r, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(initial_infections,
        in__.read<std::vector<local_scalar_t__>>(estimate_r),
        "assigning variable initial_infections");
      out__.write(initial_infections);
      std::vector<local_scalar_t__> initial_growth =
        std::vector<local_scalar_t__>(initial_growth_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(initial_growth,
        in__.read<std::vector<local_scalar_t__>>(initial_growth_1dim__),
        "assigning variable initial_growth");
      out__.write(initial_growth);
      std::vector<local_scalar_t__> bp_sd =
        std::vector<local_scalar_t__>(bp_sd_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(bp_sd,
        in__.read<std::vector<local_scalar_t__>>(bp_sd_1dim__),
        "assigning variable bp_sd");
      out__.write_free_lb(0, bp_sd);
      std::vector<local_scalar_t__> bp_effects =
        std::vector<local_scalar_t__>(bp_n, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(bp_effects,
        in__.read<std::vector<local_scalar_t__>>(bp_n),
        "assigning variable bp_effects");
      out__.write(bp_effects);
      Eigen::Matrix<local_scalar_t__,-1,1> delay_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delay_params_length,
          DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(delay_params,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(delay_params_length),
        "assigning variable delay_params");
      out__.write_free_lb(delay_params_lower, delay_params);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(day_of_week_simplex,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(week_effect),
        "assigning variable day_of_week_simplex");
      out__.write_free_simplex(day_of_week_simplex);
      std::vector<local_scalar_t__> frac_obs =
        std::vector<local_scalar_t__>(frac_obs_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(frac_obs,
        in__.read<std::vector<local_scalar_t__>>(frac_obs_1dim__),
        "assigning variable frac_obs");
      out__.write_free_lub(0, 1, frac_obs);
      std::vector<local_scalar_t__> rep_phi =
        std::vector<local_scalar_t__>(model_type, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(rep_phi,
        in__.read<std::vector<local_scalar_t__>>(model_type),
        "assigning variable rep_phi");
      out__.write_free_lb(0, rep_phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{static_cast<size_t>(rho_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(alpha_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{static_cast<size_t>(eta_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "log_R", "double",
        std::vector<size_t>{static_cast<size_t>(estimate_r)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "initial_infections", "double",
        std::vector<size_t>{static_cast<size_t>(estimate_r)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "initial_growth",
        "double",
        std::vector<size_t>{static_cast<size_t>(initial_growth_1dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "bp_sd", "double",
        std::vector<size_t>{static_cast<size_t>(bp_sd_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "bp_effects",
        "double", std::vector<size_t>{static_cast<size_t>(bp_n)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "delay_params",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_params_length)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "day_of_week_simplex", "double",
        std::vector<size_t>{static_cast<size_t>(week_effect)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "frac_obs",
        "double", std::vector<size_t>{static_cast<size_t>(frac_obs_1dim__)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "rep_phi",
        "double", std::vector<size_t>{static_cast<size_t>(model_type)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> rho =
        std::vector<local_scalar_t__>(rho_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      rho = context__.vals_r("rho");
      out__.write_free_lub(ls_min, ls_max, rho);
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      alpha = context__.vals_r("alpha");
      out__.write_free_lb(0, alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eta_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 3;
        eta_flat__ = context__.vals_r("eta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(eta, eta_flat__[(pos__ - 1)],
            "assigning variable eta", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> log_R =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(estimate_r,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_R_flat__;
        current_statement__ = 4;
        log_R_flat__ = context__.vals_r("log_R");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(log_R, log_R_flat__[(pos__ - 1)],
            "assigning variable log_R", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_R);
      std::vector<local_scalar_t__> initial_infections =
        std::vector<local_scalar_t__>(estimate_r, DUMMY_VAR__);
      current_statement__ = 5;
      initial_infections = context__.vals_r("initial_infections");
      out__.write(initial_infections);
      std::vector<local_scalar_t__> initial_growth =
        std::vector<local_scalar_t__>(initial_growth_1dim__, DUMMY_VAR__);
      current_statement__ = 6;
      initial_growth = context__.vals_r("initial_growth");
      out__.write(initial_growth);
      std::vector<local_scalar_t__> bp_sd =
        std::vector<local_scalar_t__>(bp_sd_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      bp_sd = context__.vals_r("bp_sd");
      out__.write_free_lb(0, bp_sd);
      std::vector<local_scalar_t__> bp_effects =
        std::vector<local_scalar_t__>(bp_n, DUMMY_VAR__);
      current_statement__ = 8;
      bp_effects = context__.vals_r("bp_effects");
      out__.write(bp_effects);
      Eigen::Matrix<local_scalar_t__,-1,1> delay_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delay_params_length,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> delay_params_flat__;
        current_statement__ = 9;
        delay_params_flat__ = context__.vals_r("delay_params");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(delay_params, delay_params_flat__[(pos__ - 1)],
            "assigning variable delay_params", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(delay_params_lower, delay_params);
      Eigen::Matrix<local_scalar_t__,-1,1> day_of_week_simplex =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(week_effect,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> day_of_week_simplex_flat__;
        current_statement__ = 10;
        day_of_week_simplex_flat__ = context__.vals_r("day_of_week_simplex");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(day_of_week_simplex,
            day_of_week_simplex_flat__[(pos__ - 1)],
            "assigning variable day_of_week_simplex",
            stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(day_of_week_simplex);
      std::vector<local_scalar_t__> frac_obs =
        std::vector<local_scalar_t__>(frac_obs_1dim__, DUMMY_VAR__);
      current_statement__ = 11;
      frac_obs = context__.vals_r("frac_obs");
      out__.write_free_lub(0, 1, frac_obs);
      std::vector<local_scalar_t__> rep_phi =
        std::vector<local_scalar_t__>(model_type, DUMMY_VAR__);
      current_statement__ = 12;
      rep_phi = context__.vals_r("rep_phi");
      out__.write_free_lb(0, rep_phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"rho", "alpha", "eta", "log_R",
                "initial_infections", "initial_growth", "bp_sd",
                "bp_effects", "delay_params", "day_of_week_simplex",
                "frac_obs", "rep_phi"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"noise", "R", "infections", "reports", "obs_reports",
             "gt_rev_pmf"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"imputed_reports", "gen_R", "r", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    rho_1dim__)},
                std::vector<size_t>{static_cast<size_t>(alpha_1dim__)},
                std::vector<size_t>{static_cast<size_t>(eta_1dim__)},
                std::vector<size_t>{static_cast<size_t>(estimate_r)},
                std::vector<size_t>{static_cast<size_t>(estimate_r)},
                std::vector<size_t>{static_cast<size_t>(initial_growth_1dim__)},
                std::vector<size_t>{static_cast<size_t>(bp_sd_1dim__)},
                std::vector<size_t>{static_cast<size_t>(bp_n)},
                std::vector<size_t>{static_cast<size_t>(delay_params_length)},
                std::vector<size_t>{static_cast<size_t>(week_effect)},
                std::vector<size_t>{static_cast<size_t>(frac_obs_1dim__)},
                std::vector<size_t>{static_cast<size_t>(model_type)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(noise_1dim__)},
             std::vector<size_t>{static_cast<size_t>(R_1dim__)},
             std::vector<size_t>{static_cast<size_t>(t)},
             std::vector<size_t>{static_cast<size_t>(ot_h)},
             std::vector<size_t>{static_cast<size_t>(ot)},
             std::vector<size_t>{static_cast<size_t>(gt_rev_pmf_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(ot_h)},
             std::vector<size_t>{static_cast<size_t>(gen_R_1dim__)},
             std::vector<size_t>{static_cast<size_t>(r_1dim__)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_R" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
      param_names__.emplace_back(std::string() + "initial_infections" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= initial_growth_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "initial_growth" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "bp_sd" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= bp_n; ++sym1__) {
      param_names__.emplace_back(std::string() + "bp_effects" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
      param_names__.emplace_back(std::string() + "delay_params" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
      param_names__.emplace_back(std::string() + "day_of_week_simplex" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= frac_obs_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "frac_obs" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
      param_names__.emplace_back(std::string() + "rep_phi" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= noise_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "noise" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        param_names__.emplace_back(std::string() + "infections" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        param_names__.emplace_back(std::string() + "reports" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ot; ++sym1__) {
        param_names__.emplace_back(std::string() + "obs_reports" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= gt_rev_pmf_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "gt_rev_pmf" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        param_names__.emplace_back(std::string() + "imputed_reports" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= gen_R_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "gen_R" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= r_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "r" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= rho_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= eta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_R" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= estimate_r; ++sym1__) {
      param_names__.emplace_back(std::string() + "initial_infections" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= initial_growth_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "initial_growth" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= bp_sd_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "bp_sd" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= bp_n; ++sym1__) {
      param_names__.emplace_back(std::string() + "bp_effects" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
      param_names__.emplace_back(std::string() + "delay_params" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (week_effect - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "day_of_week_simplex" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= frac_obs_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "frac_obs" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
      param_names__.emplace_back(std::string() + "rep_phi" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= noise_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "noise" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= R_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        param_names__.emplace_back(std::string() + "infections" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        param_names__.emplace_back(std::string() + "reports" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ot; ++sym1__) {
        param_names__.emplace_back(std::string() + "obs_reports" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= gt_rev_pmf_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "gt_rev_pmf" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ot_h; ++sym1__) {
        param_names__.emplace_back(std::string() + "imputed_reports" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= gen_R_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "gen_R" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= r_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "r" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(rho_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"log_R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(estimate_r) + "},\"block\":\"parameters\"},{\"name\":\"initial_infections\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(estimate_r) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"initial_growth\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(initial_growth_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bp_sd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(bp_sd_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bp_effects\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(bp_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"delay_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(delay_params_length) + "},\"block\":\"parameters\"},{\"name\":\"day_of_week_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(week_effect) + "},\"block\":\"parameters\"},{\"name\":\"frac_obs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(frac_obs_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rep_phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(model_type) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(noise_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(R_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(t) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reports\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ot_h) + "},\"block\":\"transformed_parameters\"},{\"name\":\"obs_reports\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gt_rev_pmf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gt_rev_pmf_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"imputed_reports\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ot_h) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"gen_R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gen_R_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(rho_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(alpha_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"log_R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(estimate_r) + "},\"block\":\"parameters\"},{\"name\":\"initial_infections\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(estimate_r) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"initial_growth\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(initial_growth_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bp_sd\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(bp_sd_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bp_effects\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(bp_n) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"delay_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(delay_params_length) + "},\"block\":\"parameters\"},{\"name\":\"day_of_week_simplex\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((week_effect -1)) + "},\"block\":\"parameters\"},{\"name\":\"frac_obs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(frac_obs_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rep_phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(model_type) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(noise_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(R_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"infections\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(t) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reports\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ot_h) + "},\"block\":\"transformed_parameters\"},{\"name\":\"obs_reports\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ot) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gt_rev_pmf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gt_rev_pmf_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"imputed_reports\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ot_h) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"gen_R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gen_R_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((rho_1dim__ + alpha_1dim__) +
      eta_1dim__) + estimate_r) + estimate_r) + initial_growth_1dim__) +
      bp_sd_1dim__) + bp_n) + delay_params_length) + week_effect) +
      frac_obs_1dim__) + model_type);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((noise_1dim__ + R_1dim__) + t) + ot_h) + ot) + gt_rev_pmf_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * ((((ot_h +
      gen_R_1dim__) + r_1dim__) + log_lik_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((rho_1dim__ + alpha_1dim__) +
      eta_1dim__) + estimate_r) + estimate_r) + initial_growth_1dim__) +
      bp_sd_1dim__) + bp_n) + delay_params_length) + week_effect) +
      frac_obs_1dim__) + model_type);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((noise_1dim__ + R_1dim__) + t) + ot_h) + ot) + gt_rev_pmf_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * ((((ot_h +
      gen_R_1dim__) + r_1dim__) + log_lik_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_estimate_infections_namespace::model_estimate_infections;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_estimate_infections_namespace::profiles__;
}
#endif
#endif
