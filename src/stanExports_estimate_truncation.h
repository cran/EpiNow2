// Generated by rstantools.  Do not edit by hand.

/*
    EpiNow2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiNow2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiNow2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.35.0
#include <stan/model/model_header.hpp>
namespace model_estimate_truncation_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 363> locations_array__ =
  {" (found before start of program)",
  " (in 'estimate_truncation', line 510, column 2 to column 71)",
  " (in 'estimate_truncation', line 511, column 2 to column 20)",
  " (in 'estimate_truncation', line 512, column 2 to column 22)",
  " (in 'estimate_truncation', line 515, column 2 to column 32)",
  " (in 'estimate_truncation', line 516, column 2 to line 518, column 4)",
  " (in 'estimate_truncation', line 519, column 2 to line 524, column 4)",
  " (in 'estimate_truncation', line 554, column 2 to line 556, column 4)",
  " (in 'estimate_truncation', line 557, column 2 to column 61)",
  " (in 'estimate_truncation', line 526, column 9 to column 10)",
  " (in 'estimate_truncation', line 526, column 2 to column 21)",
  " (in 'estimate_truncation', line 528, column 2 to column 72)",
  " (in 'estimate_truncation', line 532, column 4 to line 533, column 76)",
  " (in 'estimate_truncation', line 531, column 30 to line 534, column 4)",
  " (in 'estimate_truncation', line 531, column 2 to line 534, column 4)",
  " (in 'estimate_truncation', line 525, column 2 to line 535, column 3)",
  " (in 'estimate_truncation', line 560, column 4 to line 562, column 6)",
  " (in 'estimate_truncation', line 559, column 24 to line 563, column 3)",
  " (in 'estimate_truncation', line 559, column 2 to line 563, column 3)",
  " (in 'estimate_truncation', line 570, column 8 to column 70)",
  " (in 'estimate_truncation', line 569, column 13 to line 571, column 7)",
  " (in 'estimate_truncation', line 568, column 8 to column 26)",
  " (in 'estimate_truncation', line 567, column 32 to line 569, column 7)",
  " (in 'estimate_truncation', line 567, column 6 to line 571, column 7)",
  " (in 'estimate_truncation', line 566, column 48 to line 572, column 5)",
  " (in 'estimate_truncation', line 566, column 4 to line 572, column 5)",
  " (in 'estimate_truncation', line 565, column 30 to line 573, column 3)",
  " (in 'estimate_truncation', line 565, column 2 to line 573, column 3)",
  " (in 'estimate_truncation', line 539, column 2 to line 542, column 4)",
  " (in 'estimate_truncation', line 543, column 2 to column 27)",
  " (in 'estimate_truncation', line 543, column 23 to column 24)",
  " (in 'estimate_truncation', line 544, column 2 to column 29)",
  " (in 'estimate_truncation', line 544, column 25 to column 26)",
  " (in 'estimate_truncation', line 549, column 6 to column 77)",
  " (in 'estimate_truncation', line 548, column 45 to line 550, column 5)",
  " (in 'estimate_truncation', line 548, column 4 to line 550, column 5)",
  " (in 'estimate_truncation', line 547, column 30 to line 551, column 3)",
  " (in 'estimate_truncation', line 547, column 2 to line 551, column 3)",
  " (in 'estimate_truncation', line 468, column 2 to column 8)",
  " (in 'estimate_truncation', line 469, column 2 to column 15)",
  " (in 'estimate_truncation', line 470, column 8 to column 9)",
  " (in 'estimate_truncation', line 470, column 11 to column 19)",
  " (in 'estimate_truncation', line 470, column 2 to column 29)",
  " (in 'estimate_truncation', line 471, column 8 to column 16)",
  " (in 'estimate_truncation', line 471, column 2 to column 31)",
  " (in 'estimate_truncation', line 473, column 2 to column 25)",
  " (in 'estimate_truncation', line 474, column 2 to column 27)",
  " (in 'estimate_truncation', line 475, column 2 to column 28)",
  " (in 'estimate_truncation', line 476, column 8 to column 17)",
  " (in 'estimate_truncation', line 476, column 2 to column 44)",
  " (in 'estimate_truncation', line 477, column 8 to column 17)",
  " (in 'estimate_truncation', line 477, column 2 to column 45)",
  " (in 'estimate_truncation', line 479, column 2 to column 37)",
  " (in 'estimate_truncation', line 480, column 31 to column 50)",
  " (in 'estimate_truncation', line 480, column 2 to column 65)",
  " (in 'estimate_truncation', line 481, column 8 to column 22)",
  " (in 'estimate_truncation', line 481, column 2 to column 59)",
  " (in 'estimate_truncation', line 483, column 2 to column 37)",
  " (in 'estimate_truncation', line 484, column 9 to column 28)",
  " (in 'estimate_truncation', line 484, column 2 to column 49)",
  " (in 'estimate_truncation', line 485, column 37 to column 56)",
  " (in 'estimate_truncation', line 485, column 2 to column 76)",
  " (in 'estimate_truncation', line 486, column 20 to column 39)",
  " (in 'estimate_truncation', line 486, column 2 to column 57)",
  " (in 'estimate_truncation', line 487, column 8 to column 21)",
  " (in 'estimate_truncation', line 487, column 2 to column 58)",
  " (in 'estimate_truncation', line 489, column 8 to column 17)",
  " (in 'estimate_truncation', line 489, column 2 to column 47)",
  " (in 'estimate_truncation', line 490, column 2 to column 29)",
  " (in 'estimate_truncation', line 491, column 8 to column 15)",
  " (in 'estimate_truncation', line 491, column 2 to column 46)",
  " (in 'estimate_truncation', line 492, column 8 to column 15)",
  " (in 'estimate_truncation', line 492, column 2 to column 47)",
  " (in 'estimate_truncation', line 493, column 8 to column 23)",
  " (in 'estimate_truncation', line 493, column 2 to column 59)",
  " (in 'estimate_truncation', line 496, column 2 to column 19)",
  " (in 'estimate_truncation', line 497, column 8 to column 16)",
  " (in 'estimate_truncation', line 497, column 2 to column 39)",
  " (in 'estimate_truncation', line 498, column 8 to column 16)",
  " (in 'estimate_truncation', line 498, column 2 to column 41)",
  " (in 'estimate_truncation', line 499, column 8 to column 19)",
  " (in 'estimate_truncation', line 499, column 2 to column 40)",
  " (in 'estimate_truncation', line 500, column 2 to line 503, column 4)",
  " (in 'estimate_truncation', line 505, column 4 to column 31)",
  " (in 'estimate_truncation', line 506, column 4 to column 61)",
  " (in 'estimate_truncation', line 504, column 24 to line 507, column 3)",
  " (in 'estimate_truncation', line 504, column 2 to line 507, column 3)",
  " (in 'estimate_truncation', line 510, column 37 to column 56)",
  " (in 'estimate_truncation', line 516, column 9 to column 37)",
  " (in 'estimate_truncation', line 516, column 39 to column 51)",
  " (in 'estimate_truncation', line 519, column 9 to column 37)",
  " (in 'estimate_truncation', line 554, column 9 to column 37)",
  " (in 'estimate_truncation', line 554, column 39 to column 47)",
  " (in 'estimate_truncation', line 557, column 9 to column 37)",
  " (in 'estimate_truncation', line 557, column 39 to column 51)",
  " (in 'estimate_truncation', line 12, column 2 to column 30)",
  " (in 'estimate_truncation', line 13, column 2 to column 41)",
  " (in 'estimate_truncation', line 14, column 2 to column 16)",
  " (in 'estimate_truncation', line 15, column 2 to column 41)",
  " (in 'estimate_truncation', line 16, column 2 to column 19)",
  " (in 'estimate_truncation', line 17, column 2 to column 42)",
  " (in 'estimate_truncation', line 11, column 62 to line 18, column 1)",
  " (in 'estimate_truncation', line 29, column 2 to column 30)",
  " (in 'estimate_truncation', line 30, column 2 to column 41)",
  " (in 'estimate_truncation', line 31, column 2 to column 19)",
  " (in 'estimate_truncation', line 32, column 2 to column 41)",
  " (in 'estimate_truncation', line 32, column 41 to column 42)",
  " (in 'estimate_truncation', line 33, column 2 to column 30)",
  " (in 'estimate_truncation', line 34, column 2 to column 42)",
  " (in 'estimate_truncation', line 28, column 61 to line 35, column 1)",
  " (in 'estimate_truncation', line 50, column 2 to column 29)",
  " (in 'estimate_truncation', line 51, column 2 to column 29)",
  " (in 'estimate_truncation', line 52, column 9 to column 12)",
  " (in 'estimate_truncation', line 52, column 2 to column 16)",
  " (in 'estimate_truncation', line 55, column 4 to column 74)",
  " (in 'estimate_truncation', line 54, column 29 to line 56, column 3)",
  " (in 'estimate_truncation', line 54, column 2 to line 56, column 3)",
  " (in 'estimate_truncation', line 59, column 4 to column 59)",
  " (in 'estimate_truncation', line 58, column 18 to line 60, column 3)",
  " (in 'estimate_truncation', line 58, column 2 to line 60, column 3)",
  " (in 'estimate_truncation', line 63, column 4 to column 65)",
  " (in 'estimate_truncation', line 64, column 4 to column 75)",
  " (in 'estimate_truncation', line 62, column 20 to line 65, column 3)",
  " (in 'estimate_truncation', line 62, column 2 to line 65, column 3)",
  " (in 'estimate_truncation', line 69, column 6 to column 66)",
  " (in 'estimate_truncation', line 70, column 6 to column 77)",
  " (in 'estimate_truncation', line 68, column 30 to line 71, column 5)",
  " (in 'estimate_truncation', line 68, column 4 to line 71, column 5)",
  " (in 'estimate_truncation', line 67, column 18 to line 72, column 3)",
  " (in 'estimate_truncation', line 67, column 2 to line 72, column 3)",
  " (in 'estimate_truncation', line 74, column 2 to column 11)",
  " (in 'estimate_truncation', line 49, column 58 to line 75, column 1)",
  " (in 'estimate_truncation', line 93, column 2 to column 35)",
  " (in 'estimate_truncation', line 94, column 2 to column 43)",
  " (in 'estimate_truncation', line 97, column 4 to column 44)",
  " (in 'estimate_truncation', line 96, column 19 to line 98, column 3)",
  " (in 'estimate_truncation', line 96, column 2 to line 98, column 3)",
  " (in 'estimate_truncation', line 100, column 9 to column 10)",
  " (in 'estimate_truncation', line 100, column 2 to column 80)",
  " (in 'estimate_truncation', line 101, column 2 to column 45)",
  " (in 'estimate_truncation', line 92, column 44 to line 102, column 1)",
  " (in 'estimate_truncation', line 109, column 9 to column 10)",
  " (in 'estimate_truncation', line 109, column 2 to column 17)",
  " (in 'estimate_truncation', line 110, column 9 to column 10)",
  " (in 'estimate_truncation', line 110, column 2 to column 23)",
  " (in 'estimate_truncation', line 120, column 4 to column 54)",
  " (in 'estimate_truncation', line 119, column 9 to line 121, column 3)",
  " (in 'estimate_truncation', line 117, column 6 to column 59)",
  " (in 'estimate_truncation', line 116, column 19 to line 118, column 5)",
  " (in 'estimate_truncation', line 116, column 4 to line 118, column 5)",
  " (in 'estimate_truncation', line 115, column 24 to line 119, column 3)",
  " (in 'estimate_truncation', line 115, column 9 to line 121, column 3)",
  " (in 'estimate_truncation', line 113, column 6 to column 63)",
  " (in 'estimate_truncation', line 112, column 19 to line 114, column 5)",
  " (in 'estimate_truncation', line 112, column 4 to line 114, column 5)",
  " (in 'estimate_truncation', line 111, column 17 to line 115, column 3)",
  " (in 'estimate_truncation', line 111, column 2 to line 121, column 3)",
  " (in 'estimate_truncation', line 132, column 4 to column 16)",
  " (in 'estimate_truncation', line 131, column 9 to line 133, column 3)",
  " (in 'estimate_truncation', line 124, column 4 to column 28)",
  " (in 'estimate_truncation', line 125, column 4 to column 28)",
  " (in 'estimate_truncation', line 127, column 6 to column 71)",
  " (in 'estimate_truncation', line 126, column 15 to line 128, column 5)",
  " (in 'estimate_truncation', line 126, column 4 to line 128, column 5)",
  " (in 'estimate_truncation', line 130, column 4 to column 53)",
  " (in 'estimate_truncation', line 123, column 13 to line 131, column 3)",
  " (in 'estimate_truncation', line 123, column 2 to line 133, column 3)",
  " (in 'estimate_truncation', line 134, column 2 to column 20)",
  " (in 'estimate_truncation', line 108, column 55 to line 135, column 1)",
  " (in 'estimate_truncation', line 149, column 2 to column 32)",
  " (in 'estimate_truncation', line 150, column 9 to column 11)",
  " (in 'estimate_truncation', line 150, column 2 to column 41)",
  " (in 'estimate_truncation', line 151, column 2 to column 47)",
  " (in 'estimate_truncation', line 148, column 82 to line 152, column 1)",
  " (in 'estimate_truncation', line 165, column 2 to column 32)",
  " (in 'estimate_truncation', line 166, column 9 to column 10)",
  " (in 'estimate_truncation', line 166, column 2 to column 27)",
  " (in 'estimate_truncation', line 167, column 2 to column 38)",
  " (in 'estimate_truncation', line 168, column 2 to column 25)",
  " (in 'estimate_truncation', line 164, column 48 to line 169, column 1)",
  " (in 'estimate_truncation', line 183, column 2 to column 32)",
  " (in 'estimate_truncation', line 184, column 2 to column 46)",
  " (in 'estimate_truncation', line 185, column 9 to column 10)",
  " (in 'estimate_truncation', line 185, column 2 to column 36)",
  " (in 'estimate_truncation', line 187, column 2 to column 36)",
  " (in 'estimate_truncation', line 188, column 2 to column 34)",
  " (in 'estimate_truncation', line 189, column 2 to column 46)",
  " (in 'estimate_truncation', line 195, column 4 to column 70)",
  " (in 'estimate_truncation', line 194, column 9 to line 196, column 3)",
  " (in 'estimate_truncation', line 193, column 4 to column 70)",
  " (in 'estimate_truncation', line 192, column 19 to line 194, column 3)",
  " (in 'estimate_truncation', line 192, column 2 to line 196, column 3)",
  " (in 'estimate_truncation', line 197, column 2 to column 24)",
  " (in 'estimate_truncation', line 182, column 75 to line 198, column 1)",
  " (in 'estimate_truncation', line 215, column 2 to column 49)",
  " (in 'estimate_truncation', line 219, column 6 to column 63)",
  " (in 'estimate_truncation', line 217, column 30 to line 220, column 5)",
  " (in 'estimate_truncation', line 217, column 4 to line 220, column 5)",
  " (in 'estimate_truncation', line 223, column 6 to column 57)",
  " (in 'estimate_truncation', line 221, column 28 to line 224, column 5)",
  " (in 'estimate_truncation', line 221, column 4 to line 224, column 5)",
  " (in 'estimate_truncation', line 216, column 18 to line 225, column 3)",
  " (in 'estimate_truncation', line 216, column 2 to line 225, column 3)",
  " (in 'estimate_truncation', line 214, column 73 to line 226, column 1)",
  " (in 'estimate_truncation', line 246, column 2 to column 48)",
  " (in 'estimate_truncation', line 247, column 9 to column 10)",
  " (in 'estimate_truncation', line 247, column 2 to column 24)",
  " (in 'estimate_truncation', line 248, column 8 to column 9)",
  " (in 'estimate_truncation', line 248, column 2 to column 25)",
  " (in 'estimate_truncation', line 265, column 4 to column 38)",
  " (in 'estimate_truncation', line 266, column 4 to column 22)",
  " (in 'estimate_truncation', line 264, column 9 to line 267, column 3)",
  " (in 'estimate_truncation', line 250, column 4 to column 34)",
  " (in 'estimate_truncation', line 251, column 4 to column 14)",
  " (in 'estimate_truncation', line 252, column 4 to column 24)",
  " (in 'estimate_truncation', line 253, column 4 to column 35)",
  " (in 'estimate_truncation', line 256, column 8 to column 47)",
  " (in 'estimate_truncation', line 255, column 27 to line 257, column 7)",
  " (in 'estimate_truncation', line 255, column 6 to line 257, column 7)",
  " (in 'estimate_truncation', line 259, column 8 to column 25)",
  " (in 'estimate_truncation', line 258, column 44 to line 260, column 7)",
  " (in 'estimate_truncation', line 258, column 6 to line 260, column 7)",
  " (in 'estimate_truncation', line 261, column 6 to column 13)",
  " (in 'estimate_truncation', line 254, column 39 to line 262, column 5)",
  " (in 'estimate_truncation', line 254, column 4 to line 262, column 5)",
  " (in 'estimate_truncation', line 263, column 4 to column 33)",
  " (in 'estimate_truncation', line 249, column 18 to line 264, column 3)",
  " (in 'estimate_truncation', line 249, column 2 to line 267, column 3)",
  " (in 'estimate_truncation', line 284, column 6 to column 63)",
  " (in 'estimate_truncation', line 283, column 11 to line 285, column 5)",
  " (in 'estimate_truncation', line 282, column 6 to column 39)",
  " (in 'estimate_truncation', line 281, column 21 to line 283, column 5)",
  " (in 'estimate_truncation', line 281, column 4 to line 285, column 5)",
  " (in 'estimate_truncation', line 280, column 9 to line 286, column 3)",
  " (in 'estimate_truncation', line 269, column 4 to column 78)",
  " (in 'estimate_truncation', line 271, column 6 to column 59)",
  " (in 'estimate_truncation', line 271, column 55 to column 56)",
  " (in 'estimate_truncation', line 270, column 20 to line 272, column 5)",
  " (in 'estimate_truncation', line 270, column 4 to line 272, column 5)",
  " (in 'estimate_truncation', line 276, column 6 to line 278, column 17)",
  " (in 'estimate_truncation', line 275, column 11 to line 279, column 5)",
  " (in 'estimate_truncation', line 274, column 6 to column 58)",
  " (in 'estimate_truncation', line 273, column 21 to line 275, column 5)",
  " (in 'estimate_truncation', line 273, column 4 to line 279, column 5)",
  " (in 'estimate_truncation', line 268, column 18 to line 280, column 3)",
  " (in 'estimate_truncation', line 268, column 2 to line 286, column 3)",
  " (in 'estimate_truncation', line 245, column 60 to line 287, column 1)",
  " (in 'estimate_truncation', line 304, column 2 to column 32)",
  " (in 'estimate_truncation', line 305, column 9 to column 10)",
  " (in 'estimate_truncation', line 305, column 2 to column 20)",
  " (in 'estimate_truncation', line 313, column 4 to column 54)",
  " (in 'estimate_truncation', line 315, column 6 to column 83)",
  " (in 'estimate_truncation', line 314, column 19 to line 316, column 5)",
  " (in 'estimate_truncation', line 314, column 4 to line 316, column 5)",
  " (in 'estimate_truncation', line 312, column 9 to line 317, column 3)",
  " (in 'estimate_truncation', line 310, column 6 to column 64)",
  " (in 'estimate_truncation', line 309, column 19 to line 311, column 5)",
  " (in 'estimate_truncation', line 309, column 4 to line 311, column 5)",
  " (in 'estimate_truncation', line 308, column 23 to line 312, column 3)",
  " (in 'estimate_truncation', line 308, column 2 to line 317, column 3)",
  " (in 'estimate_truncation', line 318, column 2 to column 18)",
  " (in 'estimate_truncation', line 303, column 73 to line 319, column 1)",
  " (in 'estimate_truncation', line 333, column 2 to column 32)",
  " (in 'estimate_truncation', line 334, column 8 to column 9)",
  " (in 'estimate_truncation', line 334, column 2 to column 31)",
  " (in 'estimate_truncation', line 335, column 2 to column 24)",
  " (in 'estimate_truncation', line 337, column 4 to column 49)",
  " (in 'estimate_truncation', line 336, column 18 to line 338, column 3)",
  " (in 'estimate_truncation', line 336, column 2 to line 338, column 3)",
  " (in 'estimate_truncation', line 348, column 8 to column 97)",
  " (in 'estimate_truncation', line 347, column 13 to line 349, column 7)",
  " (in 'estimate_truncation', line 346, column 8 to column 78)",
  " (in 'estimate_truncation', line 345, column 28 to line 347, column 7)",
  " (in 'estimate_truncation', line 345, column 6 to line 349, column 7)",
  " (in 'estimate_truncation', line 343, column 11 to line 350, column 5)",
  " (in 'estimate_truncation', line 342, column 6 to column 29)",
  " (in 'estimate_truncation', line 341, column 27 to line 343, column 5)",
  " (in 'estimate_truncation', line 341, column 4 to line 350, column 5)",
  " (in 'estimate_truncation', line 340, column 17 to line 351, column 3)",
  " (in 'estimate_truncation', line 340, column 2 to line 351, column 3)",
  " (in 'estimate_truncation', line 352, column 2 to column 26)",
  " (in 'estimate_truncation', line 332, column 77 to line 353, column 1)",
  " (in 'estimate_truncation', line 359, column 8 to column 19)",
  " (in 'estimate_truncation', line 359, column 2 to column 29)",
  " (in 'estimate_truncation', line 361, column 4 to column 15)",
  " (in 'estimate_truncation', line 366, column 8 to line 367, column 53)",
  " (in 'estimate_truncation', line 365, column 13 to line 368, column 7)",
  " (in 'estimate_truncation', line 364, column 8 to column 47)",
  " (in 'estimate_truncation', line 363, column 28 to line 365, column 7)",
  " (in 'estimate_truncation', line 363, column 6 to line 368, column 7)",
  " (in 'estimate_truncation', line 362, column 69 to line 369, column 5)",
  " (in 'estimate_truncation', line 362, column 4 to line 369, column 5)",
  " (in 'estimate_truncation', line 360, column 27 to line 370, column 3)",
  " (in 'estimate_truncation', line 360, column 2 to line 370, column 3)",
  " (in 'estimate_truncation', line 371, column 2 to column 13)",
  " (in 'estimate_truncation', line 358, column 2 to line 372, column 1)",
  " (in 'estimate_truncation', line 382, column 9 to column 12)",
  " (in 'estimate_truncation', line 382, column 2 to column 39)",
  " (in 'estimate_truncation', line 383, column 2 to column 22)",
  " (in 'estimate_truncation', line 384, column 2 to column 14)",
  " (in 'estimate_truncation', line 404, column 6 to column 57)",
  " (in 'estimate_truncation', line 405, column 6 to column 63)",
  " (in 'estimate_truncation', line 406, column 6 to column 42)",
  " (in 'estimate_truncation', line 410, column 8 to line 412, column 10)",
  " (in 'estimate_truncation', line 409, column 13 to line 413, column 7)",
  " (in 'estimate_truncation', line 408, column 8 to column 49)",
  " (in 'estimate_truncation', line 407, column 28 to line 409, column 7)",
  " (in 'estimate_truncation', line 407, column 6 to line 413, column 7)",
  " (in 'estimate_truncation', line 403, column 11 to line 414, column 5)",
  " (in 'estimate_truncation', line 387, column 6 to column 57)",
  " (in 'estimate_truncation', line 388, column 6 to column 63)",
  " (in 'estimate_truncation', line 389, column 13 to column 45)",
  " (in 'estimate_truncation', line 389, column 6 to line 394, column 8)",
  " (in 'estimate_truncation', line 395, column 6 to column 59)",
  " (in 'estimate_truncation', line 399, column 8 to line 401, column 10)",
  " (in 'estimate_truncation', line 398, column 13 to line 402, column 7)",
  " (in 'estimate_truncation', line 397, column 8 to column 42)",
  " (in 'estimate_truncation', line 396, column 28 to line 398, column 7)",
  " (in 'estimate_truncation', line 396, column 6 to line 402, column 7)",
  " (in 'estimate_truncation', line 386, column 26 to line 403, column 5)",
  " (in 'estimate_truncation', line 386, column 4 to line 414, column 5)",
  " (in 'estimate_truncation', line 415, column 4 to column 26)",
  " (in 'estimate_truncation', line 385, column 81 to line 416, column 3)",
  " (in 'estimate_truncation', line 385, column 2 to line 416, column 3)",
  " (in 'estimate_truncation', line 418, column 4 to line 421, column 6)",
  " (in 'estimate_truncation', line 417, column 21 to line 422, column 3)",
  " (in 'estimate_truncation', line 417, column 2 to line 422, column 3)",
  " (in 'estimate_truncation', line 424, column 4 to column 30)",
  " (in 'estimate_truncation', line 423, column 18 to line 425, column 3)",
  " (in 'estimate_truncation', line 423, column 2 to line 425, column 3)",
  " (in 'estimate_truncation', line 427, column 4 to column 23)",
  " (in 'estimate_truncation', line 426, column 19 to line 428, column 3)",
  " (in 'estimate_truncation', line 426, column 2 to line 428, column 3)",
  " (in 'estimate_truncation', line 429, column 2 to column 13)",
  " (in 'estimate_truncation', line 380, column 2 to line 430, column 1)",
  " (in 'estimate_truncation', line 437, column 2 to column 55)",
  " (in 'estimate_truncation', line 439, column 4 to column 11)",
  " (in 'estimate_truncation', line 438, column 21 to line 440, column 3)",
  " (in 'estimate_truncation', line 438, column 2 to line 440, column 3)",
  " (in 'estimate_truncation', line 442, column 4 to column 39)",
  " (in 'estimate_truncation', line 443, column 4 to column 45)",
  " (in 'estimate_truncation', line 449, column 10 to column 77)",
  " (in 'estimate_truncation', line 448, column 14 to line 450, column 9)",
  " (in 'estimate_truncation', line 447, column 10 to column 104)",
  " (in 'estimate_truncation', line 446, column 27 to line 448, column 9)",
  " (in 'estimate_truncation', line 446, column 8 to line 450, column 9)",
  " (in 'estimate_truncation', line 445, column 34 to line 451, column 7)",
  " (in 'estimate_truncation', line 445, column 6 to line 451, column 7)",
  " (in 'estimate_truncation', line 444, column 25 to line 452, column 5)",
  " (in 'estimate_truncation', line 444, column 4 to line 452, column 5)",
  " (in 'estimate_truncation', line 441, column 24 to line 453, column 3)",
  " (in 'estimate_truncation', line 441, column 2 to line 453, column 3)",
  " (in 'estimate_truncation', line 436, column 59 to line 454, column 1)",
  " (in 'estimate_truncation', line 457, column 2 to column 29)",
  " (in 'estimate_truncation', line 458, column 9 to column 12)",
  " (in 'estimate_truncation', line 458, column 2 to column 18)",
  " (in 'estimate_truncation', line 460, column 4 to column 49)",
  " (in 'estimate_truncation', line 461, column 4 to column 31)",
  " (in 'estimate_truncation', line 462, column 4 to column 45)",
  " (in 'estimate_truncation', line 459, column 19 to line 463, column 3)",
  " (in 'estimate_truncation', line 459, column 2 to line 463, column 3)",
  " (in 'estimate_truncation', line 464, column 2 to column 13)",
  " (in 'estimate_truncation', line 456, column 57 to line 465, column 1)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>>* = nullptr>
std::vector<int>
calc_conv_indices_xlen(const T0__& s, const T1__& xlen, const T2__& ylen,
                       std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>>* = nullptr>
std::vector<int>
calc_conv_indices_len(const T0__& s, const T1__& xlen, const T2__& ylen,
                      std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__, const T2__&
                      len, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_to_report(const T0__& infections_arg__, const T1__&
                   delay_rev_pmf_arg__, const T2__& seeding_time,
                   std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>, std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
discretised_pmf(const T0__& params_arg__, const T1__& n, const T2__& dist,
                std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
day_of_week_effect(const T0__& reports_arg__, const T1__& day_of_week,
                   const T2__& effect_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs, std::ostream*
          pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
truncate_obs(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
             const T2__& reconstruct, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T0__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T0__>>>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              stan::is_std_vector<T5__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T5__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T5__>>>>* = nullptr>
void
truncation_lp(const T0__& truncation_mean, const T1__& truncation_sd,
              const T2__& trunc_mean_mean, const T3__& trunc_mean_sd,
              const T4__& trunc_sd_mean, const T5__& trunc_sd_sd, T_lp__&
              lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>,
                              stan::math::disjunction<stan::is_autodiff<T5__>,
                                                      std::is_floating_point<T5__>>,
                              std::is_integral<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              std::is_integral<T8__>>* = nullptr>
void
report_lp(const T0__& cases, const T1__& cases_time, const T2__&
          reports_arg__, const T3__& rep_phi, const T4__& phi_mean,
          const T5__& phi_sd, const T6__& model_type, const T7__& weight,
          const T8__& accumulate, T_lp__& lp__, T_lp_accum__& lp_accum__,
          std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              std::is_integral<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T4__>,-1,1>
report_log_lik(const T0__& cases, const T1__& reports_arg__, const T2__&
               rep_phi, const T3__& model_type, const T4__& weight,
               std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              std::is_integral<T2__>>* = nullptr>
std::vector<int>
report_rng(const T0__& reports_arg__, const T1__& rep_phi, const T2__&
           model_type, RNG& base_rng__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<stan::value_type_t<T2__>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>>* = nullptr>
std::vector<int>
get_delay_type_max(const T0__& delay_types, const T1__& delay_types_p,
                   const T2__& delay_types_id, const T3__&
                   delay_types_groups, const T4__& delay_max, const T5__&
                   delay_np_pmf_groups, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<stan::value_type_t<T2__>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_std_vector<T7__>,
                              std::is_integral<stan::value_type_t<T7__>>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_std_vector<T9__>,
                              std::is_integral<stan::value_type_t<T9__>>,
                              stan::is_std_vector<T10__>,
                              std::is_integral<stan::value_type_t<T10__>>,
                              std::is_integral<T11__>,
                              std::is_integral<T12__>,
                              std::is_integral<T13__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T6__>,
                stan::base_type_t<T8__>>,-1,1>
get_delay_rev_pmf(const T0__& delay_id, const T1__& len, const T2__&
                  delay_types_p, const T3__& delay_types_id, const T4__&
                  delay_types_groups, const T5__& delay_max, const T6__&
                  delay_np_pmf_arg__, const T7__& delay_np_pmf_groups,
                  const T8__& delay_params_arg__, const T9__&
                  delay_params_groups, const T10__& delay_dist, const T11__&
                  left_truncate, const T12__& reverse_pmf, const T13__&
                  cumulative, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>>* = nullptr>
void
delays_lp(const T0__& delay_params_arg__, const T1__&
          delay_params_mean_arg__, const T2__& delay_params_sd_arg__,
          const T3__& delay_params_groups, const T4__& delay_dist,
          const T5__& weight, T_lp__& lp__, T_lp_accum__& lp_accum__,
          std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
normal_lb_rng(const T0__& mu_arg__, const T1__& sigma_arg__, const T2__&
              lb_arg__, RNG& base_rng__, std::ostream* pstream__);
// array[] int calc_conv_indices_xlen(int, int, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>>*>
std::vector<int>
calc_conv_indices_xlen(const T0__& s, const T1__& xlen, const T2__& ylen,
                       std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int s_minus_ylen = std::numeric_limits<int>::min();
    current_statement__ = 95;
    s_minus_ylen = (s - ylen);
    int start_x = std::numeric_limits<int>::min();
    current_statement__ = 96;
    start_x = stan::math::max(1, (s_minus_ylen + 1));
    int end_x = std::numeric_limits<int>::min();
    current_statement__ = 97;
    end_x = s;
    int start_y = std::numeric_limits<int>::min();
    current_statement__ = 98;
    start_y = stan::math::max(1, (1 - s_minus_ylen));
    int end_y = std::numeric_limits<int>::min();
    current_statement__ = 99;
    end_y = ylen;
    current_statement__ = 100;
    return std::vector<int>{start_x, end_x, start_y, end_y};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// array[] int calc_conv_indices_len(int, int, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>>*>
std::vector<int>
calc_conv_indices_len(const T0__& s, const T1__& xlen, const T2__& ylen,
                      std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int s_minus_ylen = std::numeric_limits<int>::min();
    current_statement__ = 102;
    s_minus_ylen = (s - ylen);
    int start_x = std::numeric_limits<int>::min();
    current_statement__ = 103;
    start_x = stan::math::max(1, (s_minus_ylen + 1));
    int end_x = std::numeric_limits<int>::min();
    current_statement__ = 104;
    end_x = xlen;
    int start_y = std::numeric_limits<int>::min();
    current_statement__ = 105;
    start_y = stan::math::max(1, (1 - s_minus_ylen));
    int end_y = std::numeric_limits<int>::min();
    current_statement__ = 107;
    end_y = ((ylen + xlen) - s);
    current_statement__ = 108;
    return std::vector<int>{start_x, end_x, start_y, end_y};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector convolve_with_rev_pmf(vector, vector, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__, const T2__&
                      len, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  const auto& y = stan::math::to_ref(y_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int xlen = std::numeric_limits<int>::min();
    current_statement__ = 110;
    xlen = stan::math::num_elements(x);
    int ylen = std::numeric_limits<int>::min();
    current_statement__ = 111;
    ylen = stan::math::num_elements(y);
    current_statement__ = 112;
    stan::math::validate_non_negative_index("z", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> z =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 116;
    if (stan::math::logical_lt(((xlen + ylen) - 1), len)) {
      current_statement__ = 114;
      {
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "convolve_with_rev_pmf: len is longer than x and y convolved");
        throw std::domain_error(errmsg_stream__.str());
      }
    }
    current_statement__ = 119;
    if (stan::math::logical_gt(xlen, len)) {
      current_statement__ = 117;
      {
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "convolve_with_rev_pmf: len is shorter than x");
        throw std::domain_error(errmsg_stream__.str());
      }
    }
    current_statement__ = 123;
    for (int s = 1; s <= xlen; ++s) {
      std::vector<int> indices =
        std::vector<int>(4, std::numeric_limits<int>::min());
      current_statement__ = 120;
      stan::model::assign(indices,
        calc_conv_indices_xlen(s, xlen, ylen, pstream__),
        "assigning variable indices");
      current_statement__ = 121;
      stan::model::assign(z,
        stan::math::dot_product(
          stan::model::rvalue(x, "x",
            stan::model::index_min_max(
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(1)),
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(2)))),
          stan::model::rvalue(y, "y",
            stan::model::index_min_max(
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(3)),
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(4))))), "assigning variable z",
        stan::model::index_uni(s));
    }
    current_statement__ = 129;
    if (stan::math::logical_gt(len, xlen)) {
      current_statement__ = 127;
      for (int s = (xlen + 1); s <= len; ++s) {
        std::vector<int> indices =
          std::vector<int>(4, std::numeric_limits<int>::min());
        current_statement__ = 124;
        stan::model::assign(indices,
          calc_conv_indices_len(s, xlen, ylen, pstream__),
          "assigning variable indices");
        current_statement__ = 125;
        stan::model::assign(z,
          stan::math::dot_product(
            stan::model::rvalue(x, "x",
              stan::model::index_min_max(
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(1)),
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(2)))),
            stan::model::rvalue(y, "y",
              stan::model::index_min_max(
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(3)),
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(4))))), "assigning variable z",
          stan::model::index_uni(s));
      }
    }
    current_statement__ = 130;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector convolve_to_report(vector, vector, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_to_report(const T0__& infections_arg__, const T1__&
                   delay_rev_pmf_arg__, const T2__& seeding_time,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& infections = stan::math::to_ref(infections_arg__);
  const auto& delay_rev_pmf = stan::math::to_ref(delay_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 132;
    t = stan::math::num_elements(infections);
    int delays = std::numeric_limits<int>::min();
    current_statement__ = 133;
    delays = stan::math::num_elements(delay_rev_pmf);
    current_statement__ = 136;
    if (stan::math::logical_eq(delays, 0)) {
      current_statement__ = 134;
      return stan::model::rvalue(infections, "infections",
               stan::model::index_min_max((seeding_time + 1), t));
    }
    current_statement__ = 137;
    stan::math::validate_non_negative_index("unobs_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> unobs_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 138;
    stan::model::assign(unobs_reports,
      convolve_with_rev_pmf(infections, delay_rev_pmf, t, pstream__),
      "assigning variable unobs_reports");
    current_statement__ = 139;
    return stan::model::rvalue(unobs_reports, "unobs_reports",
             stan::model::index_min_max((seeding_time + 1), t));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector discretised_pmf(vector, int, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>, std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
discretised_pmf(const T0__& params_arg__, const T1__& n, const T2__& dist,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& params = stan::math::to_ref(params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 141;
    stan::math::validate_non_negative_index("lpmf", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> lpmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 143;
    stan::math::validate_non_negative_index("upper_lcdf", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> upper_lcdf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 156;
    if (stan::math::logical_eq(dist, 0)) {
      current_statement__ = 154;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 152;
        stan::model::assign(upper_lcdf,
          stan::math::lognormal_lcdf(i,
            stan::model::rvalue(params, "params", stan::model::index_uni(1)),
            stan::model::rvalue(params, "params", stan::model::index_uni(2))),
          "assigning variable upper_lcdf", stan::model::index_uni(i));
      }
    } else {
      current_statement__ = 151;
      if (stan::math::logical_eq(dist, 1)) {
        current_statement__ = 149;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 147;
          stan::model::assign(upper_lcdf,
            stan::math::gamma_lcdf(i,
              stan::model::rvalue(params, "params", stan::model::index_uni(1)),
              stan::model::rvalue(params, "params", stan::model::index_uni(2))),
            "assigning variable upper_lcdf", stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 145;
        {
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__,
            "Unknown distribution function provided.");
          throw std::domain_error(errmsg_stream__.str());
        }
      }
    }
    current_statement__ = 166;
    if (stan::math::logical_gt(n, 1)) {
      current_statement__ = 159;
      stan::model::assign(lpmf,
        stan::model::rvalue(upper_lcdf, "upper_lcdf",
          stan::model::index_uni(1)), "assigning variable lpmf",
        stan::model::index_uni(1));
      current_statement__ = 160;
      stan::model::assign(lpmf,
        stan::model::rvalue(upper_lcdf, "upper_lcdf",
          stan::model::index_uni(2)), "assigning variable lpmf",
        stan::model::index_uni(2));
      current_statement__ = 163;
      if (stan::math::logical_gt(n, 2)) {
        current_statement__ = 161;
        stan::model::assign(lpmf,
          stan::math::log_diff_exp(
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max(3, n)),
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max(1, (n - 2)))),
          "assigning variable lpmf", stan::model::index_min_max(3, n));
      }
      current_statement__ = 164;
      stan::model::assign(lpmf,
        stan::math::subtract(stan::model::deep_copy(lpmf),
          stan::math::log_sum_exp(
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max((n - 1), n)))),
        "assigning variable lpmf");
    } else {
      current_statement__ = 157;
      stan::model::assign(lpmf, 0, "assigning variable lpmf",
        stan::model::index_uni(1));
    }
    current_statement__ = 167;
    return stan::math::exp(lpmf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector day_of_week_effect(vector, array[] int, vector)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
day_of_week_effect(const T0__& reports_arg__, const T1__& day_of_week,
                   const T2__& effect_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  const auto& effect = stan::math::to_ref(effect_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int wl = std::numeric_limits<int>::min();
    current_statement__ = 169;
    wl = stan::math::num_elements(effect);
    current_statement__ = 170;
    stan::math::validate_non_negative_index("scaled_effect", "wl", wl);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_effect =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(wl, DUMMY_VAR__);
    current_statement__ = 171;
    stan::model::assign(scaled_effect, stan::math::multiply(wl, effect),
      "assigning variable scaled_effect");
    current_statement__ = 172;
    return stan::math::elt_multiply(reports,
             stan::model::rvalue(scaled_effect, "scaled_effect",
               stan::model::index_multi(day_of_week)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector scale_obs(vector, real)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 174;
    t = stan::math::num_elements(reports);
    current_statement__ = 175;
    stan::math::validate_non_negative_index("scaled_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 177;
    stan::model::assign(scaled_reports,
      stan::math::multiply(reports, frac_obs),
      "assigning variable scaled_reports");
    current_statement__ = 178;
    return scaled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector truncate_obs(vector, vector, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
truncate_obs(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
             const T2__& reconstruct, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  const auto& trunc_rev_cmf = stan::math::to_ref(trunc_rev_cmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 180;
    t = stan::math::num_elements(reports);
    int trunc_max = std::numeric_limits<int>::min();
    current_statement__ = 181;
    trunc_max = stan::math::num_elements(trunc_rev_cmf);
    current_statement__ = 182;
    stan::math::validate_non_negative_index("trunc_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> trunc_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 183;
    stan::model::assign(trunc_reports, reports,
      "assigning variable trunc_reports");
    int joint_max = std::numeric_limits<int>::min();
    current_statement__ = 184;
    joint_max = stan::math::min(t, trunc_max);
    int first_t = std::numeric_limits<int>::min();
    current_statement__ = 185;
    first_t = ((t - joint_max) + 1);
    int first_trunc = std::numeric_limits<int>::min();
    current_statement__ = 186;
    first_trunc = ((trunc_max - joint_max) + 1);
    current_statement__ = 191;
    if (reconstruct) {
      current_statement__ = 189;
      stan::model::assign(trunc_reports,
        stan::math::elt_divide(
          stan::model::deep_copy(
            stan::model::rvalue(trunc_reports, "trunc_reports",
              stan::model::index_min_max(first_t, t))),
          stan::model::rvalue(trunc_rev_cmf, "trunc_rev_cmf",
            stan::model::index_min_max(first_trunc, trunc_max))),
        "assigning variable trunc_reports",
        stan::model::index_min_max(first_t, t));
    } else {
      current_statement__ = 187;
      stan::model::assign(trunc_reports,
        stan::math::elt_multiply(
          stan::model::deep_copy(
            stan::model::rvalue(trunc_reports, "trunc_reports",
              stan::model::index_min_max(first_t, t))),
          stan::model::rvalue(trunc_rev_cmf, "trunc_rev_cmf",
            stan::model::index_min_max(first_trunc, trunc_max))),
        "assigning variable trunc_reports",
        stan::model::index_min_max(first_t, t));
    }
    current_statement__ = 192;
    return trunc_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* void
   truncation_lp(array[] real, array[] real, array[] real, array[] real,
                 array[] real, array[] real)
 */
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T0__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T0__>>>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              stan::is_std_vector<T5__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T5__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T5__>>>>*>
void
truncation_lp(const T0__& truncation_mean, const T1__& truncation_sd,
              const T2__& trunc_mean_mean, const T3__& trunc_mean_sd,
              const T4__& trunc_sd_mean, const T5__& trunc_sd_sd, T_lp__&
              lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int truncation = std::numeric_limits<int>::min();
    current_statement__ = 194;
    truncation = stan::math::num_elements(truncation_mean);
    current_statement__ = 202;
    if (truncation) {
      current_statement__ = 197;
      if (stan::math::logical_gt(
            stan::model::rvalue(trunc_mean_sd, "trunc_mean_sd",
              stan::model::index_uni(1)), 0)) {
        current_statement__ = 195;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(truncation_mean,
                         trunc_mean_mean, trunc_mean_sd));
      }
      current_statement__ = 200;
      if (stan::math::logical_gt(
            stan::model::rvalue(trunc_sd_sd, "trunc_sd_sd",
              stan::model::index_uni(1)), 0)) {
        current_statement__ = 198;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(truncation_sd,
                         trunc_sd_mean, trunc_sd_sd));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* void
   report_lp(array[] int, array[] int, vector, array[] real, real, real, 
             int, real, int)
 */
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>,
                              stan::math::disjunction<stan::is_autodiff<T5__>,
                                                      std::is_floating_point<T5__>>,
                              std::is_integral<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              std::is_integral<T8__>>*>
void
report_lp(const T0__& cases, const T1__& cases_time, const T2__&
          reports_arg__, const T3__& rep_phi, const T4__& phi_mean,
          const T5__& phi_sd, const T6__& model_type, const T7__& weight,
          const T8__& accumulate, T_lp__& lp__, T_lp_accum__& lp_accum__,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__, T5__, T7__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 204;
    n = (stan::math::num_elements(cases_time) - accumulate);
    current_statement__ = 205;
    stan::math::validate_non_negative_index("obs_reports", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> obs_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 207;
    stan::math::validate_non_negative_index("obs_cases", "n", n);
    std::vector<int> obs_cases =
      std::vector<int>(n, std::numeric_limits<int>::min());
    current_statement__ = 227;
    if (accumulate) {
      int t = std::numeric_limits<int>::min();
      current_statement__ = 212;
      t = stan::math::num_elements(reports);
      int i = std::numeric_limits<int>::min();
      current_statement__ = 213;
      i = 0;
      int current_obs = std::numeric_limits<int>::min();
      current_statement__ = 214;
      current_obs = 0;
      current_statement__ = 215;
      stan::model::assign(obs_reports, stan::math::rep_vector(0, n),
        "assigning variable obs_reports");
      current_statement__ = 224;
      while ((stan::math::primitive_value(stan::math::logical_lte(i, t)) &&
             stan::math::primitive_value(
               stan::math::logical_lte(current_obs, n)))) {
        current_statement__ = 218;
        if (stan::math::logical_gt(current_obs, 0)) {
          current_statement__ = 216;
          stan::model::assign(obs_reports,
            (stan::model::rvalue(obs_reports, "obs_reports",
               stan::model::index_uni(current_obs)) +
            stan::model::rvalue(reports, "reports", stan::model::index_uni(i))),
            "assigning variable obs_reports",
            stan::model::index_uni(current_obs));
        }
        current_statement__ = 221;
        if (stan::math::logical_eq(i,
              stan::model::rvalue(cases_time, "cases_time",
                stan::model::index_uni((current_obs + 1))))) {
          current_statement__ = 219;
          current_obs = (current_obs + 1);
        }
        current_statement__ = 222;
        i = (i + 1);
      }
      current_statement__ = 225;
      stan::model::assign(obs_cases,
        stan::model::rvalue(cases, "cases",
          stan::model::index_min_max(2, (n + 1))),
        "assigning variable obs_cases");
    } else {
      current_statement__ = 209;
      stan::model::assign(obs_reports,
        stan::model::rvalue(reports, "reports",
          stan::model::index_multi(cases_time)),
        "assigning variable obs_reports");
      current_statement__ = 210;
      stan::model::assign(obs_cases, cases, "assigning variable obs_cases");
    }
    current_statement__ = 245;
    if (model_type) {
      local_scalar_t__ dispersion = DUMMY_VAR__;
      current_statement__ = 234;
      dispersion = stan::math::inv_square(
                     (stan::math::logical_gt(phi_sd, 0) ? stan::model::rvalue(
                                                            rep_phi,
                                                            "rep_phi",
                                                            stan::model::index_uni(
                                                              model_type)) : phi_mean));
      current_statement__ = 238;
      if (stan::math::logical_gt(phi_sd, 0)) {
        current_statement__ = 235;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(rep_phi, "rep_phi",
                           stan::model::index_uni(model_type)), phi_mean,
                         phi_sd));
        current_statement__ = 236;
        if (stan::math::logical_lt(
              stan::model::rvalue(rep_phi, "rep_phi",
                stan::model::index_uni(model_type)), 0)) {
          current_statement__ = 236;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 236;
          lp_accum__.add(-(stan::math::normal_lccdf(0, phi_mean, phi_sd)));
        }
      }
      current_statement__ = 243;
      if (stan::math::logical_eq(weight, 1)) {
        current_statement__ = 241;
        lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(obs_cases,
                         obs_reports, dispersion));
      } else {
        current_statement__ = 239;
        lp_accum__.add((stan::math::neg_binomial_2_lpmf<false>(obs_cases,
                          obs_reports, dispersion) * weight));
      }
    } else {
      current_statement__ = 232;
      if (stan::math::logical_eq(weight, 1)) {
        current_statement__ = 230;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(obs_cases,
                         obs_reports));
      } else {
        current_statement__ = 228;
        lp_accum__.add((stan::math::poisson_lpmf<false>(obs_cases,
                          obs_reports) * weight));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector report_log_lik(array[] int, vector, array[] real, int, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              std::is_integral<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T4__>,-1,1>
report_log_lik(const T0__& cases, const T1__& reports_arg__, const T2__&
               rep_phi, const T3__& model_type, const T4__& weight,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T4__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 247;
    t = stan::math::num_elements(reports);
    current_statement__ = 248;
    stan::math::validate_non_negative_index("log_lik", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 259;
    if (stan::math::logical_eq(model_type, 0)) {
      current_statement__ = 257;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 255;
        stan::model::assign(log_lik,
          (stan::math::poisson_lpmf<false>(
             stan::model::rvalue(cases, "cases", stan::model::index_uni(i)),
             stan::model::rvalue(reports, "reports",
               stan::model::index_uni(i))) * weight),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
    } else {
      local_scalar_t__ dispersion = DUMMY_VAR__;
      current_statement__ = 250;
      dispersion = stan::math::inv_square(
                     stan::model::rvalue(rep_phi, "rep_phi",
                       stan::model::index_uni(model_type)));
      current_statement__ = 253;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 251;
        stan::model::assign(log_lik,
          (stan::math::neg_binomial_2_lpmf<false>(
             stan::model::rvalue(cases, "cases", stan::model::index_uni(i)),
             stan::model::rvalue(reports, "reports",
               stan::model::index_uni(i)), dispersion) * weight),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
    }
    current_statement__ = 260;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// array[] int report_rng(vector, array[] real, int)
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              std::is_integral<T2__>>*>
std::vector<int>
report_rng(const T0__& reports_arg__, const T1__& rep_phi, const T2__&
           model_type, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 262;
    t = stan::math::num_elements(reports);
    current_statement__ = 263;
    stan::math::validate_non_negative_index("sampled_reports", "t", t);
    std::vector<int> sampled_reports =
      std::vector<int>(t, std::numeric_limits<int>::min());
    local_scalar_t__ dispersion = DUMMY_VAR__;
    current_statement__ = 265;
    dispersion = 1e5;
    current_statement__ = 268;
    if (model_type) {
      current_statement__ = 266;
      dispersion = stan::math::inv_square(
                     stan::model::rvalue(rep_phi, "rep_phi",
                       stan::model::index_uni(model_type)));
    }
    current_statement__ = 279;
    for (int s = 1; s <= t; ++s) {
      current_statement__ = 277;
      if (stan::math::logical_lt(
            stan::model::rvalue(reports, "reports", stan::model::index_uni(s)),
            1e-8)) {
        current_statement__ = 275;
        stan::model::assign(sampled_reports, 0,
          "assigning variable sampled_reports", stan::model::index_uni(s));
      } else {
        current_statement__ = 273;
        if (stan::math::logical_gt(dispersion, 1e4)) {
          current_statement__ = 271;
          stan::model::assign(sampled_reports,
            stan::math::poisson_rng(
              (stan::math::logical_gt(
                 stan::model::rvalue(reports, "reports",
                   stan::model::index_uni(s)), 1e8) ? 1e8 : stan::model::rvalue(
                                                              reports,
                                                              "reports",
                                                              stan::model::index_uni(
                                                                s))),
              base_rng__), "assigning variable sampled_reports",
            stan::model::index_uni(s));
        } else {
          current_statement__ = 269;
          stan::model::assign(sampled_reports,
            stan::math::neg_binomial_2_rng(
              (stan::math::logical_gt(
                 stan::model::rvalue(reports, "reports",
                   stan::model::index_uni(s)), 1e8) ? 1e8 : stan::model::rvalue(
                                                              reports,
                                                              "reports",
                                                              stan::model::index_uni(
                                                                s))),
              dispersion, base_rng__), "assigning variable sampled_reports",
            stan::model::index_uni(s));
        }
      }
    }
    current_statement__ = 280;
    return sampled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* array[] int
   get_delay_type_max(int, array[] int, array[] int, array[] int, array[]
  int,
                      array[] int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<stan::value_type_t<T2__>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>>*>
std::vector<int>
get_delay_type_max(const T0__& delay_types, const T1__& delay_types_p,
                   const T2__& delay_types_id, const T3__&
                   delay_types_groups, const T4__& delay_max, const T5__&
                   delay_np_pmf_groups, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 282;
    stan::math::validate_non_negative_index("ret", "delay_types", delay_types);
    std::vector<int> ret =
      std::vector<int>(delay_types, std::numeric_limits<int>::min());
    current_statement__ = 293;
    for (int i = 1; i <= delay_types; ++i) {
      current_statement__ = 284;
      stan::model::assign(ret, 0, "assigning variable ret",
        stan::model::index_uni(i));
      current_statement__ = 291;
      for (int j =
             stan::model::rvalue(delay_types_groups, "delay_types_groups",
               stan::model::index_uni(i)); j <=
           (stan::model::rvalue(delay_types_groups, "delay_types_groups",
              stan::model::index_uni((i + 1))) - 1); ++j) {
        current_statement__ = 289;
        if (stan::model::rvalue(delay_types_p, "delay_types_p",
              stan::model::index_uni(j))) {
          current_statement__ = 287;
          stan::model::assign(ret,
            (stan::model::rvalue(ret, "ret", stan::model::index_uni(i)) +
            stan::model::rvalue(delay_max, "delay_max",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(j))))), "assigning variable ret",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 285;
          stan::model::assign(ret,
            (stan::model::rvalue(ret, "ret", stan::model::index_uni(i)) +
            ((stan::model::rvalue(delay_np_pmf_groups, "delay_np_pmf_groups",
                stan::model::index_uni(
                  (stan::model::rvalue(delay_types_id, "delay_types_id",
                     stan::model::index_uni(j)) + 1))) -
            stan::model::rvalue(delay_np_pmf_groups, "delay_np_pmf_groups",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(j))))) - 1)),
            "assigning variable ret", stan::model::index_uni(i));
        }
      }
    }
    current_statement__ = 294;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* vector
   get_delay_rev_pmf(int, int, array[] int, array[] int, array[] int,
                     array[] int, vector, array[] int, vector, array[] int,
                     array[] int, int, int, int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<stan::value_type_t<T2__>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_std_vector<T7__>,
                              std::is_integral<stan::value_type_t<T7__>>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_std_vector<T9__>,
                              std::is_integral<stan::value_type_t<T9__>>,
                              stan::is_std_vector<T10__>,
                              std::is_integral<stan::value_type_t<T10__>>,
                              std::is_integral<T11__>,
                              std::is_integral<T12__>,
                              std::is_integral<T13__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T6__>,
                stan::base_type_t<T8__>>,-1,1>
get_delay_rev_pmf(const T0__& delay_id, const T1__& len, const T2__&
                  delay_types_p, const T3__& delay_types_id, const T4__&
                  delay_types_groups, const T5__& delay_max, const T6__&
                  delay_np_pmf_arg__, const T7__& delay_np_pmf_groups,
                  const T8__& delay_params_arg__, const T9__&
                  delay_params_groups, const T10__& delay_dist, const T11__&
                  left_truncate, const T12__& reverse_pmf, const T13__&
                  cumulative, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T6__>,
                             stan::base_type_t<T8__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& delay_np_pmf = stan::math::to_ref(delay_np_pmf_arg__);
  const auto& delay_params = stan::math::to_ref(delay_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 296;
    stan::math::validate_non_negative_index("pmf", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> pmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 297;
    stan::model::assign(pmf, stan::math::rep_vector(0, len),
      "assigning variable pmf");
    int current_len = std::numeric_limits<int>::min();
    current_statement__ = 298;
    current_len = 1;
    int new_len = std::numeric_limits<int>::min();
    current_statement__ = 323;
    for (int i =
           stan::model::rvalue(delay_types_groups, "delay_types_groups",
             stan::model::index_uni(delay_id)); i <=
         (stan::model::rvalue(delay_types_groups, "delay_types_groups",
            stan::model::index_uni((delay_id + 1))) - 1); ++i) {
      current_statement__ = 320;
      if (stan::model::rvalue(delay_types_p, "delay_types_p",
            stan::model::index_uni(i))) {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 309;
        start = stan::model::rvalue(delay_params_groups,
                  "delay_params_groups",
                  stan::model::index_uni(
                    stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i))));
        int end = std::numeric_limits<int>::min();
        current_statement__ = 310;
        end = (stan::model::rvalue(delay_params_groups,
                 "delay_params_groups",
                 stan::model::index_uni(
                   (stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i)) + 1)))
          - 1);
        current_statement__ = 311;
        stan::math::validate_non_negative_index("new_variable_pmf",
          "delay_max[delay_types_id[i]] + 1",
          (stan::model::rvalue(delay_max, "delay_max",
             stan::model::index_uni(
               stan::model::rvalue(delay_types_id, "delay_types_id",
                 stan::model::index_uni(i)))) + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> new_variable_pmf =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            delay_max,
                                                            "delay_max",
                                                            stan::model::index_uni(
                                                              stan::model::rvalue(
                                                                delay_types_id,
                                                                "delay_types_id",
                                                                stan::model::index_uni(
                                                                  i)))) + 1),
            DUMMY_VAR__);
        current_statement__ = 312;
        stan::model::assign(new_variable_pmf,
          discretised_pmf(
            stan::model::rvalue(delay_params, "delay_params",
              stan::model::index_min_max(start, end)),
            (stan::model::rvalue(delay_max, "delay_max",
               stan::model::index_uni(
                 stan::model::rvalue(delay_types_id, "delay_types_id",
                   stan::model::index_uni(i)))) + 1),
            stan::model::rvalue(delay_dist, "delay_dist",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(i)))), pstream__),
          "assigning variable new_variable_pmf");
        current_statement__ = 313;
        new_len = (current_len +
          stan::model::rvalue(delay_max, "delay_max",
            stan::model::index_uni(
              stan::model::rvalue(delay_types_id, "delay_types_id",
                stan::model::index_uni(i)))));
        current_statement__ = 318;
        if (stan::math::logical_eq(current_len, 1)) {
          current_statement__ = 316;
          stan::model::assign(pmf, new_variable_pmf,
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        } else {
          current_statement__ = 314;
          stan::model::assign(pmf,
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                stan::model::rvalue(pmf, "pmf",
                  stan::model::index_min_max(1, current_len))),
              stan::math::reverse(new_variable_pmf), new_len, pstream__),
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        }
      } else {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 300;
        start = stan::model::rvalue(delay_np_pmf_groups,
                  "delay_np_pmf_groups",
                  stan::model::index_uni(
                    stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i))));
        int end = std::numeric_limits<int>::min();
        current_statement__ = 301;
        end = (stan::model::rvalue(delay_np_pmf_groups,
                 "delay_np_pmf_groups",
                 stan::model::index_uni(
                   (stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i)) + 1)))
          - 1);
        current_statement__ = 302;
        new_len = ((current_len + end) - start);
        current_statement__ = 307;
        if (stan::math::logical_eq(current_len, 1)) {
          current_statement__ = 305;
          stan::model::assign(pmf,
            stan::model::rvalue(delay_np_pmf, "delay_np_pmf",
              stan::model::index_min_max(start, end)),
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        } else {
          current_statement__ = 303;
          stan::model::assign(pmf,
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                stan::model::rvalue(pmf, "pmf",
                  stan::model::index_min_max(1, current_len))),
              stan::math::reverse(
                stan::model::rvalue(delay_np_pmf, "delay_np_pmf",
                  stan::model::index_min_max(start, end))), new_len,
              pstream__), "assigning variable pmf",
            stan::model::index_min_max(1, new_len));
        }
      }
      current_statement__ = 321;
      current_len = new_len;
    }
    current_statement__ = 326;
    if (left_truncate) {
      current_statement__ = 324;
      stan::model::assign(pmf,
        stan::math::append_row(stan::math::rep_vector(0, left_truncate),
          stan::math::divide(
            stan::model::deep_copy(
              stan::model::rvalue(pmf, "pmf",
                stan::model::index_min_max((left_truncate + 1), len))),
            stan::math::sum(
              stan::model::rvalue(pmf, "pmf",
                stan::model::index_min_max((left_truncate + 1), len))))),
        "assigning variable pmf");
    }
    current_statement__ = 329;
    if (cumulative) {
      current_statement__ = 327;
      stan::model::assign(pmf,
        stan::math::cumulative_sum(stan::model::deep_copy(pmf)),
        "assigning variable pmf");
    }
    current_statement__ = 332;
    if (reverse_pmf) {
      current_statement__ = 330;
      stan::model::assign(pmf,
        stan::math::reverse(stan::model::deep_copy(pmf)),
        "assigning variable pmf");
    }
    current_statement__ = 333;
    return pmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// void delays_lp(vector, vector, vector, array[] int, array[] int, array[] int)
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>>*>
void
delays_lp(const T0__& delay_params_arg__, const T1__&
          delay_params_mean_arg__, const T2__& delay_params_sd_arg__,
          const T3__& delay_params_groups, const T4__& delay_dist,
          const T5__& weight, T_lp__& lp__, T_lp_accum__& lp_accum__,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& delay_params = stan::math::to_ref(delay_params_arg__);
  const auto& delay_params_mean = stan::math::to_ref(delay_params_mean_arg__);
  const auto& delay_params_sd = stan::math::to_ref(delay_params_sd_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_delays = std::numeric_limits<int>::min();
    current_statement__ = 335;
    n_delays = (stan::math::num_elements(delay_params_groups) - 1);
    current_statement__ = 338;
    if (stan::math::logical_eq(n_delays, 0)) {
      current_statement__ = 336;
      return ;
    }
    current_statement__ = 351;
    for (int d = 1; d <= n_delays; ++d) {
      int start = std::numeric_limits<int>::min();
      current_statement__ = 339;
      start = stan::model::rvalue(delay_params_groups, "delay_params_groups",
                stan::model::index_uni(d));
      int end = std::numeric_limits<int>::min();
      current_statement__ = 340;
      end = (stan::model::rvalue(delay_params_groups, "delay_params_groups",
               stan::model::index_uni((d + 1)))
        - 1);
      current_statement__ = 349;
      for (int s = start; s <= end; ++s) {
        current_statement__ = 347;
        if (stan::math::logical_gt(
              stan::model::rvalue(delay_params_sd, "delay_params_sd",
                stan::model::index_uni(s)), 0)) {
          current_statement__ = 345;
          if (stan::math::logical_gt(
                stan::model::rvalue(weight, "weight",
                  stan::model::index_uni(d)), 1)) {
            current_statement__ = 343;
            lp_accum__.add((stan::model::rvalue(weight, "weight",
                              stan::model::index_uni(d)) *
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(delay_params, "delay_params",
                  stan::model::index_uni(s)),
                stan::model::rvalue(delay_params_mean, "delay_params_mean",
                  stan::model::index_uni(s)),
                stan::model::rvalue(delay_params_sd, "delay_params_sd",
                  stan::model::index_uni(s)))));
          } else {
            current_statement__ = 341;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(delay_params,
                               "delay_params", stan::model::index_uni(s)),
                             stan::model::rvalue(delay_params_mean,
                               "delay_params_mean", stan::model::index_uni(s)),
                             stan::model::rvalue(delay_params_sd,
                               "delay_params_sd", stan::model::index_uni(s))));
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector normal_lb_rng(vector, vector, vector)
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
normal_lb_rng(const T0__& mu_arg__, const T1__& sigma_arg__, const T2__&
              lb_arg__, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& lb = stan::math::to_ref(lb_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int len = std::numeric_limits<int>::min();
    current_statement__ = 353;
    len = stan::math::num_elements(mu);
    current_statement__ = 354;
    stan::math::validate_non_negative_index("ret", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> ret =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 360;
    for (int i = 1; i <= len; ++i) {
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 356;
      p = stan::math::normal_cdf(
            stan::model::rvalue(lb, "lb", stan::model::index_uni(i)),
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
            stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)));
      local_scalar_t__ u = DUMMY_VAR__;
      current_statement__ = 357;
      u = stan::math::uniform_rng(p, 1, base_rng__);
      current_statement__ = 358;
      stan::model::assign(ret,
        ((stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)) *
        stan::math::inv_Phi(u)) +
        stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
        "assigning variable ret", stan::model::index_uni(i));
    }
    current_statement__ = 361;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_estimate_truncation final : public model_base_crtp<model_estimate_truncation> {
private:
  int t;
  int obs_sets;
  std::vector<std::vector<int>> obs;
  std::vector<int> obs_dist;
  int delay_n;
  int delay_n_p;
  int delay_n_np;
  std::vector<int> delay_max;
  std::vector<int> delay_dist;
  int delay_np_pmf_length;
  Eigen::Matrix<double,-1,1> delay_np_pmf_data__;
  std::vector<int> delay_np_pmf_groups;
  int delay_params_length;
  Eigen::Matrix<double,-1,1> delay_params_lower_data__;
  Eigen::Matrix<double,-1,1> delay_params_mean_data__;
  Eigen::Matrix<double,-1,1> delay_params_sd_data__;
  std::vector<int> delay_params_groups;
  std::vector<int> delay_weight;
  int delay_types;
  std::vector<int> delay_types_p;
  std::vector<int> delay_types_id;
  std::vector<int> delay_types_groups;
  int trunc_id;
  std::vector<int> end_t;
  std::vector<int> start_t;
  std::vector<int> delay_type_max;
  int trunc_obs_1dim__;
  int trunc_obs_2dim__;
  int trunc_rev_cmf_1dim__;
  int recon_obs_1dim__;
  int gen_obs_1dim__;
  int gen_obs_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_np_pmf{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_params_lower{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_params_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_params_sd{nullptr, 0};
public:
  ~model_estimate_truncation() {}
  model_estimate_truncation(stan::io::var_context& context__, unsigned int
                            random_seed__ = 0, std::ostream*
                            pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_estimate_truncation_namespace::model_estimate_truncation";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 38;
      context__.validate_dims("data initialization", "t", "int",
        std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      current_statement__ = 38;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 39;
      context__.validate_dims("data initialization", "obs_sets", "int",
        std::vector<size_t>{});
      obs_sets = std::numeric_limits<int>::min();
      current_statement__ = 39;
      obs_sets = context__.vals_i("obs_sets")[(1 - 1)];
      current_statement__ = 40;
      stan::math::validate_non_negative_index("obs", "t", t);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("obs", "obs_sets", obs_sets);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "obs", "int",
        std::vector<size_t>{static_cast<size_t>(t),
          static_cast<size_t>(obs_sets)});
      obs = std::vector<std::vector<int>>(t,
              std::vector<int>(obs_sets, std::numeric_limits<int>::min()));
      {
        std::vector<int> obs_flat__;
        current_statement__ = 42;
        obs_flat__ = context__.vals_i("obs");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= obs_sets; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= t; ++sym2__) {
            stan::model::assign(obs, obs_flat__[(pos__ - 1)],
              "assigning variable obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 43;
      stan::math::validate_non_negative_index("obs_dist", "obs_sets",
        obs_sets);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "obs_dist", "int",
        std::vector<size_t>{static_cast<size_t>(obs_sets)});
      obs_dist = std::vector<int>(obs_sets, std::numeric_limits<int>::min());
      current_statement__ = 44;
      obs_dist = context__.vals_i("obs_dist");
      current_statement__ = 45;
      context__.validate_dims("data initialization", "delay_n", "int",
        std::vector<size_t>{});
      delay_n = std::numeric_limits<int>::min();
      current_statement__ = 45;
      delay_n = context__.vals_i("delay_n")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "delay_n", delay_n, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "delay_n_p", "int",
        std::vector<size_t>{});
      delay_n_p = std::numeric_limits<int>::min();
      current_statement__ = 46;
      delay_n_p = context__.vals_i("delay_n_p")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "delay_n_p", delay_n_p,
        0);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "delay_n_np", "int",
        std::vector<size_t>{});
      delay_n_np = std::numeric_limits<int>::min();
      current_statement__ = 47;
      delay_n_np = context__.vals_i("delay_n_np")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "delay_n_np",
        delay_n_np, 0);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("delay_max", "delay_n_p",
        delay_n_p);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "delay_max", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_max = std::vector<int>(delay_n_p,
                    std::numeric_limits<int>::min());
      current_statement__ = 49;
      delay_max = context__.vals_i("delay_max");
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "delay_max", delay_max,
        1);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("delay_dist", "delay_n_p",
        delay_n_p);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "delay_dist", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_dist = std::vector<int>(delay_n_p,
                     std::numeric_limits<int>::min());
      current_statement__ = 51;
      delay_dist = context__.vals_i("delay_dist");
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "delay_dist",
        delay_dist, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "delay_np_pmf_length",
        "int", std::vector<size_t>{});
      delay_np_pmf_length = std::numeric_limits<int>::min();
      current_statement__ = 52;
      delay_np_pmf_length = context__.vals_i("delay_np_pmf_length")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf_length",
        delay_np_pmf_length, 0);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("delay_np_pmf",
        "delay_np_pmf_length", delay_np_pmf_length);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "delay_np_pmf",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_np_pmf_length)});
      delay_np_pmf_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_np_pmf_length,
                              std::numeric_limits<double>::quiet_NaN());
      new (&delay_np_pmf)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_np_pmf_data__.data(),
        delay_np_pmf_length);
      {
        std::vector<local_scalar_t__> delay_np_pmf_flat__;
        current_statement__ = 54;
        delay_np_pmf_flat__ = context__.vals_r("delay_np_pmf");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= delay_np_pmf_length; ++sym1__) {
          stan::model::assign(delay_np_pmf, delay_np_pmf_flat__[(pos__ - 1)],
            "assigning variable delay_np_pmf", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf",
        delay_np_pmf, 0);
      current_statement__ = 54;
      stan::math::check_less_or_equal(function__, "delay_np_pmf",
        delay_np_pmf, 1);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("delay_np_pmf_groups",
        "delay_n_np + 1", (delay_n_np + 1));
      current_statement__ = 56;
      context__.validate_dims("data initialization", "delay_np_pmf_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_n_np + 1))});
      delay_np_pmf_groups = std::vector<int>((delay_n_np + 1),
                              std::numeric_limits<int>::min());
      current_statement__ = 56;
      delay_np_pmf_groups = context__.vals_i("delay_np_pmf_groups");
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf_groups",
        delay_np_pmf_groups, 1);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "delay_params_length",
        "int", std::vector<size_t>{});
      delay_params_length = std::numeric_limits<int>::min();
      current_statement__ = 57;
      delay_params_length = context__.vals_i("delay_params_length")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "delay_params_length",
        delay_params_length, 0);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("delay_params_lower",
        "delay_params_length", delay_params_length);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "delay_params_lower",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_params_length)});
      delay_params_lower_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&delay_params_lower)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_params_lower_data__.data(),
        delay_params_length);
      {
        std::vector<local_scalar_t__> delay_params_lower_flat__;
        current_statement__ = 59;
        delay_params_lower_flat__ = context__.vals_r("delay_params_lower");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          stan::model::assign(delay_params_lower,
            delay_params_lower_flat__[(pos__ - 1)],
            "assigning variable delay_params_lower",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 60;
      stan::math::validate_non_negative_index("delay_params_mean",
        "delay_params_length", delay_params_length);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "delay_params_mean",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_params_length)});
      delay_params_mean_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&delay_params_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_params_mean_data__.data(),
        delay_params_length);
      {
        std::vector<local_scalar_t__> delay_params_mean_flat__;
        current_statement__ = 61;
        delay_params_mean_flat__ = context__.vals_r("delay_params_mean");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          stan::model::assign(delay_params_mean,
            delay_params_mean_flat__[(pos__ - 1)],
            "assigning variable delay_params_mean",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 61;
      stan::math::check_matching_dims("constraint", "delay_params_mean",
        delay_params_mean, "lower", delay_params_lower);
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "delay_params_mean",
        delay_params_mean, delay_params_lower);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("delay_params_sd",
        "delay_params_length", delay_params_length);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "delay_params_sd",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_params_length)});
      delay_params_sd_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&delay_params_sd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_params_sd_data__.data(),
        delay_params_length);
      {
        std::vector<local_scalar_t__> delay_params_sd_flat__;
        current_statement__ = 63;
        delay_params_sd_flat__ = context__.vals_r("delay_params_sd");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          stan::model::assign(delay_params_sd, delay_params_sd_flat__[(pos__
            - 1)], "assigning variable delay_params_sd",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "delay_params_sd",
        delay_params_sd, 0);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("delay_params_groups",
        "delay_n_p + 1", (delay_n_p + 1));
      current_statement__ = 65;
      context__.validate_dims("data initialization", "delay_params_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_n_p + 1))});
      delay_params_groups = std::vector<int>((delay_n_p + 1),
                              std::numeric_limits<int>::min());
      current_statement__ = 65;
      delay_params_groups = context__.vals_i("delay_params_groups");
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "delay_params_groups",
        delay_params_groups, 0);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("delay_weight", "delay_n_p",
        delay_n_p);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "delay_weight", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_weight = std::vector<int>(delay_n_p,
                       std::numeric_limits<int>::min());
      current_statement__ = 67;
      delay_weight = context__.vals_i("delay_weight");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "delay_weight",
        delay_weight, 0);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "delay_types", "int",
        std::vector<size_t>{});
      delay_types = std::numeric_limits<int>::min();
      current_statement__ = 68;
      delay_types = context__.vals_i("delay_types")[(1 - 1)];
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "delay_types",
        delay_types, 0);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("delay_types_p", "delay_n",
        delay_n);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "delay_types_p", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n)});
      delay_types_p = std::vector<int>(delay_n,
                        std::numeric_limits<int>::min());
      current_statement__ = 70;
      delay_types_p = context__.vals_i("delay_types_p");
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "delay_types_p",
        delay_types_p, 0);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("delay_types_id", "delay_n",
        delay_n);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "delay_types_id", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n)});
      delay_types_id = std::vector<int>(delay_n,
                         std::numeric_limits<int>::min());
      current_statement__ = 72;
      delay_types_id = context__.vals_i("delay_types_id");
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "delay_types_id",
        delay_types_id, 0);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("delay_types_groups",
        "delay_types + 1", (delay_types + 1));
      current_statement__ = 74;
      context__.validate_dims("data initialization", "delay_types_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_types + 1))});
      delay_types_groups = std::vector<int>((delay_types + 1),
                             std::numeric_limits<int>::min());
      current_statement__ = 74;
      delay_types_groups = context__.vals_i("delay_types_groups");
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "delay_types_groups",
        delay_types_groups, 0);
      current_statement__ = 75;
      trunc_id = std::numeric_limits<int>::min();
      current_statement__ = 75;
      trunc_id = 1;
      current_statement__ = 76;
      stan::math::validate_non_negative_index("end_t", "obs_sets", obs_sets);
      current_statement__ = 77;
      end_t = std::vector<int>(obs_sets, std::numeric_limits<int>::min());
      current_statement__ = 78;
      stan::math::validate_non_negative_index("start_t", "obs_sets", obs_sets);
      current_statement__ = 79;
      start_t = std::vector<int>(obs_sets, std::numeric_limits<int>::min());
      current_statement__ = 80;
      stan::math::validate_non_negative_index("delay_type_max",
        "delay_types", delay_types);
      current_statement__ = 81;
      delay_type_max = std::vector<int>(delay_types,
                         std::numeric_limits<int>::min());
      current_statement__ = 82;
      stan::model::assign(delay_type_max,
        get_delay_type_max(delay_types, delay_types_p, delay_types_id,
          delay_types_groups, delay_max, delay_np_pmf_groups, pstream__),
        "assigning variable delay_type_max");
      current_statement__ = 86;
      for (int i = 1; i <= obs_sets; ++i) {
        current_statement__ = 83;
        stan::model::assign(end_t, (t -
          stan::model::rvalue(obs_dist, "obs_dist", stan::model::index_uni(i))),
          "assigning variable end_t", stan::model::index_uni(i));
        current_statement__ = 84;
        stan::model::assign(start_t,
          stan::math::max(1,
            (stan::model::rvalue(end_t, "end_t", stan::model::index_uni(i)) -
            stan::model::rvalue(delay_type_max, "delay_type_max",
              stan::model::index_uni(trunc_id)))),
          "assigning variable start_t", stan::model::index_uni(i));
      }
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "end_t", end_t, 1);
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "start_t", start_t, 1);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("delay_params",
        "delay_params_length", delay_params_length);
      current_statement__ = 88;
      trunc_obs_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 88;
      trunc_obs_1dim__ = (stan::model::rvalue(delay_type_max,
                            "delay_type_max",
                            stan::model::index_uni(trunc_id))
        + 1);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("trunc_obs",
        "delay_type_max[trunc_id] + 1", trunc_obs_1dim__);
      current_statement__ = 89;
      trunc_obs_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 89;
      trunc_obs_2dim__ = (obs_sets - 1);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("trunc_obs", "obs_sets - 1",
        trunc_obs_2dim__);
      current_statement__ = 90;
      trunc_rev_cmf_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 90;
      trunc_rev_cmf_1dim__ = (stan::model::rvalue(delay_type_max,
                                "delay_type_max",
                                stan::model::index_uni(trunc_id))
        + 1);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("trunc_rev_cmf",
        "delay_type_max[trunc_id] + 1", trunc_rev_cmf_1dim__);
      current_statement__ = 91;
      recon_obs_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 91;
      recon_obs_1dim__ = (stan::model::rvalue(delay_type_max,
                            "delay_type_max",
                            stan::model::index_uni(trunc_id))
        + 1);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("recon_obs",
        "delay_type_max[trunc_id] + 1", recon_obs_1dim__);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("recon_obs", "obs_sets",
        obs_sets);
      current_statement__ = 93;
      gen_obs_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 93;
      gen_obs_1dim__ = (stan::model::rvalue(delay_type_max, "delay_type_max",
                          stan::model::index_uni(trunc_id))
        + 1);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("gen_obs",
        "delay_type_max[trunc_id] + 1", gen_obs_1dim__);
      current_statement__ = 94;
      gen_obs_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 94;
      gen_obs_2dim__ = (obs_sets - 1);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("gen_obs", "obs_sets - 1",
        gen_obs_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = delay_params_length + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_estimate_truncation";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.35.0",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_estimate_truncation_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> delay_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delay_params_length,
          DUMMY_VAR__);
      current_statement__ = 1;
      delay_params = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>,
                       jacobian__>(delay_params_lower, lp__,
                       delay_params_length);
      current_statement__ = 1;
      stan::math::check_matching_dims("constraint", "delay_params",
        delay_params, "lower", delay_params_lower);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ sqrt_phi = DUMMY_VAR__;
      current_statement__ = 4;
      sqrt_phi = (1 / stan::math::sqrt(phi));
      Eigen::Matrix<local_scalar_t__,-1,-1> trunc_obs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(trunc_obs_1dim__,
          trunc_obs_2dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(trunc_obs,
        stan::math::rep_matrix(0,
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1), (obs_sets - 1)),
        "assigning variable trunc_obs");
      Eigen::Matrix<local_scalar_t__,-1,1> trunc_rev_cmf =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(trunc_rev_cmf_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(trunc_rev_cmf,
        get_delay_rev_pmf(trunc_id,
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1), delay_types_p,
          delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
          delay_np_pmf_groups, delay_params, delay_params_groups, delay_dist,
          0, 1, 1, pstream__), "assigning variable trunc_rev_cmf");
      {
        current_statement__ = 9;
        stan::math::validate_non_negative_index("last_obs", "t", t);
        Eigen::Matrix<local_scalar_t__,-1,1> last_obs =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
        current_statement__ = 11;
        stan::model::assign(last_obs,
          truncate_obs(
            stan::math::to_vector(
              stan::model::rvalue(obs, "obs", stan::model::index_omni(),
                stan::model::index_uni(obs_sets))), trunc_rev_cmf, 1,
            pstream__), "assigning variable last_obs");
        current_statement__ = 14;
        for (int i = 1; i <= (obs_sets - 1); ++i) {
          current_statement__ = 12;
          stan::model::assign(trunc_obs,
            stan::math::add(
              truncate_obs(
                stan::model::rvalue(last_obs, "last_obs",
                  stan::model::index_min_max(
                    stan::model::rvalue(start_t, "start_t",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(end_t, "end_t",
                      stan::model::index_uni(i)))), trunc_rev_cmf, 0,
                pstream__), sigma), "assigning variable trunc_obs",
            stan::model::index_min_max(1,
              ((stan::model::rvalue(end_t, "end_t", stan::model::index_uni(i))
              -
              stan::model::rvalue(start_t, "start_t",
                stan::model::index_uni(i))) + 1)), stan::model::index_uni(i));
        }
      }
      {
        current_statement__ = 28;
        delays_lp<propto__>(delay_params, delay_params_mean, delay_params_sd,
          delay_params_groups, delay_dist, delay_weight, lp__, lp_accum__,
          pstream__);
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(phi, 0, 1));
        current_statement__ = 30;
        if (stan::math::logical_lt(phi, 0)) {
          current_statement__ = 30;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 30;
          lp_accum__.add(-(stan::math::normal_lccdf(0, 0, 1)));
        }
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 32;
        if (stan::math::logical_lt(sigma, 0)) {
          current_statement__ = 32;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 32;
          lp_accum__.add(-(stan::math::normal_lccdf(0, 0, 1)));
        }
        current_statement__ = 37;
        for (int i = 1; i <= (obs_sets - 1); ++i) {
          current_statement__ = 35;
          for (int j = 1; j <=
               ((stan::model::rvalue(end_t, "end_t",
                   stan::model::index_uni(i)) -
               stan::model::rvalue(start_t, "start_t",
                 stan::model::index_uni(i))) + 1); ++j) {
            current_statement__ = 33;
            lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(
                             stan::model::rvalue(obs, "obs",
                               stan::model::index_uni(
                                 ((stan::model::rvalue(start_t, "start_t",
                                     stan::model::index_uni(i)) + j) - 1)),
                               stan::model::index_uni(i)),
                             stan::model::rvalue(trunc_obs, "trunc_obs",
                               stan::model::index_uni(j),
                               stan::model::index_uni(i)), sqrt_phi));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_estimate_truncation_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> delay_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delay_params_length,
          DUMMY_VAR__);
      current_statement__ = 1;
      delay_params = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>,
                       jacobian__>(delay_params_lower, lp__,
                       delay_params_length);
      current_statement__ = 1;
      stan::math::check_matching_dims("constraint", "delay_params",
        delay_params, "lower", delay_params_lower);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ sqrt_phi = DUMMY_VAR__;
      current_statement__ = 4;
      sqrt_phi = (1 / stan::math::sqrt(phi));
      Eigen::Matrix<local_scalar_t__,-1,-1> trunc_obs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(trunc_obs_1dim__,
          trunc_obs_2dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(trunc_obs,
        stan::math::rep_matrix(0,
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1), (obs_sets - 1)),
        "assigning variable trunc_obs");
      Eigen::Matrix<local_scalar_t__,-1,1> trunc_rev_cmf =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(trunc_rev_cmf_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(trunc_rev_cmf,
        get_delay_rev_pmf(trunc_id,
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1), delay_types_p,
          delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
          delay_np_pmf_groups, delay_params, delay_params_groups, delay_dist,
          0, 1, 1, pstream__), "assigning variable trunc_rev_cmf");
      {
        current_statement__ = 9;
        stan::math::validate_non_negative_index("last_obs", "t", t);
        Eigen::Matrix<local_scalar_t__,-1,1> last_obs =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
        current_statement__ = 11;
        stan::model::assign(last_obs,
          truncate_obs(
            stan::math::to_vector(
              stan::model::rvalue(obs, "obs", stan::model::index_omni(),
                stan::model::index_uni(obs_sets))), trunc_rev_cmf, 1,
            pstream__), "assigning variable last_obs");
        current_statement__ = 14;
        for (int i = 1; i <= (obs_sets - 1); ++i) {
          current_statement__ = 12;
          stan::model::assign(trunc_obs,
            stan::math::add(
              truncate_obs(
                stan::model::rvalue(last_obs, "last_obs",
                  stan::model::index_min_max(
                    stan::model::rvalue(start_t, "start_t",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(end_t, "end_t",
                      stan::model::index_uni(i)))), trunc_rev_cmf, 0,
                pstream__), sigma), "assigning variable trunc_obs",
            stan::model::index_min_max(1,
              ((stan::model::rvalue(end_t, "end_t", stan::model::index_uni(i))
              -
              stan::model::rvalue(start_t, "start_t",
                stan::model::index_uni(i))) + 1)), stan::model::index_uni(i));
        }
      }
      {
        current_statement__ = 28;
        delays_lp<propto__>(delay_params, delay_params_mean, delay_params_sd,
          delay_params_groups, delay_dist, delay_weight, lp__, lp_accum__,
          pstream__);
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(phi, 0, 1));
        current_statement__ = 30;
        if (stan::math::logical_lt(phi, 0)) {
          current_statement__ = 30;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 30;
          lp_accum__.add(-(stan::math::normal_lccdf(0, 0, 1)));
        }
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 32;
        if (stan::math::logical_lt(sigma, 0)) {
          current_statement__ = 32;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 32;
          lp_accum__.add(-(stan::math::normal_lccdf(0, 0, 1)));
        }
        current_statement__ = 37;
        for (int i = 1; i <= (obs_sets - 1); ++i) {
          current_statement__ = 35;
          for (int j = 1; j <=
               ((stan::model::rvalue(end_t, "end_t",
                   stan::model::index_uni(i)) -
               stan::model::rvalue(start_t, "start_t",
                 stan::model::index_uni(i))) + 1); ++j) {
            current_statement__ = 33;
            lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(
                             stan::model::rvalue(obs, "obs",
                               stan::model::index_uni(
                                 ((stan::model::rvalue(start_t, "start_t",
                                     stan::model::index_uni(i)) + j) - 1)),
                               stan::model::index_uni(i)),
                             stan::model::rvalue(trunc_obs, "trunc_obs",
                               stan::model::index_uni(j),
                               stan::model::index_uni(i)), sqrt_phi));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_estimate_truncation_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> delay_params =
        Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      delay_params = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>,
                       jacobian__>(delay_params_lower, lp__,
                       delay_params_length);
      current_statement__ = 1;
      stan::math::check_matching_dims("constraint", "delay_params",
        delay_params, "lower", delay_params_lower);
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double sqrt_phi = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,-1> trunc_obs =
        Eigen::Matrix<double,-1,-1>::Constant(trunc_obs_1dim__,
          trunc_obs_2dim__, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> trunc_rev_cmf =
        Eigen::Matrix<double,-1,1>::Constant(trunc_rev_cmf_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(delay_params);
      out__.write(phi);
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 4;
      sqrt_phi = (1 / stan::math::sqrt(phi));
      current_statement__ = 5;
      stan::model::assign(trunc_obs,
        stan::math::rep_matrix(0,
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1), (obs_sets - 1)),
        "assigning variable trunc_obs");
      current_statement__ = 6;
      stan::model::assign(trunc_rev_cmf,
        get_delay_rev_pmf(trunc_id,
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1), delay_types_p,
          delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
          delay_np_pmf_groups, delay_params, delay_params_groups, delay_dist,
          0, 1, 1, pstream__), "assigning variable trunc_rev_cmf");
      {
        current_statement__ = 9;
        stan::math::validate_non_negative_index("last_obs", "t", t);
        Eigen::Matrix<double,-1,1> last_obs =
          Eigen::Matrix<double,-1,1>::Constant(t,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 11;
        stan::model::assign(last_obs,
          truncate_obs(
            stan::math::to_vector(
              stan::model::rvalue(obs, "obs", stan::model::index_omni(),
                stan::model::index_uni(obs_sets))), trunc_rev_cmf, 1,
            pstream__), "assigning variable last_obs");
        current_statement__ = 14;
        for (int i = 1; i <= (obs_sets - 1); ++i) {
          current_statement__ = 12;
          stan::model::assign(trunc_obs,
            stan::math::add(
              truncate_obs(
                stan::model::rvalue(last_obs, "last_obs",
                  stan::model::index_min_max(
                    stan::model::rvalue(start_t, "start_t",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(end_t, "end_t",
                      stan::model::index_uni(i)))), trunc_rev_cmf, 0,
                pstream__), sigma), "assigning variable trunc_obs",
            stan::model::index_min_max(1,
              ((stan::model::rvalue(end_t, "end_t", stan::model::index_uni(i))
              -
              stan::model::rvalue(start_t, "start_t",
                stan::model::index_uni(i))) + 1)), stan::model::index_uni(i));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(sqrt_phi);
        out__.write(trunc_obs);
        out__.write(trunc_rev_cmf);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> recon_obs =
        Eigen::Matrix<double,-1,-1>::Constant(recon_obs_1dim__, obs_sets,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      stan::model::assign(recon_obs,
        stan::math::rep_matrix(0,
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(trunc_id)) + 1), obs_sets),
        "assigning variable recon_obs");
      Eigen::Matrix<double,-1,-1> gen_obs =
        Eigen::Matrix<double,-1,-1>::Constant(gen_obs_1dim__, gen_obs_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      for (int i = 1; i <= obs_sets; ++i) {
        current_statement__ = 16;
        stan::model::assign(recon_obs,
          truncate_obs(
            stan::math::to_vector(
              stan::model::rvalue(obs, "obs",
                stan::model::index_min_max(
                  stan::model::rvalue(start_t, "start_t",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(end_t, "end_t",
                    stan::model::index_uni(i))), stan::model::index_uni(i))),
            trunc_rev_cmf, 1, pstream__), "assigning variable recon_obs",
          stan::model::index_min_max(1,
            ((stan::model::rvalue(end_t, "end_t", stan::model::index_uni(i))
            -
            stan::model::rvalue(start_t, "start_t", stan::model::index_uni(i)))
            + 1)), stan::model::index_uni(i));
      }
      current_statement__ = 27;
      for (int i = 1; i <= (obs_sets - 1); ++i) {
        current_statement__ = 25;
        for (int j = 1; j <=
             (stan::model::rvalue(delay_type_max, "delay_type_max",
                stan::model::index_uni(trunc_id)) + 1); ++j) {
          current_statement__ = 23;
          if (stan::math::logical_eq(
                stan::model::rvalue(trunc_obs, "trunc_obs",
                  stan::model::index_uni(j), stan::model::index_uni(i)), 0)) {
            current_statement__ = 21;
            stan::model::assign(gen_obs, 0, "assigning variable gen_obs",
              stan::model::index_uni(j), stan::model::index_uni(i));
          } else {
            current_statement__ = 19;
            stan::model::assign(gen_obs,
              stan::math::neg_binomial_2_rng(
                stan::model::rvalue(trunc_obs, "trunc_obs",
                  stan::model::index_uni(j), stan::model::index_uni(i)),
                sqrt_phi, base_rng__), "assigning variable gen_obs",
              stan::model::index_uni(j), stan::model::index_uni(i));
          }
        }
      }
      out__.write(recon_obs);
      out__.write(gen_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> delay_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delay_params_length,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(delay_params,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(delay_params_length),
        "assigning variable delay_params");
      out__.write_free_lb(delay_params_lower, delay_params);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, phi);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "delay_params",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_params_length)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> delay_params =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(delay_params_length,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> delay_params_flat__;
        current_statement__ = 1;
        delay_params_flat__ = context__.vals_r("delay_params");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          stan::model::assign(delay_params, delay_params_flat__[(pos__ - 1)],
            "assigning variable delay_params", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(delay_params_lower, delay_params);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = context__.vals_r("phi")[(1 - 1)];
      out__.write_free_lb(0, phi);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"delay_params", "phi", "sigma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"sqrt_phi", "trunc_obs", "trunc_rev_cmf"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"recon_obs", "gen_obs"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    delay_params_length)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(trunc_obs_1dim__),
               static_cast<size_t>(trunc_obs_2dim__)},
             std::vector<size_t>{static_cast<size_t>(trunc_rev_cmf_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(recon_obs_1dim__),
               static_cast<size_t>(obs_sets)},
             std::vector<size_t>{static_cast<size_t>(gen_obs_1dim__),
               static_cast<size_t>(gen_obs_2dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
      param_names__.emplace_back(std::string() + "delay_params" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sqrt_phi");
      for (int sym1__ = 1; sym1__ <= trunc_obs_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= trunc_obs_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "trunc_obs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= trunc_rev_cmf_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "trunc_rev_cmf" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= obs_sets; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= recon_obs_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "recon_obs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= gen_obs_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= gen_obs_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "gen_obs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
      param_names__.emplace_back(std::string() + "delay_params" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sqrt_phi");
      for (int sym1__ = 1; sym1__ <= trunc_obs_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= trunc_obs_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "trunc_obs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= trunc_rev_cmf_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "trunc_rev_cmf" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= obs_sets; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= recon_obs_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "recon_obs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= gen_obs_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= gen_obs_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "gen_obs" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"delay_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(delay_params_length) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sqrt_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"trunc_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(trunc_obs_1dim__) + ",\"cols\":" + std::to_string(trunc_obs_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"trunc_rev_cmf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(trunc_rev_cmf_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"recon_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(recon_obs_1dim__) + ",\"cols\":" + std::to_string(obs_sets) + "},\"block\":\"generated_quantities\"},{\"name\":\"gen_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(gen_obs_1dim__) + ",\"cols\":" + std::to_string(gen_obs_2dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"delay_params\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(delay_params_length) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sqrt_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"trunc_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(trunc_obs_1dim__) + ",\"cols\":" + std::to_string(trunc_obs_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"trunc_rev_cmf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(trunc_rev_cmf_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"recon_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(recon_obs_1dim__) + ",\"cols\":" + std::to_string(obs_sets) + "},\"block\":\"generated_quantities\"},{\"name\":\"gen_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(gen_obs_1dim__) + ",\"cols\":" + std::to_string(gen_obs_2dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((delay_params_length + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((1 +
      (trunc_obs_1dim__ * trunc_obs_2dim__)) + trunc_rev_cmf_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((recon_obs_1dim__ * obs_sets) + (gen_obs_1dim__ * gen_obs_2dim__)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((delay_params_length + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((1 +
      (trunc_obs_1dim__ * trunc_obs_2dim__)) + trunc_rev_cmf_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((recon_obs_1dim__ * obs_sets) + (gen_obs_1dim__ * gen_obs_2dim__)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_estimate_truncation_namespace::model_estimate_truncation;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_estimate_truncation_namespace::profiles__;
}
#endif
#endif
