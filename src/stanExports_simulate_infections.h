// Generated by rstantools.  Do not edit by hand.

/*
    EpiNow2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiNow2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiNow2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.35.0
#include <stan/model/model_header.hpp>
namespace model_simulate_infections_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 576> locations_array__ =
  {" (found before start of program)",
  " (in 'simulate_infections', line 854, column 2 to column 26)",
  " (in 'simulate_infections', line 855, column 2 to column 38)",
  " (in 'simulate_infections', line 856, column 2 to column 49)",
  " (in 'simulate_infections', line 857, column 2 to column 36)",
  " (in 'simulate_infections', line 860, column 11 to column 36)",
  " (in 'simulate_infections', line 860, column 4 to column 49)",
  " (in 'simulate_infections', line 861, column 4 to line 866, column 6)",
  " (in 'simulate_infections', line 867, column 4 to line 870, column 7)",
  " (in 'simulate_infections', line 883, column 6 to line 885, column 8)",
  " (in 'simulate_infections', line 882, column 11 to line 886, column 5)",
  " (in 'simulate_infections', line 872, column 13 to column 41)",
  " (in 'simulate_infections', line 872, column 6 to line 877, column 8)",
  " (in 'simulate_infections', line 879, column 6 to line 881, column 8)",
  " (in 'simulate_infections', line 871, column 18 to line 882, column 5)",
  " (in 'simulate_infections', line 871, column 4 to line 886, column 5)",
  " (in 'simulate_infections', line 889, column 6 to line 891, column 63)",
  " (in 'simulate_infections', line 888, column 25 to line 892, column 5)",
  " (in 'simulate_infections', line 888, column 4 to line 892, column 5)",
  " (in 'simulate_infections', line 895, column 13 to column 41)",
  " (in 'simulate_infections', line 895, column 6 to line 900, column 8)",
  " (in 'simulate_infections', line 901, column 6 to line 903, column 8)",
  " (in 'simulate_infections', line 894, column 18 to line 904, column 5)",
  " (in 'simulate_infections', line 894, column 4 to line 904, column 5)",
  " (in 'simulate_infections', line 907, column 6 to column 83)",
  " (in 'simulate_infections', line 906, column 19 to line 908, column 5)",
  " (in 'simulate_infections', line 906, column 4 to line 908, column 5)",
  " (in 'simulate_infections', line 910, column 4 to line 912, column 6)",
  " (in 'simulate_infections', line 913, column 4 to line 915, column 6)",
  " (in 'simulate_infections', line 858, column 17 to line 916, column 3)",
  " (in 'simulate_infections', line 858, column 2 to line 916, column 3)",
  " (in 'simulate_infections', line 808, column 2 to column 8)",
  " (in 'simulate_infections', line 809, column 2 to column 8)",
  " (in 'simulate_infections', line 810, column 2 to column 19)",
  " (in 'simulate_infections', line 811, column 2 to column 18)",
  " (in 'simulate_infections', line 813, column 8 to column 9)",
  " (in 'simulate_infections', line 813, column 2 to column 38)",
  " (in 'simulate_infections', line 814, column 8 to column 9)",
  " (in 'simulate_infections', line 814, column 11 to column 35)",
  " (in 'simulate_infections', line 814, column 2 to column 57)",
  " (in 'simulate_infections', line 815, column 9 to column 10)",
  " (in 'simulate_infections', line 815, column 12 to column 28)",
  " (in 'simulate_infections', line 815, column 2 to column 32)",
  " (in 'simulate_infections', line 816, column 2 to column 10)",
  " (in 'simulate_infections', line 817, column 2 to column 23)",
  " (in 'simulate_infections', line 819, column 2 to column 25)",
  " (in 'simulate_infections', line 820, column 2 to column 27)",
  " (in 'simulate_infections', line 821, column 2 to column 28)",
  " (in 'simulate_infections', line 822, column 8 to column 17)",
  " (in 'simulate_infections', line 822, column 2 to column 44)",
  " (in 'simulate_infections', line 823, column 8 to column 17)",
  " (in 'simulate_infections', line 823, column 2 to column 45)",
  " (in 'simulate_infections', line 824, column 2 to column 37)",
  " (in 'simulate_infections', line 825, column 31 to column 50)",
  " (in 'simulate_infections', line 825, column 2 to column 65)",
  " (in 'simulate_infections', line 826, column 8 to column 22)",
  " (in 'simulate_infections', line 826, column 2 to column 59)",
  " (in 'simulate_infections', line 827, column 8 to column 17)",
  " (in 'simulate_infections', line 827, column 2 to column 36)",
  " (in 'simulate_infections', line 828, column 2 to column 37)",
  " (in 'simulate_infections', line 829, column 8 to column 9)",
  " (in 'simulate_infections', line 829, column 18 to column 37)",
  " (in 'simulate_infections', line 829, column 2 to column 52)",
  " (in 'simulate_infections', line 830, column 8 to column 21)",
  " (in 'simulate_infections', line 830, column 2 to column 58)",
  " (in 'simulate_infections', line 831, column 2 to column 29)",
  " (in 'simulate_infections', line 832, column 8 to column 15)",
  " (in 'simulate_infections', line 832, column 2 to column 46)",
  " (in 'simulate_infections', line 833, column 8 to column 15)",
  " (in 'simulate_infections', line 833, column 2 to column 47)",
  " (in 'simulate_infections', line 834, column 8 to column 23)",
  " (in 'simulate_infections', line 834, column 2 to column 59)",
  " (in 'simulate_infections', line 835, column 2 to column 26)",
  " (in 'simulate_infections', line 837, column 8 to column 24)",
  " (in 'simulate_infections', line 837, column 2 to column 42)",
  " (in 'simulate_infections', line 838, column 2 to column 18)",
  " (in 'simulate_infections', line 839, column 8 to column 9)",
  " (in 'simulate_infections', line 839, column 11 to column 22)",
  " (in 'simulate_infections', line 839, column 2 to column 60)",
  " (in 'simulate_infections', line 840, column 2 to column 16)",
  " (in 'simulate_infections', line 841, column 8 to column 9)",
  " (in 'simulate_infections', line 841, column 11 to column 20)",
  " (in 'simulate_infections', line 841, column 2 to column 58)",
  " (in 'simulate_infections', line 842, column 2 to column 17)",
  " (in 'simulate_infections', line 843, column 8 to column 9)",
  " (in 'simulate_infections', line 843, column 11 to column 21)",
  " (in 'simulate_infections', line 843, column 2 to column 47)",
  " (in 'simulate_infections', line 844, column 2 to column 26)",
  " (in 'simulate_infections', line 847, column 8 to column 19)",
  " (in 'simulate_infections', line 847, column 2 to line 850, column 4)",
  " (in 'simulate_infections', line 854, column 9 to column 10)",
  " (in 'simulate_infections', line 854, column 12 to column 13)",
  " (in 'simulate_infections', line 855, column 9 to column 10)",
  " (in 'simulate_infections', line 855, column 12 to column 28)",
  " (in 'simulate_infections', line 856, column 8 to column 9)",
  " (in 'simulate_infections', line 856, column 11 to column 27)",
  " (in 'simulate_infections', line 857, column 9 to column 10)",
  " (in 'simulate_infections', line 857, column 12 to column 32)",
  " (in 'simulate_infections', line 11, column 2 to column 30)",
  " (in 'simulate_infections', line 12, column 2 to column 41)",
  " (in 'simulate_infections', line 13, column 2 to column 16)",
  " (in 'simulate_infections', line 14, column 2 to column 41)",
  " (in 'simulate_infections', line 15, column 2 to column 19)",
  " (in 'simulate_infections', line 16, column 2 to column 42)",
  " (in 'simulate_infections', line 10, column 62 to line 17, column 1)",
  " (in 'simulate_infections', line 27, column 2 to column 30)",
  " (in 'simulate_infections', line 28, column 2 to column 41)",
  " (in 'simulate_infections', line 29, column 2 to column 19)",
  " (in 'simulate_infections', line 30, column 2 to column 41)",
  " (in 'simulate_infections', line 30, column 41 to column 42)",
  " (in 'simulate_infections', line 31, column 2 to column 30)",
  " (in 'simulate_infections', line 32, column 2 to column 42)",
  " (in 'simulate_infections', line 26, column 61 to line 33, column 1)",
  " (in 'simulate_infections', line 47, column 2 to column 29)",
  " (in 'simulate_infections', line 48, column 2 to column 29)",
  " (in 'simulate_infections', line 49, column 9 to column 12)",
  " (in 'simulate_infections', line 49, column 2 to column 16)",
  " (in 'simulate_infections', line 51, column 4 to column 74)",
  " (in 'simulate_infections', line 50, column 29 to line 52, column 3)",
  " (in 'simulate_infections', line 50, column 2 to line 52, column 3)",
  " (in 'simulate_infections', line 54, column 4 to column 59)",
  " (in 'simulate_infections', line 53, column 18 to line 55, column 3)",
  " (in 'simulate_infections', line 53, column 2 to line 55, column 3)",
  " (in 'simulate_infections', line 57, column 4 to column 65)",
  " (in 'simulate_infections', line 58, column 4 to column 75)",
  " (in 'simulate_infections', line 56, column 20 to line 59, column 3)",
  " (in 'simulate_infections', line 56, column 2 to line 59, column 3)",
  " (in 'simulate_infections', line 62, column 6 to column 66)",
  " (in 'simulate_infections', line 63, column 6 to column 77)",
  " (in 'simulate_infections', line 61, column 30 to line 64, column 5)",
  " (in 'simulate_infections', line 61, column 4 to line 64, column 5)",
  " (in 'simulate_infections', line 60, column 18 to line 65, column 3)",
  " (in 'simulate_infections', line 60, column 2 to line 65, column 3)",
  " (in 'simulate_infections', line 66, column 2 to column 11)",
  " (in 'simulate_infections', line 46, column 58 to line 67, column 1)",
  " (in 'simulate_infections', line 84, column 2 to column 35)",
  " (in 'simulate_infections', line 85, column 2 to column 43)",
  " (in 'simulate_infections', line 87, column 4 to column 44)",
  " (in 'simulate_infections', line 86, column 19 to line 88, column 3)",
  " (in 'simulate_infections', line 86, column 2 to line 88, column 3)",
  " (in 'simulate_infections', line 89, column 9 to column 10)",
  " (in 'simulate_infections', line 89, column 2 to column 80)",
  " (in 'simulate_infections', line 90, column 2 to column 45)",
  " (in 'simulate_infections', line 83, column 44 to line 91, column 1)",
  " (in 'simulate_infections', line 97, column 9 to column 10)",
  " (in 'simulate_infections', line 97, column 2 to column 17)",
  " (in 'simulate_infections', line 98, column 9 to column 10)",
  " (in 'simulate_infections', line 98, column 2 to column 23)",
  " (in 'simulate_infections', line 108, column 4 to column 54)",
  " (in 'simulate_infections', line 107, column 9 to line 109, column 3)",
  " (in 'simulate_infections', line 105, column 6 to column 59)",
  " (in 'simulate_infections', line 104, column 19 to line 106, column 5)",
  " (in 'simulate_infections', line 104, column 4 to line 106, column 5)",
  " (in 'simulate_infections', line 103, column 24 to line 107, column 3)",
  " (in 'simulate_infections', line 103, column 9 to line 109, column 3)",
  " (in 'simulate_infections', line 101, column 6 to column 63)",
  " (in 'simulate_infections', line 100, column 19 to line 102, column 5)",
  " (in 'simulate_infections', line 100, column 4 to line 102, column 5)",
  " (in 'simulate_infections', line 99, column 17 to line 103, column 3)",
  " (in 'simulate_infections', line 99, column 2 to line 109, column 3)",
  " (in 'simulate_infections', line 120, column 4 to column 16)",
  " (in 'simulate_infections', line 119, column 9 to line 121, column 3)",
  " (in 'simulate_infections', line 112, column 4 to column 28)",
  " (in 'simulate_infections', line 113, column 4 to column 28)",
  " (in 'simulate_infections', line 115, column 6 to column 71)",
  " (in 'simulate_infections', line 114, column 15 to line 116, column 5)",
  " (in 'simulate_infections', line 114, column 4 to line 116, column 5)",
  " (in 'simulate_infections', line 118, column 4 to column 53)",
  " (in 'simulate_infections', line 111, column 13 to line 119, column 3)",
  " (in 'simulate_infections', line 111, column 2 to line 121, column 3)",
  " (in 'simulate_infections', line 122, column 2 to column 20)",
  " (in 'simulate_infections', line 96, column 55 to line 123, column 1)",
  " (in 'simulate_infections', line 128, column 8 to column 19)",
  " (in 'simulate_infections', line 128, column 2 to column 29)",
  " (in 'simulate_infections', line 130, column 4 to column 15)",
  " (in 'simulate_infections', line 135, column 8 to line 136, column 53)",
  " (in 'simulate_infections', line 134, column 13 to line 137, column 7)",
  " (in 'simulate_infections', line 133, column 8 to column 47)",
  " (in 'simulate_infections', line 132, column 28 to line 134, column 7)",
  " (in 'simulate_infections', line 132, column 6 to line 137, column 7)",
  " (in 'simulate_infections', line 131, column 69 to line 138, column 5)",
  " (in 'simulate_infections', line 131, column 4 to line 138, column 5)",
  " (in 'simulate_infections', line 129, column 27 to line 139, column 3)",
  " (in 'simulate_infections', line 129, column 2 to line 139, column 3)",
  " (in 'simulate_infections', line 140, column 2 to column 13)",
  " (in 'simulate_infections', line 127, column 2 to line 141, column 1)",
  " (in 'simulate_infections', line 150, column 9 to column 12)",
  " (in 'simulate_infections', line 150, column 2 to column 39)",
  " (in 'simulate_infections', line 151, column 2 to column 22)",
  " (in 'simulate_infections', line 152, column 2 to column 14)",
  " (in 'simulate_infections', line 172, column 6 to column 57)",
  " (in 'simulate_infections', line 173, column 6 to column 63)",
  " (in 'simulate_infections', line 174, column 6 to column 42)",
  " (in 'simulate_infections', line 178, column 8 to line 180, column 10)",
  " (in 'simulate_infections', line 177, column 13 to line 181, column 7)",
  " (in 'simulate_infections', line 176, column 8 to column 49)",
  " (in 'simulate_infections', line 175, column 28 to line 177, column 7)",
  " (in 'simulate_infections', line 175, column 6 to line 181, column 7)",
  " (in 'simulate_infections', line 171, column 11 to line 182, column 5)",
  " (in 'simulate_infections', line 155, column 6 to column 57)",
  " (in 'simulate_infections', line 156, column 6 to column 63)",
  " (in 'simulate_infections', line 157, column 13 to column 45)",
  " (in 'simulate_infections', line 157, column 6 to line 162, column 8)",
  " (in 'simulate_infections', line 163, column 6 to column 59)",
  " (in 'simulate_infections', line 167, column 8 to line 169, column 10)",
  " (in 'simulate_infections', line 166, column 13 to line 170, column 7)",
  " (in 'simulate_infections', line 165, column 8 to column 42)",
  " (in 'simulate_infections', line 164, column 28 to line 166, column 7)",
  " (in 'simulate_infections', line 164, column 6 to line 170, column 7)",
  " (in 'simulate_infections', line 154, column 26 to line 171, column 5)",
  " (in 'simulate_infections', line 154, column 4 to line 182, column 5)",
  " (in 'simulate_infections', line 183, column 4 to column 26)",
  " (in 'simulate_infections', line 153, column 81 to line 184, column 3)",
  " (in 'simulate_infections', line 153, column 2 to line 184, column 3)",
  " (in 'simulate_infections', line 186, column 4 to line 189, column 6)",
  " (in 'simulate_infections', line 185, column 21 to line 190, column 3)",
  " (in 'simulate_infections', line 185, column 2 to line 190, column 3)",
  " (in 'simulate_infections', line 192, column 4 to column 30)",
  " (in 'simulate_infections', line 191, column 18 to line 193, column 3)",
  " (in 'simulate_infections', line 191, column 2 to line 193, column 3)",
  " (in 'simulate_infections', line 195, column 4 to column 23)",
  " (in 'simulate_infections', line 194, column 19 to line 196, column 3)",
  " (in 'simulate_infections', line 194, column 2 to line 196, column 3)",
  " (in 'simulate_infections', line 197, column 2 to column 13)",
  " (in 'simulate_infections', line 148, column 2 to line 198, column 1)",
  " (in 'simulate_infections', line 203, column 2 to column 55)",
  " (in 'simulate_infections', line 205, column 4 to column 11)",
  " (in 'simulate_infections', line 204, column 21 to line 206, column 3)",
  " (in 'simulate_infections', line 204, column 2 to line 206, column 3)",
  " (in 'simulate_infections', line 208, column 4 to column 39)",
  " (in 'simulate_infections', line 209, column 4 to column 45)",
  " (in 'simulate_infections', line 215, column 10 to column 77)",
  " (in 'simulate_infections', line 214, column 14 to line 216, column 9)",
  " (in 'simulate_infections', line 213, column 10 to column 104)",
  " (in 'simulate_infections', line 212, column 27 to line 214, column 9)",
  " (in 'simulate_infections', line 212, column 8 to line 216, column 9)",
  " (in 'simulate_infections', line 211, column 34 to line 217, column 7)",
  " (in 'simulate_infections', line 211, column 6 to line 217, column 7)",
  " (in 'simulate_infections', line 210, column 25 to line 218, column 5)",
  " (in 'simulate_infections', line 210, column 4 to line 218, column 5)",
  " (in 'simulate_infections', line 207, column 24 to line 219, column 3)",
  " (in 'simulate_infections', line 207, column 2 to line 219, column 3)",
  " (in 'simulate_infections', line 202, column 59 to line 220, column 1)",
  " (in 'simulate_infections', line 222, column 2 to column 29)",
  " (in 'simulate_infections', line 223, column 9 to column 12)",
  " (in 'simulate_infections', line 223, column 2 to column 18)",
  " (in 'simulate_infections', line 225, column 4 to column 49)",
  " (in 'simulate_infections', line 226, column 4 to column 31)",
  " (in 'simulate_infections', line 227, column 4 to column 45)",
  " (in 'simulate_infections', line 224, column 19 to line 228, column 3)",
  " (in 'simulate_infections', line 224, column 2 to line 228, column 3)",
  " (in 'simulate_infections', line 229, column 2 to column 13)",
  " (in 'simulate_infections', line 221, column 57 to line 230, column 1)",
  " (in 'simulate_infections', line 247, column 9 to column 10)",
  " (in 'simulate_infections', line 247, column 2 to column 48)",
  " (in 'simulate_infections', line 248, column 2 to column 51)",
  " (in 'simulate_infections', line 249, column 2 to column 49)",
  " (in 'simulate_infections', line 250, column 2 to column 50)",
  " (in 'simulate_infections', line 246, column 55 to line 251, column 1)",
  " (in 'simulate_infections', line 263, column 9 to column 10)",
  " (in 'simulate_infections', line 263, column 2 to column 48)",
  " (in 'simulate_infections', line 264, column 2 to column 56)",
  " (in 'simulate_infections', line 265, column 9 to column 10)",
  " (in 'simulate_infections', line 265, column 2 to column 85)",
  " (in 'simulate_infections', line 266, column 2 to column 29)",
  " (in 'simulate_infections', line 262, column 68 to line 267, column 1)",
  " (in 'simulate_infections', line 277, column 2 to column 27)",
  " (in 'simulate_infections', line 278, column 9 to column 10)",
  " (in 'simulate_infections', line 278, column 2 to column 48)",
  " (in 'simulate_infections', line 279, column 9 to column 10)",
  " (in 'simulate_infections', line 279, column 2 to column 109)",
  " (in 'simulate_infections', line 280, column 2 to column 26)",
  " (in 'simulate_infections', line 276, column 53 to line 281, column 1)",
  " (in 'simulate_infections', line 292, column 9 to column 10)",
  " (in 'simulate_infections', line 292, column 12 to column 13)",
  " (in 'simulate_infections', line 292, column 2 to column 123)",
  " (in 'simulate_infections', line 293, column 2 to column 13)",
  " (in 'simulate_infections', line 291, column 43 to line 294, column 1)",
  " (in 'simulate_infections', line 305, column 9 to column 10)",
  " (in 'simulate_infections', line 305, column 12 to column 13)",
  " (in 'simulate_infections', line 305, column 2 to column 91)",
  " (in 'simulate_infections', line 306, column 2 to column 42)",
  " (in 'simulate_infections', line 304, column 53 to line 307, column 1)",
  " (in 'simulate_infections', line 322, column 2 to column 75)",
  " (in 'simulate_infections', line 323, column 2 to column 88)",
  " (in 'simulate_infections', line 324, column 2 to column 21)",
  " (in 'simulate_infections', line 321, column 66 to line 325, column 1)",
  " (in 'simulate_infections', line 337, column 9 to column 18)",
  " (in 'simulate_infections', line 337, column 2 to column 66)",
  " (in 'simulate_infections', line 338, column 2 to column 28)",
  " (in 'simulate_infections', line 342, column 4 to column 35)",
  " (in 'simulate_infections', line 341, column 9 to line 343, column 3)",
  " (in 'simulate_infections', line 340, column 4 to column 45)",
  " (in 'simulate_infections', line 339, column 19 to line 341, column 3)",
  " (in 'simulate_infections', line 339, column 2 to line 343, column 3)",
  " (in 'simulate_infections', line 336, column 72 to line 344, column 1)",
  " (in 'simulate_infections', line 360, column 9 to column 30)",
  " (in 'simulate_infections', line 360, column 2 to column 40)",
  " (in 'simulate_infections', line 367, column 4 to column 54)",
  " (in 'simulate_infections', line 366, column 24 to line 368, column 3)",
  " (in 'simulate_infections', line 366, column 9 to line 368, column 3)",
  " (in 'simulate_infections', line 365, column 4 to column 49)",
  " (in 'simulate_infections', line 364, column 24 to line 366, column 3)",
  " (in 'simulate_infections', line 364, column 9 to line 368, column 3)",
  " (in 'simulate_infections', line 363, column 4 to column 46)",
  " (in 'simulate_infections', line 362, column 17 to line 364, column 3)",
  " (in 'simulate_infections', line 362, column 2 to line 368, column 3)",
  " (in 'simulate_infections', line 369, column 2 to column 32)",
  " (in 'simulate_infections', line 359, column 67 to line 370, column 1)",
  " (in 'simulate_infections', line 385, column 4 to column 67)",
  " (in 'simulate_infections', line 385, column 59 to column 65)",
  " (in 'simulate_infections', line 385, column 51 to column 57)",
  " (in 'simulate_infections', line 384, column 9 to line 386, column 3)",
  " (in 'simulate_infections', line 383, column 4 to column 60)",
  " (in 'simulate_infections', line 383, column 52 to column 58)",
  " (in 'simulate_infections', line 383, column 44 to column 50)",
  " (in 'simulate_infections', line 382, column 20 to line 384, column 3)",
  " (in 'simulate_infections', line 382, column 2 to line 386, column 3)",
  " (in 'simulate_infections', line 381, column 46 to line 387, column 1)",
  " (in 'simulate_infections', line 398, column 2 to column 45)",
  " (in 'simulate_infections', line 398, column 41 to column 42)",
  " (in 'simulate_infections', line 399, column 2 to column 21)",
  " (in 'simulate_infections', line 397, column 40 to line 400, column 1)",
  " (in 'simulate_infections', line 418, column 2 to column 38)",
  " (in 'simulate_infections', line 419, column 2 to column 33)",
  " (in 'simulate_infections', line 421, column 9 to column 10)",
  " (in 'simulate_infections', line 421, column 2 to column 37)",
  " (in 'simulate_infections', line 424, column 11 to column 19)",
  " (in 'simulate_infections', line 424, column 4 to column 25)",
  " (in 'simulate_infections', line 425, column 4 to column 15)",
  " (in 'simulate_infections', line 426, column 4 to column 51)",
  " (in 'simulate_infections', line 427, column 4 to column 21)",
  " (in 'simulate_infections', line 423, column 12 to line 428, column 3)",
  " (in 'simulate_infections', line 423, column 2 to line 428, column 3)",
  " (in 'simulate_infections', line 431, column 11 to column 12)",
  " (in 'simulate_infections', line 431, column 4 to column 36)",
  " (in 'simulate_infections', line 439, column 6 to column 31)",
  " (in 'simulate_infections', line 440, column 6 to column 30)",
  " (in 'simulate_infections', line 438, column 11 to line 441, column 5)",
  " (in 'simulate_infections', line 433, column 6 to column 25)",
  " (in 'simulate_infections', line 436, column 8 to column 61)",
  " (in 'simulate_infections', line 435, column 20 to line 437, column 7)",
  " (in 'simulate_infections', line 435, column 6 to line 437, column 7)",
  " (in 'simulate_infections', line 432, column 20 to line 438, column 5)",
  " (in 'simulate_infections', line 432, column 4 to line 441, column 5)",
  " (in 'simulate_infections', line 442, column 4 to column 15)",
  " (in 'simulate_infections', line 430, column 12 to line 443, column 3)",
  " (in 'simulate_infections', line 430, column 2 to line 443, column 3)",
  " (in 'simulate_infections', line 444, column 2 to column 16)",
  " (in 'simulate_infections', line 416, column 52 to line 445, column 1)",
  " (in 'simulate_infections', line 465, column 2 to column 37)",
  " (in 'simulate_infections', line 468, column 4 to column 36)",
  " (in 'simulate_infections', line 468, column 32 to column 33)",
  " (in 'simulate_infections', line 469, column 4 to column 37)",
  " (in 'simulate_infections', line 467, column 16 to line 470, column 3)",
  " (in 'simulate_infections', line 467, column 2 to line 470, column 3)",
  " (in 'simulate_infections', line 472, column 2 to column 53)",
  " (in 'simulate_infections', line 474, column 4 to column 47)",
  " (in 'simulate_infections', line 473, column 24 to line 475, column 3)",
  " (in 'simulate_infections', line 473, column 2 to line 475, column 3)",
  " (in 'simulate_infections', line 464, column 30 to line 476, column 1)",
  " (in 'simulate_infections', line 481, column 2 to column 43)",
  " (in 'simulate_infections', line 485, column 2 to column 65)",
  " (in 'simulate_infections', line 487, column 2 to column 39)",
  " (in 'simulate_infections', line 489, column 2 to column 58)",
  " (in 'simulate_infections', line 491, column 2 to line 493, column 4)",
  " (in 'simulate_infections', line 494, column 2 to column 18)",
  " (in 'simulate_infections', line 480, column 55 to line 495, column 1)",
  " (in 'simulate_infections', line 501, column 2 to column 28)",
  " (in 'simulate_infections', line 502, column 2 to column 20)",
  " (in 'simulate_infections', line 503, column 2 to column 19)",
  " (in 'simulate_infections', line 504, column 9 to column 11)",
  " (in 'simulate_infections', line 504, column 2 to column 20)",
  " (in 'simulate_infections', line 505, column 2 to column 18)",
  " (in 'simulate_infections', line 506, column 9 to column 10)",
  " (in 'simulate_infections', line 506, column 2 to column 42)",
  " (in 'simulate_infections', line 507, column 9 to column 11)",
  " (in 'simulate_infections', line 507, column 2 to column 28)",
  " (in 'simulate_infections', line 508, column 9 to column 11)",
  " (in 'simulate_infections', line 508, column 2 to column 28)",
  " (in 'simulate_infections', line 510, column 2 to column 45)",
  " (in 'simulate_infections', line 512, column 4 to column 41)",
  " (in 'simulate_infections', line 514, column 6 to column 49)",
  " (in 'simulate_infections', line 513, column 21 to line 515, column 5)",
  " (in 'simulate_infections', line 513, column 4 to line 515, column 5)",
  " (in 'simulate_infections', line 511, column 15 to line 516, column 3)",
  " (in 'simulate_infections', line 511, column 2 to line 516, column 3)",
  " (in 'simulate_infections', line 519, column 4 to column 47)",
  " (in 'simulate_infections', line 518, column 11 to line 520, column 3)",
  " (in 'simulate_infections', line 518, column 2 to line 520, column 3)",
  " (in 'simulate_infections', line 523, column 4 to column 78)",
  " (in 'simulate_infections', line 529, column 6 to column 53)",
  " (in 'simulate_infections', line 528, column 9 to line 530, column 5)",
  " (in 'simulate_infections', line 525, column 6 to column 80)",
  " (in 'simulate_infections', line 526, column 6 to column 51)",
  " (in 'simulate_infections', line 527, column 6 to column 73)",
  " (in 'simulate_infections', line 524, column 24 to line 528, column 5)",
  " (in 'simulate_infections', line 524, column 4 to line 530, column 5)",
  " (in 'simulate_infections', line 532, column 6 to column 70)",
  " (in 'simulate_infections', line 531, column 23 to line 533, column 5)",
  " (in 'simulate_infections', line 531, column 4 to line 533, column 5)",
  " (in 'simulate_infections', line 522, column 18 to line 534, column 3)",
  " (in 'simulate_infections', line 522, column 2 to line 534, column 3)",
  " (in 'simulate_infections', line 535, column 2 to column 21)",
  " (in 'simulate_infections', line 499, column 44 to line 536, column 1)",
  " (in 'simulate_infections', line 540, column 2 to column 38)",
  " (in 'simulate_infections', line 541, column 9 to column 10)",
  " (in 'simulate_infections', line 541, column 2 to column 45)",
  " (in 'simulate_infections', line 555, column 4 to column 44)",
  " (in 'simulate_infections', line 554, column 7 to line 556, column 3)",
  " (in 'simulate_infections', line 543, column 11 to column 12)",
  " (in 'simulate_infections', line 543, column 4 to column 37)",
  " (in 'simulate_infections', line 549, column 6 to column 70)",
  " (in 'simulate_infections', line 551, column 8 to column 57)",
  " (in 'simulate_infections', line 550, column 21 to line 552, column 7)",
  " (in 'simulate_infections', line 550, column 6 to line 552, column 7)",
  " (in 'simulate_infections', line 548, column 26 to line 553, column 5)",
  " (in 'simulate_infections', line 548, column 10 to line 553, column 5)",
  " (in 'simulate_infections', line 547, column 5 to column 41)",
  " (in 'simulate_infections', line 546, column 26 to line 548, column 5)",
  " (in 'simulate_infections', line 546, column 10 to line 553, column 5)",
  " (in 'simulate_infections', line 545, column 6 to column 59)",
  " (in 'simulate_infections', line 544, column 20 to line 546, column 5)",
  " (in 'simulate_infections', line 544, column 4 to line 553, column 5)",
  " (in 'simulate_infections', line 542, column 13 to line 554, column 3)",
  " (in 'simulate_infections', line 542, column 2 to line 556, column 3)",
  " (in 'simulate_infections', line 557, column 2 to column 21)",
  " (in 'simulate_infections', line 539, column 40 to line 558, column 1)",
  " (in 'simulate_infections', line 571, column 2 to column 32)",
  " (in 'simulate_infections', line 572, column 9 to column 11)",
  " (in 'simulate_infections', line 572, column 2 to column 41)",
  " (in 'simulate_infections', line 573, column 2 to column 47)",
  " (in 'simulate_infections', line 570, column 82 to line 574, column 1)",
  " (in 'simulate_infections', line 586, column 2 to column 32)",
  " (in 'simulate_infections', line 587, column 9 to column 10)",
  " (in 'simulate_infections', line 587, column 2 to column 27)",
  " (in 'simulate_infections', line 588, column 2 to column 38)",
  " (in 'simulate_infections', line 589, column 2 to column 25)",
  " (in 'simulate_infections', line 585, column 48 to line 590, column 1)",
  " (in 'simulate_infections', line 603, column 2 to column 32)",
  " (in 'simulate_infections', line 604, column 2 to column 46)",
  " (in 'simulate_infections', line 605, column 9 to column 10)",
  " (in 'simulate_infections', line 605, column 2 to column 36)",
  " (in 'simulate_infections', line 607, column 2 to column 36)",
  " (in 'simulate_infections', line 608, column 2 to column 34)",
  " (in 'simulate_infections', line 609, column 2 to column 46)",
  " (in 'simulate_infections', line 614, column 4 to column 70)",
  " (in 'simulate_infections', line 613, column 9 to line 615, column 3)",
  " (in 'simulate_infections', line 612, column 4 to column 70)",
  " (in 'simulate_infections', line 611, column 19 to line 613, column 3)",
  " (in 'simulate_infections', line 611, column 2 to line 615, column 3)",
  " (in 'simulate_infections', line 616, column 2 to column 24)",
  " (in 'simulate_infections', line 602, column 75 to line 617, column 1)",
  " (in 'simulate_infections', line 633, column 2 to column 49)",
  " (in 'simulate_infections', line 637, column 6 to column 63)",
  " (in 'simulate_infections', line 635, column 30 to line 638, column 5)",
  " (in 'simulate_infections', line 635, column 4 to line 638, column 5)",
  " (in 'simulate_infections', line 641, column 6 to column 57)",
  " (in 'simulate_infections', line 639, column 28 to line 642, column 5)",
  " (in 'simulate_infections', line 639, column 4 to line 642, column 5)",
  " (in 'simulate_infections', line 634, column 18 to line 643, column 3)",
  " (in 'simulate_infections', line 634, column 2 to line 643, column 3)",
  " (in 'simulate_infections', line 632, column 73 to line 644, column 1)",
  " (in 'simulate_infections', line 663, column 2 to column 48)",
  " (in 'simulate_infections', line 664, column 9 to column 10)",
  " (in 'simulate_infections', line 664, column 2 to column 24)",
  " (in 'simulate_infections', line 665, column 8 to column 9)",
  " (in 'simulate_infections', line 665, column 2 to column 25)",
  " (in 'simulate_infections', line 682, column 4 to column 38)",
  " (in 'simulate_infections', line 683, column 4 to column 22)",
  " (in 'simulate_infections', line 681, column 9 to line 684, column 3)",
  " (in 'simulate_infections', line 667, column 4 to column 34)",
  " (in 'simulate_infections', line 668, column 4 to column 14)",
  " (in 'simulate_infections', line 669, column 4 to column 24)",
  " (in 'simulate_infections', line 670, column 4 to column 35)",
  " (in 'simulate_infections', line 673, column 8 to column 47)",
  " (in 'simulate_infections', line 672, column 27 to line 674, column 7)",
  " (in 'simulate_infections', line 672, column 6 to line 674, column 7)",
  " (in 'simulate_infections', line 676, column 8 to column 25)",
  " (in 'simulate_infections', line 675, column 44 to line 677, column 7)",
  " (in 'simulate_infections', line 675, column 6 to line 677, column 7)",
  " (in 'simulate_infections', line 678, column 6 to column 13)",
  " (in 'simulate_infections', line 671, column 39 to line 679, column 5)",
  " (in 'simulate_infections', line 671, column 4 to line 679, column 5)",
  " (in 'simulate_infections', line 680, column 4 to column 33)",
  " (in 'simulate_infections', line 666, column 18 to line 681, column 3)",
  " (in 'simulate_infections', line 666, column 2 to line 684, column 3)",
  " (in 'simulate_infections', line 701, column 6 to column 63)",
  " (in 'simulate_infections', line 700, column 11 to line 702, column 5)",
  " (in 'simulate_infections', line 699, column 6 to column 39)",
  " (in 'simulate_infections', line 698, column 21 to line 700, column 5)",
  " (in 'simulate_infections', line 698, column 4 to line 702, column 5)",
  " (in 'simulate_infections', line 697, column 9 to line 703, column 3)",
  " (in 'simulate_infections', line 686, column 4 to column 78)",
  " (in 'simulate_infections', line 688, column 6 to column 59)",
  " (in 'simulate_infections', line 688, column 55 to column 56)",
  " (in 'simulate_infections', line 687, column 20 to line 689, column 5)",
  " (in 'simulate_infections', line 687, column 4 to line 689, column 5)",
  " (in 'simulate_infections', line 693, column 6 to line 695, column 17)",
  " (in 'simulate_infections', line 692, column 11 to line 696, column 5)",
  " (in 'simulate_infections', line 691, column 6 to column 58)",
  " (in 'simulate_infections', line 690, column 21 to line 692, column 5)",
  " (in 'simulate_infections', line 690, column 4 to line 696, column 5)",
  " (in 'simulate_infections', line 685, column 18 to line 697, column 3)",
  " (in 'simulate_infections', line 685, column 2 to line 703, column 3)",
  " (in 'simulate_infections', line 662, column 60 to line 704, column 1)",
  " (in 'simulate_infections', line 720, column 2 to column 32)",
  " (in 'simulate_infections', line 721, column 9 to column 10)",
  " (in 'simulate_infections', line 721, column 2 to column 20)",
  " (in 'simulate_infections', line 728, column 4 to column 54)",
  " (in 'simulate_infections', line 730, column 6 to column 83)",
  " (in 'simulate_infections', line 729, column 19 to line 731, column 5)",
  " (in 'simulate_infections', line 729, column 4 to line 731, column 5)",
  " (in 'simulate_infections', line 727, column 9 to line 732, column 3)",
  " (in 'simulate_infections', line 725, column 6 to column 64)",
  " (in 'simulate_infections', line 724, column 19 to line 726, column 5)",
  " (in 'simulate_infections', line 724, column 4 to line 726, column 5)",
  " (in 'simulate_infections', line 723, column 23 to line 727, column 3)",
  " (in 'simulate_infections', line 723, column 2 to line 732, column 3)",
  " (in 'simulate_infections', line 733, column 2 to column 18)",
  " (in 'simulate_infections', line 719, column 73 to line 734, column 1)",
  " (in 'simulate_infections', line 747, column 2 to column 32)",
  " (in 'simulate_infections', line 748, column 8 to column 9)",
  " (in 'simulate_infections', line 748, column 2 to column 31)",
  " (in 'simulate_infections', line 749, column 2 to column 24)",
  " (in 'simulate_infections', line 751, column 4 to column 49)",
  " (in 'simulate_infections', line 750, column 18 to line 752, column 3)",
  " (in 'simulate_infections', line 750, column 2 to line 752, column 3)",
  " (in 'simulate_infections', line 761, column 8 to column 97)",
  " (in 'simulate_infections', line 760, column 13 to line 762, column 7)",
  " (in 'simulate_infections', line 759, column 8 to column 78)",
  " (in 'simulate_infections', line 758, column 28 to line 760, column 7)",
  " (in 'simulate_infections', line 758, column 6 to line 762, column 7)",
  " (in 'simulate_infections', line 756, column 11 to line 763, column 5)",
  " (in 'simulate_infections', line 755, column 6 to column 29)",
  " (in 'simulate_infections', line 754, column 27 to line 756, column 5)",
  " (in 'simulate_infections', line 754, column 4 to line 763, column 5)",
  " (in 'simulate_infections', line 753, column 17 to line 764, column 3)",
  " (in 'simulate_infections', line 753, column 2 to line 764, column 3)",
  " (in 'simulate_infections', line 765, column 2 to column 26)",
  " (in 'simulate_infections', line 746, column 77 to line 766, column 1)",
  " (in 'simulate_infections', line 770, column 2 to column 35)",
  " (in 'simulate_infections', line 771, column 2 to column 28)",
  " (in 'simulate_infections', line 772, column 9 to column 11)",
  " (in 'simulate_infections', line 772, column 2 to column 15)",
  " (in 'simulate_infections', line 773, column 9 to column 11)",
  " (in 'simulate_infections', line 773, column 2 to column 16)",
  " (in 'simulate_infections', line 774, column 9 to column 11)",
  " (in 'simulate_infections', line 774, column 2 to column 51)",
  " (in 'simulate_infections', line 777, column 4 to line 779, column 6)",
  " (in 'simulate_infections', line 780, column 4 to column 60)",
  " (in 'simulate_infections', line 776, column 18 to line 781, column 3)",
  " (in 'simulate_infections', line 776, column 2 to line 781, column 3)",
  " (in 'simulate_infections', line 793, column 4 to column 11)",
  " (in 'simulate_infections', line 792, column 7 to line 794, column 3)",
  " (in 'simulate_infections', line 784, column 6 to column 22)",
  " (in 'simulate_infections', line 785, column 6 to column 16)",
  " (in 'simulate_infections', line 787, column 8 to column 22)",
  " (in 'simulate_infections', line 788, column 8 to column 20)",
  " (in 'simulate_infections', line 786, column 56 to line 789, column 7)",
  " (in 'simulate_infections', line 786, column 6 to line 789, column 7)",
  " (in 'simulate_infections', line 790, column 6 to column 29)",
  " (in 'simulate_infections', line 783, column 20 to line 791, column 5)",
  " (in 'simulate_infections', line 783, column 4 to line 791, column 5)",
  " (in 'simulate_infections', line 782, column 14 to line 792, column 3)",
  " (in 'simulate_infections', line 782, column 2 to line 794, column 3)",
  " (in 'simulate_infections', line 795, column 2 to column 13)",
  " (in 'simulate_infections', line 769, column 51 to line 796, column 1)",
  " (in 'simulate_infections', line 799, column 2 to column 35)",
  " (in 'simulate_infections', line 800, column 2 to column 28)",
  " (in 'simulate_infections', line 801, column 9 to column 10)",
  " (in 'simulate_infections', line 801, column 2 to column 38)",
  " (in 'simulate_infections', line 802, column 9 to column 11)",
  " (in 'simulate_infections', line 802, column 2 to column 84)",
  " (in 'simulate_infections', line 803, column 2 to column 17)",
  " (in 'simulate_infections', line 798, column 61 to line 804, column 1)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>>* = nullptr>
std::vector<int>
calc_conv_indices_xlen(const T0__& s, const T1__& xlen, const T2__& ylen,
                       std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>>* = nullptr>
std::vector<int>
calc_conv_indices_len(const T0__& s, const T1__& xlen, const T2__& ylen,
                      std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__, const T2__&
                      len, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_to_report(const T0__& infections_arg__, const T1__&
                   delay_rev_pmf_arg__, const T2__& seeding_time,
                   std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>, std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
discretised_pmf(const T0__& params_arg__, const T1__& n, const T2__& dist,
                std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<stan::value_type_t<T2__>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>>* = nullptr>
std::vector<int>
get_delay_type_max(const T0__& delay_types, const T1__& delay_types_p,
                   const T2__& delay_types_id, const T3__&
                   delay_types_groups, const T4__& delay_max, const T5__&
                   delay_np_pmf_groups, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<stan::value_type_t<T2__>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_std_vector<T7__>,
                              std::is_integral<stan::value_type_t<T7__>>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_std_vector<T9__>,
                              std::is_integral<stan::value_type_t<T9__>>,
                              stan::is_std_vector<T10__>,
                              std::is_integral<stan::value_type_t<T10__>>,
                              std::is_integral<T11__>,
                              std::is_integral<T12__>,
                              std::is_integral<T13__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T6__>,
                stan::base_type_t<T8__>>,-1,1>
get_delay_rev_pmf(const T0__& delay_id, const T1__& len, const T2__&
                  delay_types_p, const T3__& delay_types_id, const T4__&
                  delay_types_groups, const T5__& delay_max, const T6__&
                  delay_np_pmf_arg__, const T7__& delay_np_pmf_groups,
                  const T8__& delay_params_arg__, const T9__&
                  delay_params_groups, const T10__& delay_dist, const T11__&
                  left_truncate, const T12__& reverse_pmf, const T13__&
                  cumulative, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>>* = nullptr>
void
delays_lp(const T0__& delay_params_arg__, const T1__&
          delay_params_mean_arg__, const T2__& delay_params_sd_arg__,
          const T3__& delay_params_groups, const T4__& delay_dist,
          const T5__& weight, T_lp__& lp__, T_lp_accum__& lp_accum__,
          std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
normal_lb_rng(const T0__& mu_arg__, const T1__& sigma_arg__, const T2__&
              lb_arg__, RNG& base_rng__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              std::is_integral<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__>,-1,1>
diagSPD_EQ(const T0__& alpha, const T1__& rho, const T2__& L, const T3__& M,
           std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              std::is_integral<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>,-1,1>
diagSPD_Matern(const T0__& nu, const T1__& alpha, const T2__& rho,
               const T3__& L, const T4__& M, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>
diagSPD_Periodic(const T0__& alpha, const T1__& rho, const T2__& M,
                 std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__, stan::base_type_t<T3__>>,-1,-1>
PHI(const T0__& N, const T1__& M, const T2__& L, const T3__& x_arg__,
    std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__, stan::base_type_t<T3__>>,-1,-1>
PHI_periodic(const T0__& N, const T1__& M, const T2__& w0, const T3__&
             x_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>, std::is_integral<T3__>,
                              std::is_integral<T4__>, std::is_integral<T5__>,
                              std::is_integral<T6__>>* = nullptr>
int
setup_noise(const T0__& ot_h, const T1__& t, const T2__& horizon, const T3__&
            estimate_r, const T4__& stationary, const T5__& future_fixed,
            const T6__& fixed_from, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              std::is_integral<T2__>, std::is_integral<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, T4__>,-1,-1>
setup_gp(const T0__& M, const T1__& L, const T2__& dimension, const T3__&
         is_periodic, const T4__& w0, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              std::is_integral<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__, T3__,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::promote_args_t<T7__>>,-1,1>
update_gp(const T0__& PHI_arg__, const T1__& M, const T2__& L, const T3__&
          alpha, const T4__& rho, const T5__& eta_arg__, const T6__& type,
          const T7__& nu, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>* = nullptr>
void
lengthscale_lp(const T0__& rho, const T1__& ls_meanlog, const T2__& ls_sdlog,
               const T3__& ls_min, const T4__& ls_max, T_lp__& lp__,
               T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>>* = nullptr>
void
gaussian_process_lp(const T0__& alpha, const T1__& eta_arg__, const T2__&
                    alpha_mean, const T3__& alpha_sd, T_lp__& lp__,
                    T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              std::is_integral<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T4__>>,-1,1>
update_Rt(const T0__& t, const T1__& log_R, const T2__& noise_arg__,
          const T3__& bps, const T4__& bp_effects_arg__, const T5__&
          stationary, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__, typename T10__,
          typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              std::is_integral<T5__>, std::is_integral<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              stan::math::disjunction<stan::is_autodiff<T8__>,
                                                      std::is_floating_point<T8__>>,
                              stan::math::disjunction<stan::is_autodiff<T9__>,
                                                      std::is_floating_point<T9__>>,
                              stan::math::disjunction<stan::is_autodiff<T10__>,
                                                      std::is_floating_point<T10__>>>* = nullptr>
void
rt_lp(const T0__& log_R_arg__, const T1__& initial_infections, const T2__&
      initial_growth, const T3__& bp_effects_arg__, const T4__& bp_sd,
      const T5__& bp_n, const T6__& seeding_time, const T7__& r_logmean,
      const T8__& r_logsd, const T9__& prior_infections, const T10__&
      prior_growth, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream*
      pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>, std::is_integral<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>>
update_infectiousness(const T0__& infections_arg__, const T1__&
                      gt_rev_pmf_arg__, const T2__& seeding_time, const T3__&
                      index, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              std::is_integral<T5__>, std::is_integral<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
generate_infections(const T0__& oR_arg__, const T1__& uot, const T2__&
                    gt_rev_pmf_arg__, const T3__& initial_infections,
                    const T4__& initial_growth, const T5__& pop, const T6__&
                    ht, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>, std::is_integral<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
deconvolve_infections(const T0__& shifted_cases_arg__, const T1__&
                      noise_arg__, const T2__& fixed, const T3__& prior,
                      std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
day_of_week_effect(const T0__& reports_arg__, const T1__& day_of_week,
                   const T2__& effect_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs, std::ostream*
          pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
truncate_obs(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
             const T2__& reconstruct, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T0__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T0__>>>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              stan::is_std_vector<T5__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T5__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T5__>>>>* = nullptr>
void
truncation_lp(const T0__& truncation_mean, const T1__& truncation_sd,
              const T2__& trunc_mean_mean, const T3__& trunc_mean_sd,
              const T4__& trunc_sd_mean, const T5__& trunc_sd_sd, T_lp__&
              lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>,
                              stan::math::disjunction<stan::is_autodiff<T5__>,
                                                      std::is_floating_point<T5__>>,
                              std::is_integral<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              std::is_integral<T8__>>* = nullptr>
void
report_lp(const T0__& cases, const T1__& cases_time, const T2__&
          reports_arg__, const T3__& rep_phi, const T4__& phi_mean,
          const T5__& phi_sd, const T6__& model_type, const T7__& weight,
          const T8__& accumulate, T_lp__& lp__, T_lp_accum__& lp_accum__,
          std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              std::is_integral<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T4__>,-1,1>
report_log_lik(const T0__& cases, const T1__& reports_arg__, const T2__&
               rep_phi, const T3__& model_type, const T4__& weight,
               std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              std::is_integral<T2__>>* = nullptr>
std::vector<int>
report_rng(const T0__& reports_arg__, const T1__& rep_phi, const T2__&
           model_type, RNG& base_rng__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              std::is_integral<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
calculate_Rt(const T0__& infections_arg__, const T1__& seeding_time,
             const T2__& gt_rev_pmf_arg__, const T3__& smooth, std::ostream*
             pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
calculate_growth(const T0__& infections_arg__, const T1__& seeding_time,
                 std::ostream* pstream__);
// array[] int calc_conv_indices_xlen(int, int, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>>*>
std::vector<int>
calc_conv_indices_xlen(const T0__& s, const T1__& xlen, const T2__& ylen,
                       std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int s_minus_ylen = std::numeric_limits<int>::min();
    current_statement__ = 98;
    s_minus_ylen = (s - ylen);
    int start_x = std::numeric_limits<int>::min();
    current_statement__ = 99;
    start_x = stan::math::max(1, (s_minus_ylen + 1));
    int end_x = std::numeric_limits<int>::min();
    current_statement__ = 100;
    end_x = s;
    int start_y = std::numeric_limits<int>::min();
    current_statement__ = 101;
    start_y = stan::math::max(1, (1 - s_minus_ylen));
    int end_y = std::numeric_limits<int>::min();
    current_statement__ = 102;
    end_y = ylen;
    current_statement__ = 103;
    return std::vector<int>{start_x, end_x, start_y, end_y};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// array[] int calc_conv_indices_len(int, int, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>>*>
std::vector<int>
calc_conv_indices_len(const T0__& s, const T1__& xlen, const T2__& ylen,
                      std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int s_minus_ylen = std::numeric_limits<int>::min();
    current_statement__ = 105;
    s_minus_ylen = (s - ylen);
    int start_x = std::numeric_limits<int>::min();
    current_statement__ = 106;
    start_x = stan::math::max(1, (s_minus_ylen + 1));
    int end_x = std::numeric_limits<int>::min();
    current_statement__ = 107;
    end_x = xlen;
    int start_y = std::numeric_limits<int>::min();
    current_statement__ = 108;
    start_y = stan::math::max(1, (1 - s_minus_ylen));
    int end_y = std::numeric_limits<int>::min();
    current_statement__ = 110;
    end_y = ((ylen + xlen) - s);
    current_statement__ = 111;
    return std::vector<int>{start_x, end_x, start_y, end_y};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector convolve_with_rev_pmf(vector, vector, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_with_rev_pmf(const T0__& x_arg__, const T1__& y_arg__, const T2__&
                      len, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  const auto& y = stan::math::to_ref(y_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int xlen = std::numeric_limits<int>::min();
    current_statement__ = 113;
    xlen = stan::math::num_elements(x);
    int ylen = std::numeric_limits<int>::min();
    current_statement__ = 114;
    ylen = stan::math::num_elements(y);
    current_statement__ = 115;
    stan::math::validate_non_negative_index("z", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> z =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 119;
    if (stan::math::logical_lt(((xlen + ylen) - 1), len)) {
      current_statement__ = 117;
      {
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "convolve_with_rev_pmf: len is longer than x and y convolved");
        throw std::domain_error(errmsg_stream__.str());
      }
    }
    current_statement__ = 122;
    if (stan::math::logical_gt(xlen, len)) {
      current_statement__ = 120;
      {
        std::stringstream errmsg_stream__;
        stan::math::stan_print(&errmsg_stream__,
          "convolve_with_rev_pmf: len is shorter than x");
        throw std::domain_error(errmsg_stream__.str());
      }
    }
    current_statement__ = 126;
    for (int s = 1; s <= xlen; ++s) {
      std::vector<int> indices =
        std::vector<int>(4, std::numeric_limits<int>::min());
      current_statement__ = 123;
      stan::model::assign(indices,
        calc_conv_indices_xlen(s, xlen, ylen, pstream__),
        "assigning variable indices");
      current_statement__ = 124;
      stan::model::assign(z,
        stan::math::dot_product(
          stan::model::rvalue(x, "x",
            stan::model::index_min_max(
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(1)),
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(2)))),
          stan::model::rvalue(y, "y",
            stan::model::index_min_max(
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(3)),
              stan::model::rvalue(indices, "indices",
                stan::model::index_uni(4))))), "assigning variable z",
        stan::model::index_uni(s));
    }
    current_statement__ = 132;
    if (stan::math::logical_gt(len, xlen)) {
      current_statement__ = 130;
      for (int s = (xlen + 1); s <= len; ++s) {
        std::vector<int> indices =
          std::vector<int>(4, std::numeric_limits<int>::min());
        current_statement__ = 127;
        stan::model::assign(indices,
          calc_conv_indices_len(s, xlen, ylen, pstream__),
          "assigning variable indices");
        current_statement__ = 128;
        stan::model::assign(z,
          stan::math::dot_product(
            stan::model::rvalue(x, "x",
              stan::model::index_min_max(
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(1)),
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(2)))),
            stan::model::rvalue(y, "y",
              stan::model::index_min_max(
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(3)),
                stan::model::rvalue(indices, "indices",
                  stan::model::index_uni(4))))), "assigning variable z",
          stan::model::index_uni(s));
      }
    }
    current_statement__ = 133;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector convolve_to_report(vector, vector, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
convolve_to_report(const T0__& infections_arg__, const T1__&
                   delay_rev_pmf_arg__, const T2__& seeding_time,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& infections = stan::math::to_ref(infections_arg__);
  const auto& delay_rev_pmf = stan::math::to_ref(delay_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 135;
    t = stan::math::num_elements(infections);
    int delays = std::numeric_limits<int>::min();
    current_statement__ = 136;
    delays = stan::math::num_elements(delay_rev_pmf);
    current_statement__ = 139;
    if (stan::math::logical_eq(delays, 0)) {
      current_statement__ = 137;
      return stan::model::rvalue(infections, "infections",
               stan::model::index_min_max((seeding_time + 1), t));
    }
    current_statement__ = 140;
    stan::math::validate_non_negative_index("unobs_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> unobs_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 141;
    stan::model::assign(unobs_reports,
      convolve_with_rev_pmf(infections, delay_rev_pmf, t, pstream__),
      "assigning variable unobs_reports");
    current_statement__ = 142;
    return stan::model::rvalue(unobs_reports, "unobs_reports",
             stan::model::index_min_max((seeding_time + 1), t));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector discretised_pmf(vector, int, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>, std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
discretised_pmf(const T0__& params_arg__, const T1__& n, const T2__& dist,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& params = stan::math::to_ref(params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 144;
    stan::math::validate_non_negative_index("lpmf", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> lpmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 146;
    stan::math::validate_non_negative_index("upper_lcdf", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> upper_lcdf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 159;
    if (stan::math::logical_eq(dist, 0)) {
      current_statement__ = 157;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 155;
        stan::model::assign(upper_lcdf,
          stan::math::lognormal_lcdf(i,
            stan::model::rvalue(params, "params", stan::model::index_uni(1)),
            stan::model::rvalue(params, "params", stan::model::index_uni(2))),
          "assigning variable upper_lcdf", stan::model::index_uni(i));
      }
    } else {
      current_statement__ = 154;
      if (stan::math::logical_eq(dist, 1)) {
        current_statement__ = 152;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 150;
          stan::model::assign(upper_lcdf,
            stan::math::gamma_lcdf(i,
              stan::model::rvalue(params, "params", stan::model::index_uni(1)),
              stan::model::rvalue(params, "params", stan::model::index_uni(2))),
            "assigning variable upper_lcdf", stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 148;
        {
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__,
            "Unknown distribution function provided.");
          throw std::domain_error(errmsg_stream__.str());
        }
      }
    }
    current_statement__ = 169;
    if (stan::math::logical_gt(n, 1)) {
      current_statement__ = 162;
      stan::model::assign(lpmf,
        stan::model::rvalue(upper_lcdf, "upper_lcdf",
          stan::model::index_uni(1)), "assigning variable lpmf",
        stan::model::index_uni(1));
      current_statement__ = 163;
      stan::model::assign(lpmf,
        stan::model::rvalue(upper_lcdf, "upper_lcdf",
          stan::model::index_uni(2)), "assigning variable lpmf",
        stan::model::index_uni(2));
      current_statement__ = 166;
      if (stan::math::logical_gt(n, 2)) {
        current_statement__ = 164;
        stan::model::assign(lpmf,
          stan::math::log_diff_exp(
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max(3, n)),
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max(1, (n - 2)))),
          "assigning variable lpmf", stan::model::index_min_max(3, n));
      }
      current_statement__ = 167;
      stan::model::assign(lpmf,
        stan::math::subtract(stan::model::deep_copy(lpmf),
          stan::math::log_sum_exp(
            stan::model::rvalue(upper_lcdf, "upper_lcdf",
              stan::model::index_min_max((n - 1), n)))),
        "assigning variable lpmf");
    } else {
      current_statement__ = 160;
      stan::model::assign(lpmf, 0, "assigning variable lpmf",
        stan::model::index_uni(1));
    }
    current_statement__ = 170;
    return stan::math::exp(lpmf);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* array[] int
   get_delay_type_max(int, array[] int, array[] int, array[] int, array[]
  int,
                      array[] int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<stan::value_type_t<T2__>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>>*>
std::vector<int>
get_delay_type_max(const T0__& delay_types, const T1__& delay_types_p,
                   const T2__& delay_types_id, const T3__&
                   delay_types_groups, const T4__& delay_max, const T5__&
                   delay_np_pmf_groups, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 172;
    stan::math::validate_non_negative_index("ret", "delay_types", delay_types);
    std::vector<int> ret =
      std::vector<int>(delay_types, std::numeric_limits<int>::min());
    current_statement__ = 183;
    for (int i = 1; i <= delay_types; ++i) {
      current_statement__ = 174;
      stan::model::assign(ret, 0, "assigning variable ret",
        stan::model::index_uni(i));
      current_statement__ = 181;
      for (int j =
             stan::model::rvalue(delay_types_groups, "delay_types_groups",
               stan::model::index_uni(i)); j <=
           (stan::model::rvalue(delay_types_groups, "delay_types_groups",
              stan::model::index_uni((i + 1))) - 1); ++j) {
        current_statement__ = 179;
        if (stan::model::rvalue(delay_types_p, "delay_types_p",
              stan::model::index_uni(j))) {
          current_statement__ = 177;
          stan::model::assign(ret,
            (stan::model::rvalue(ret, "ret", stan::model::index_uni(i)) +
            stan::model::rvalue(delay_max, "delay_max",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(j))))), "assigning variable ret",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 175;
          stan::model::assign(ret,
            (stan::model::rvalue(ret, "ret", stan::model::index_uni(i)) +
            ((stan::model::rvalue(delay_np_pmf_groups, "delay_np_pmf_groups",
                stan::model::index_uni(
                  (stan::model::rvalue(delay_types_id, "delay_types_id",
                     stan::model::index_uni(j)) + 1))) -
            stan::model::rvalue(delay_np_pmf_groups, "delay_np_pmf_groups",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(j))))) - 1)),
            "assigning variable ret", stan::model::index_uni(i));
        }
      }
    }
    current_statement__ = 184;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* vector
   get_delay_rev_pmf(int, int, array[] int, array[] int, array[] int,
                     array[] int, vector, array[] int, vector, array[] int,
                     array[] int, int, int, int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::is_std_vector<T2__>,
                              std::is_integral<stan::value_type_t<T2__>>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_std_vector<T7__>,
                              std::is_integral<stan::value_type_t<T7__>>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_std_vector<T9__>,
                              std::is_integral<stan::value_type_t<T9__>>,
                              stan::is_std_vector<T10__>,
                              std::is_integral<stan::value_type_t<T10__>>,
                              std::is_integral<T11__>,
                              std::is_integral<T12__>,
                              std::is_integral<T13__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T6__>,
                stan::base_type_t<T8__>>,-1,1>
get_delay_rev_pmf(const T0__& delay_id, const T1__& len, const T2__&
                  delay_types_p, const T3__& delay_types_id, const T4__&
                  delay_types_groups, const T5__& delay_max, const T6__&
                  delay_np_pmf_arg__, const T7__& delay_np_pmf_groups,
                  const T8__& delay_params_arg__, const T9__&
                  delay_params_groups, const T10__& delay_dist, const T11__&
                  left_truncate, const T12__& reverse_pmf, const T13__&
                  cumulative, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T6__>,
                             stan::base_type_t<T8__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& delay_np_pmf = stan::math::to_ref(delay_np_pmf_arg__);
  const auto& delay_params = stan::math::to_ref(delay_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 186;
    stan::math::validate_non_negative_index("pmf", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> pmf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 187;
    stan::model::assign(pmf, stan::math::rep_vector(0, len),
      "assigning variable pmf");
    int current_len = std::numeric_limits<int>::min();
    current_statement__ = 188;
    current_len = 1;
    int new_len = std::numeric_limits<int>::min();
    current_statement__ = 213;
    for (int i =
           stan::model::rvalue(delay_types_groups, "delay_types_groups",
             stan::model::index_uni(delay_id)); i <=
         (stan::model::rvalue(delay_types_groups, "delay_types_groups",
            stan::model::index_uni((delay_id + 1))) - 1); ++i) {
      current_statement__ = 210;
      if (stan::model::rvalue(delay_types_p, "delay_types_p",
            stan::model::index_uni(i))) {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 199;
        start = stan::model::rvalue(delay_params_groups,
                  "delay_params_groups",
                  stan::model::index_uni(
                    stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i))));
        int end = std::numeric_limits<int>::min();
        current_statement__ = 200;
        end = (stan::model::rvalue(delay_params_groups,
                 "delay_params_groups",
                 stan::model::index_uni(
                   (stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i)) + 1)))
          - 1);
        current_statement__ = 201;
        stan::math::validate_non_negative_index("new_variable_pmf",
          "delay_max[delay_types_id[i]] + 1",
          (stan::model::rvalue(delay_max, "delay_max",
             stan::model::index_uni(
               stan::model::rvalue(delay_types_id, "delay_types_id",
                 stan::model::index_uni(i)))) + 1));
        Eigen::Matrix<local_scalar_t__,-1,1> new_variable_pmf =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::model::rvalue(
                                                            delay_max,
                                                            "delay_max",
                                                            stan::model::index_uni(
                                                              stan::model::rvalue(
                                                                delay_types_id,
                                                                "delay_types_id",
                                                                stan::model::index_uni(
                                                                  i)))) + 1),
            DUMMY_VAR__);
        current_statement__ = 202;
        stan::model::assign(new_variable_pmf,
          discretised_pmf(
            stan::model::rvalue(delay_params, "delay_params",
              stan::model::index_min_max(start, end)),
            (stan::model::rvalue(delay_max, "delay_max",
               stan::model::index_uni(
                 stan::model::rvalue(delay_types_id, "delay_types_id",
                   stan::model::index_uni(i)))) + 1),
            stan::model::rvalue(delay_dist, "delay_dist",
              stan::model::index_uni(
                stan::model::rvalue(delay_types_id, "delay_types_id",
                  stan::model::index_uni(i)))), pstream__),
          "assigning variable new_variable_pmf");
        current_statement__ = 203;
        new_len = (current_len +
          stan::model::rvalue(delay_max, "delay_max",
            stan::model::index_uni(
              stan::model::rvalue(delay_types_id, "delay_types_id",
                stan::model::index_uni(i)))));
        current_statement__ = 208;
        if (stan::math::logical_eq(current_len, 1)) {
          current_statement__ = 206;
          stan::model::assign(pmf, new_variable_pmf,
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        } else {
          current_statement__ = 204;
          stan::model::assign(pmf,
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                stan::model::rvalue(pmf, "pmf",
                  stan::model::index_min_max(1, current_len))),
              stan::math::reverse(new_variable_pmf), new_len, pstream__),
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        }
      } else {
        int start = std::numeric_limits<int>::min();
        current_statement__ = 190;
        start = stan::model::rvalue(delay_np_pmf_groups,
                  "delay_np_pmf_groups",
                  stan::model::index_uni(
                    stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i))));
        int end = std::numeric_limits<int>::min();
        current_statement__ = 191;
        end = (stan::model::rvalue(delay_np_pmf_groups,
                 "delay_np_pmf_groups",
                 stan::model::index_uni(
                   (stan::model::rvalue(delay_types_id, "delay_types_id",
                      stan::model::index_uni(i)) + 1)))
          - 1);
        current_statement__ = 192;
        new_len = ((current_len + end) - start);
        current_statement__ = 197;
        if (stan::math::logical_eq(current_len, 1)) {
          current_statement__ = 195;
          stan::model::assign(pmf,
            stan::model::rvalue(delay_np_pmf, "delay_np_pmf",
              stan::model::index_min_max(start, end)),
            "assigning variable pmf", stan::model::index_min_max(1, new_len));
        } else {
          current_statement__ = 193;
          stan::model::assign(pmf,
            convolve_with_rev_pmf(
              stan::model::deep_copy(
                stan::model::rvalue(pmf, "pmf",
                  stan::model::index_min_max(1, current_len))),
              stan::math::reverse(
                stan::model::rvalue(delay_np_pmf, "delay_np_pmf",
                  stan::model::index_min_max(start, end))), new_len,
              pstream__), "assigning variable pmf",
            stan::model::index_min_max(1, new_len));
        }
      }
      current_statement__ = 211;
      current_len = new_len;
    }
    current_statement__ = 216;
    if (left_truncate) {
      current_statement__ = 214;
      stan::model::assign(pmf,
        stan::math::append_row(stan::math::rep_vector(0, left_truncate),
          stan::math::divide(
            stan::model::deep_copy(
              stan::model::rvalue(pmf, "pmf",
                stan::model::index_min_max((left_truncate + 1), len))),
            stan::math::sum(
              stan::model::rvalue(pmf, "pmf",
                stan::model::index_min_max((left_truncate + 1), len))))),
        "assigning variable pmf");
    }
    current_statement__ = 219;
    if (cumulative) {
      current_statement__ = 217;
      stan::model::assign(pmf,
        stan::math::cumulative_sum(stan::model::deep_copy(pmf)),
        "assigning variable pmf");
    }
    current_statement__ = 222;
    if (reverse_pmf) {
      current_statement__ = 220;
      stan::model::assign(pmf,
        stan::math::reverse(stan::model::deep_copy(pmf)),
        "assigning variable pmf");
    }
    current_statement__ = 223;
    return pmf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// void delays_lp(vector, vector, vector, array[] int, array[] int, array[] int)
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_std_vector<T4__>,
                              std::is_integral<stan::value_type_t<T4__>>,
                              stan::is_std_vector<T5__>,
                              std::is_integral<stan::value_type_t<T5__>>>*>
void
delays_lp(const T0__& delay_params_arg__, const T1__&
          delay_params_mean_arg__, const T2__& delay_params_sd_arg__,
          const T3__& delay_params_groups, const T4__& delay_dist,
          const T5__& weight, T_lp__& lp__, T_lp_accum__& lp_accum__,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& delay_params = stan::math::to_ref(delay_params_arg__);
  const auto& delay_params_mean = stan::math::to_ref(delay_params_mean_arg__);
  const auto& delay_params_sd = stan::math::to_ref(delay_params_sd_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_delays = std::numeric_limits<int>::min();
    current_statement__ = 225;
    n_delays = (stan::math::num_elements(delay_params_groups) - 1);
    current_statement__ = 228;
    if (stan::math::logical_eq(n_delays, 0)) {
      current_statement__ = 226;
      return ;
    }
    current_statement__ = 241;
    for (int d = 1; d <= n_delays; ++d) {
      int start = std::numeric_limits<int>::min();
      current_statement__ = 229;
      start = stan::model::rvalue(delay_params_groups, "delay_params_groups",
                stan::model::index_uni(d));
      int end = std::numeric_limits<int>::min();
      current_statement__ = 230;
      end = (stan::model::rvalue(delay_params_groups, "delay_params_groups",
               stan::model::index_uni((d + 1)))
        - 1);
      current_statement__ = 239;
      for (int s = start; s <= end; ++s) {
        current_statement__ = 237;
        if (stan::math::logical_gt(
              stan::model::rvalue(delay_params_sd, "delay_params_sd",
                stan::model::index_uni(s)), 0)) {
          current_statement__ = 235;
          if (stan::math::logical_gt(
                stan::model::rvalue(weight, "weight",
                  stan::model::index_uni(d)), 1)) {
            current_statement__ = 233;
            lp_accum__.add((stan::model::rvalue(weight, "weight",
                              stan::model::index_uni(d)) *
              stan::math::normal_lpdf<false>(
                stan::model::rvalue(delay_params, "delay_params",
                  stan::model::index_uni(s)),
                stan::model::rvalue(delay_params_mean, "delay_params_mean",
                  stan::model::index_uni(s)),
                stan::model::rvalue(delay_params_sd, "delay_params_sd",
                  stan::model::index_uni(s)))));
          } else {
            current_statement__ = 231;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(delay_params,
                               "delay_params", stan::model::index_uni(s)),
                             stan::model::rvalue(delay_params_mean,
                               "delay_params_mean", stan::model::index_uni(s)),
                             stan::model::rvalue(delay_params_sd,
                               "delay_params_sd", stan::model::index_uni(s))));
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector normal_lb_rng(vector, vector, vector)
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
normal_lb_rng(const T0__& mu_arg__, const T1__& sigma_arg__, const T2__&
              lb_arg__, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& lb = stan::math::to_ref(lb_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int len = std::numeric_limits<int>::min();
    current_statement__ = 243;
    len = stan::math::num_elements(mu);
    current_statement__ = 244;
    stan::math::validate_non_negative_index("ret", "len", len);
    Eigen::Matrix<local_scalar_t__,-1,1> ret =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(len, DUMMY_VAR__);
    current_statement__ = 250;
    for (int i = 1; i <= len; ++i) {
      local_scalar_t__ p = DUMMY_VAR__;
      current_statement__ = 246;
      p = stan::math::normal_cdf(
            stan::model::rvalue(lb, "lb", stan::model::index_uni(i)),
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
            stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)));
      local_scalar_t__ u = DUMMY_VAR__;
      current_statement__ = 247;
      u = stan::math::uniform_rng(p, 1, base_rng__);
      current_statement__ = 248;
      stan::model::assign(ret,
        ((stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)) *
        stan::math::inv_Phi(u)) +
        stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
        "assigning variable ret", stan::model::index_uni(i));
    }
    current_statement__ = 251;
    return ret;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector diagSPD_EQ(real, real, real, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              std::is_integral<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__>,-1,1>
diagSPD_EQ(const T0__& alpha, const T1__& rho, const T2__& L, const T3__& M,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 253;
    stan::math::validate_non_negative_index("indices", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,1> indices =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
    current_statement__ = 254;
    stan::model::assign(indices, stan::math::linspaced_vector(M, 1, M),
      "assigning variable indices");
    local_scalar_t__ factor = DUMMY_VAR__;
    current_statement__ = 255;
    factor = (alpha *
      stan::math::sqrt((stan::math::sqrt((2 * stan::math::pi())) * rho)));
    local_scalar_t__ exponent = DUMMY_VAR__;
    current_statement__ = 256;
    exponent = (-(0.25) *
      stan::math::pow((((rho * stan::math::pi()) / 2) / L), 2));
    current_statement__ = 257;
    return stan::math::multiply(factor,
             stan::math::exp(
               stan::math::multiply(exponent, stan::math::square(indices))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector diagSPD_Matern(real, real, real, real, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              std::is_integral<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>,-1,1>
diagSPD_Matern(const T0__& nu, const T1__& alpha, const T2__& rho,
               const T3__& L, const T4__& M, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 259;
    stan::math::validate_non_negative_index("indices", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,1> indices =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
    current_statement__ = 260;
    stan::model::assign(indices, stan::math::linspaced_vector(M, 1, M),
      "assigning variable indices");
    local_scalar_t__ factor = DUMMY_VAR__;
    current_statement__ = 261;
    factor = ((2 * alpha) *
      stan::math::pow((stan::math::sqrt((2 * nu)) / rho), nu));
    current_statement__ = 262;
    stan::math::validate_non_negative_index("denom", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,1> denom =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
    current_statement__ = 263;
    stan::model::assign(denom,
      stan::math::add(stan::math::pow((stan::math::sqrt((2 * nu)) / rho), 2),
        stan::math::pow(
          stan::math::multiply(((stan::math::pi() / 2) / L), indices), (nu +
          0.5))), "assigning variable denom");
    current_statement__ = 264;
    return stan::math::multiply(factor, stan::math::inv(denom));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector diagSPD_Periodic(real, real, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>
diagSPD_Periodic(const T0__& alpha, const T1__& rho, const T2__& M,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ a = DUMMY_VAR__;
    current_statement__ = 266;
    a = stan::math::inv_square(rho);
    current_statement__ = 267;
    stan::math::validate_non_negative_index("indices", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,1> indices =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
    current_statement__ = 268;
    stan::model::assign(indices, stan::math::linspaced_vector(M, 1, M),
      "assigning variable indices");
    current_statement__ = 269;
    stan::math::validate_non_negative_index("q", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,1> q =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
    current_statement__ = 270;
    stan::model::assign(q,
      stan::math::exp(
        stan::math::add(stan::math::log(alpha),
          stan::math::multiply(0.5,
            stan::math::add((stan::math::log(2) - a),
              stan::math::to_vector(
                stan::math::log_modified_bessel_first_kind(indices, a)))))),
      "assigning variable q");
    current_statement__ = 271;
    return stan::math::append_row(q, q);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix PHI(int, int, real, vector)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T2__, stan::base_type_t<T3__>>,-1,-1>
PHI(const T0__& N, const T1__& M, const T2__& L, const T3__& x_arg__,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 273;
    stan::math::validate_non_negative_index("phi", "N", N);
    current_statement__ = 274;
    stan::math::validate_non_negative_index("phi", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,-1> phi =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, M, DUMMY_VAR__);
    current_statement__ = 275;
    stan::model::assign(phi,
      stan::math::divide(
        stan::math::sin(
          stan::math::diag_post_multiply(
            stan::math::rep_matrix(
              stan::math::multiply((stan::math::pi() / (2 * L)),
                stan::math::add(x, L)), M),
            stan::math::linspaced_vector(M, 1, M))), stan::math::sqrt(L)),
      "assigning variable phi");
    current_statement__ = 276;
    return phi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix PHI_periodic(int, int, real, vector)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T2__, stan::base_type_t<T3__>>,-1,-1>
PHI_periodic(const T0__& N, const T1__& M, const T2__& w0, const T3__&
             x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 278;
    stan::math::validate_non_negative_index("mw0x", "N", N);
    current_statement__ = 279;
    stan::math::validate_non_negative_index("mw0x", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,-1> mw0x =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, M, DUMMY_VAR__);
    current_statement__ = 280;
    stan::model::assign(mw0x,
      stan::math::diag_post_multiply(
        stan::math::rep_matrix(stan::math::multiply(w0, x), M),
        stan::math::linspaced_vector(M, 1, M)), "assigning variable mw0x");
    current_statement__ = 281;
    return stan::math::append_col(stan::math::cos(mw0x),
             stan::math::sin(mw0x));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// int setup_noise(int, int, int, int, int, int, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>, std::is_integral<T3__>,
                              std::is_integral<T4__>, std::is_integral<T5__>,
                              std::is_integral<T6__>>*>
int
setup_noise(const T0__& ot_h, const T1__& t, const T2__& horizon, const T3__&
            estimate_r, const T4__& stationary, const T5__& future_fixed,
            const T6__& fixed_from, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int noise_time = std::numeric_limits<int>::min();
    current_statement__ = 283;
    noise_time = (stan::math::logical_gt(estimate_r, 0) ? (stan::math::logical_gt(
                                                             stationary, 0) ? ot_h : (ot_h
      - 1)) : t);
    int noise_terms = std::numeric_limits<int>::min();
    current_statement__ = 284;
    noise_terms = (stan::math::logical_gt(future_fixed, 0) ? ((noise_time -
      horizon) + fixed_from) : noise_time);
    current_statement__ = 285;
    return noise_terms;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix setup_gp(int, real, int, int, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              std::is_integral<T2__>, std::is_integral<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>*>
Eigen::Matrix<stan::promote_args_t<T1__, T4__>,-1,-1>
setup_gp(const T0__& M, const T1__& L, const T2__& dimension, const T3__&
         is_periodic, const T4__& w0, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T4__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 287;
    stan::math::validate_non_negative_index("x", "dimension", dimension);
    Eigen::Matrix<local_scalar_t__,-1,1> x =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(dimension, DUMMY_VAR__);
    current_statement__ = 288;
    stan::model::assign(x,
      stan::math::linspaced_vector(dimension, 1, dimension),
      "assigning variable x");
    current_statement__ = 289;
    stan::model::assign(x,
      stan::math::divide(
        stan::math::subtract(stan::model::deep_copy(x), stan::math::mean(x)),
        stan::math::sd(x)), "assigning variable x");
    current_statement__ = 294;
    if (is_periodic) {
      current_statement__ = 292;
      return PHI_periodic(dimension, M, w0, x, pstream__);
    } else {
      current_statement__ = 290;
      return PHI(dimension, M, L, x, pstream__);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector update_gp(matrix, int, real, real, array[] real, vector, int, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              std::is_integral<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__, T3__,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::promote_args_t<T7__>>,-1,1>
update_gp(const T0__& PHI_arg__, const T1__& M, const T2__& L, const T3__&
          alpha, const T4__& rho, const T5__& eta_arg__, const T6__& type,
          const T7__& nu, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__, T3__, stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::promote_args_t<T7__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& PHI = stan::math::to_ref(PHI_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 296;
    stan::math::validate_non_negative_index("diagSPD",
      "type == 1 ? 2 * M : M", (stan::math::logical_eq(type, 1) ? (2 *
      M) : M));
    Eigen::Matrix<local_scalar_t__,-1,1> diagSPD =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::logical_eq(
                                                        type, 1) ? (2 *
        M) : M), DUMMY_VAR__);
    current_statement__ = 306;
    if (stan::math::logical_eq(type, 0)) {
      current_statement__ = 304;
      stan::model::assign(diagSPD,
        diagSPD_EQ(alpha,
          stan::model::rvalue(rho, "rho", stan::model::index_uni(1)), L, M,
          pstream__), "assigning variable diagSPD");
    } else {
      current_statement__ = 303;
      if (stan::math::logical_eq(type, 1)) {
        current_statement__ = 301;
        stan::model::assign(diagSPD,
          diagSPD_Periodic(alpha,
            stan::model::rvalue(rho, "rho", stan::model::index_uni(1)), M,
            pstream__), "assigning variable diagSPD");
      } else {
        current_statement__ = 300;
        if (stan::math::logical_eq(type, 2)) {
          current_statement__ = 298;
          stan::model::assign(diagSPD,
            diagSPD_Matern(nu, alpha,
              stan::model::rvalue(rho, "rho", stan::model::index_uni(1)), L,
              M, pstream__), "assigning variable diagSPD");
        }
      }
    }
    current_statement__ = 307;
    return stan::math::multiply(PHI, stan::math::elt_multiply(diagSPD, eta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// void lengthscale_lp(real, real, real, real, real)
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>*>
void
lengthscale_lp(const T0__& rho, const T1__& ls_meanlog, const T2__& ls_sdlog,
               const T3__& ls_min, const T4__& ls_max, T_lp__& lp__,
               T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 317;
    if (stan::math::logical_gt(ls_sdlog, 0)) {
      current_statement__ = 313;
      lp_accum__.add(stan::math::lognormal_lpdf<propto__>(rho, ls_meanlog,
                       ls_sdlog));
      current_statement__ = 315;
      if (stan::math::logical_lt(rho, ls_min)) {
        current_statement__ = 315;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 314;
        if (stan::math::logical_gt(rho, ls_max)) {
          current_statement__ = 314;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 314;
          lp_accum__.add(-(stan::math::log_diff_exp(
                             stan::math::lognormal_lcdf(ls_max, ls_meanlog,
                               ls_sdlog),
                             stan::math::lognormal_lcdf(ls_min, ls_meanlog,
                               ls_sdlog))));
        }
      }
    } else {
      current_statement__ = 309;
      lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(rho, 1.499007,
                       (0.057277 * ls_max)));
      current_statement__ = 311;
      if (stan::math::logical_lt(rho, ls_min)) {
        current_statement__ = 311;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 310;
        if (stan::math::logical_gt(rho, ls_max)) {
          current_statement__ = 310;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 310;
          lp_accum__.add(-(stan::math::log_diff_exp(
                             stan::math::inv_gamma_lcdf(ls_max, 1.499007,
                               (0.057277 * ls_max)),
                             stan::math::inv_gamma_lcdf(ls_min, 1.499007,
                               (0.057277 * ls_max)))));
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// void gaussian_process_lp(real, vector, real, real)
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              stan::math::disjunction<stan::is_autodiff<T3__>,
                                                      std::is_floating_point<T3__>>>*>
void
gaussian_process_lp(const T0__& alpha, const T1__& eta_arg__, const T2__&
                    alpha_mean, const T3__& alpha_sd, T_lp__& lp__,
                    T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>, T2__, T3__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& eta = stan::math::to_ref(eta_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 319;
    lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, alpha_mean,
                     alpha_sd));
    current_statement__ = 320;
    if (stan::math::logical_lt(alpha, 0)) {
      current_statement__ = 320;
      lp_accum__.add(stan::math::negative_infinity());
    } else {
      current_statement__ = 320;
      lp_accum__.add(-(stan::math::normal_lccdf(0, alpha_mean, alpha_sd)));
    }
    current_statement__ = 321;
    lp_accum__.add(stan::math::std_normal_lpdf<propto__>(eta));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector update_Rt(int, real, vector, array[] int, vector, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              std::is_integral<stan::value_type_t<T3__>>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              std::is_integral<T5__>>*>
Eigen::Matrix<stan::promote_args_t<T1__, stan::base_type_t<T2__>,
                stan::base_type_t<T4__>>,-1,1>
update_Rt(const T0__& t, const T1__& log_R, const T2__& noise_arg__,
          const T3__& bps, const T4__& bp_effects_arg__, const T5__&
          stationary, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& noise = stan::math::to_ref(noise_arg__);
  const auto& bp_effects = stan::math::to_ref(bp_effects_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int bp_n = std::numeric_limits<int>::min();
    current_statement__ = 323;
    bp_n = stan::math::num_elements(bp_effects);
    int gp_n = std::numeric_limits<int>::min();
    current_statement__ = 324;
    gp_n = stan::math::num_elements(noise);
    current_statement__ = 325;
    stan::math::validate_non_negative_index("R", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> R =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 326;
    stan::model::assign(R, stan::math::rep_vector(log_R, t),
      "assigning variable R");
    current_statement__ = 333;
    if (bp_n) {
      current_statement__ = 327;
      stan::math::validate_non_negative_index("bp0", "bp_n + 1", (bp_n + 1));
      Eigen::Matrix<local_scalar_t__,-1,1> bp0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant((bp_n + 1),
          DUMMY_VAR__);
      current_statement__ = 329;
      stan::model::assign(bp0, 0, "assigning variable bp0",
        stan::model::index_uni(1));
      current_statement__ = 330;
      stan::model::assign(bp0, stan::math::cumulative_sum(bp_effects),
        "assigning variable bp0", stan::model::index_min_max(2, (bp_n + 1)));
      current_statement__ = 331;
      stan::model::assign(R,
        stan::math::add(stan::model::deep_copy(R),
          stan::model::rvalue(bp0, "bp0", stan::model::index_multi(bps))),
        "assigning variable R");
    }
    current_statement__ = 347;
    if (gp_n) {
      current_statement__ = 334;
      stan::math::validate_non_negative_index("gp", "t", t);
      Eigen::Matrix<local_scalar_t__,-1,1> gp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
      current_statement__ = 335;
      stan::model::assign(gp, stan::math::rep_vector(0, t),
        "assigning variable gp");
      current_statement__ = 344;
      if (stationary) {
        current_statement__ = 339;
        stan::model::assign(gp, noise, "assigning variable gp",
          stan::model::index_min_max(1, gp_n));
        current_statement__ = 342;
        if (stan::math::logical_gt(t, gp_n)) {
          current_statement__ = 340;
          stan::model::assign(gp,
            stan::math::rep_vector(
              stan::model::rvalue(noise, "noise",
                stan::model::index_uni(gp_n)), (t - gp_n)),
            "assigning variable gp",
            stan::model::index_min_max((gp_n + 1), t));
        }
      } else {
        current_statement__ = 336;
        stan::model::assign(gp, noise, "assigning variable gp",
          stan::model::index_min_max(2, (gp_n + 1)));
        current_statement__ = 337;
        stan::model::assign(gp,
          stan::math::cumulative_sum(stan::model::deep_copy(gp)),
          "assigning variable gp");
      }
      current_statement__ = 345;
      stan::model::assign(R, stan::math::add(stan::model::deep_copy(R), gp),
        "assigning variable R");
    }
    current_statement__ = 348;
    return stan::math::exp(R);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* void
   rt_lp(vector, array[] real, array[] real, vector, array[] real, int, 
         int, real, real, real, real)
 */
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__, typename T10__,
          typename T_lp__, typename T_lp_accum__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              std::is_integral<T5__>, std::is_integral<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              stan::math::disjunction<stan::is_autodiff<T8__>,
                                                      std::is_floating_point<T8__>>,
                              stan::math::disjunction<stan::is_autodiff<T9__>,
                                                      std::is_floating_point<T9__>>,
                              stan::math::disjunction<stan::is_autodiff<T10__>,
                                                      std::is_floating_point<T10__>>>*>
void
rt_lp(const T0__& log_R_arg__, const T1__& initial_infections, const T2__&
      initial_growth, const T3__& bp_effects_arg__, const T4__& bp_sd,
      const T5__& bp_n, const T6__& seeding_time, const T7__& r_logmean,
      const T8__& r_logsd, const T9__& prior_infections, const T10__&
      prior_growth, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream*
      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<T7__, T8__, T9__, T10__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& log_R = stan::math::to_ref(log_R_arg__);
  const auto& bp_effects = stan::math::to_ref(bp_effects_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 350;
    lp_accum__.add(stan::math::normal_lpdf<propto__>(log_R, r_logmean,
                     r_logsd));
    current_statement__ = 355;
    if (stan::math::logical_gt(bp_n, 0)) {
      current_statement__ = 351;
      lp_accum__.add(stan::math::normal_lpdf<propto__>(
                       stan::model::rvalue(bp_sd, "bp_sd",
                         stan::model::index_uni(1)), 0, 0.1));
      current_statement__ = 352;
      if (stan::math::logical_lt(
            stan::model::rvalue(bp_sd, "bp_sd", stan::model::index_uni(1)), 0)) {
        current_statement__ = 352;
        lp_accum__.add(stan::math::negative_infinity());
      } else {
        current_statement__ = 352;
        lp_accum__.add(-(stan::math::normal_lccdf(0, 0, 0.1)));
      }
      current_statement__ = 353;
      lp_accum__.add(stan::math::normal_lpdf<propto__>(bp_effects, 0,
                       stan::model::rvalue(bp_sd, "bp_sd",
                         stan::model::index_uni(1))));
    }
    current_statement__ = 356;
    lp_accum__.add(stan::math::normal_lpdf<propto__>(initial_infections,
                     prior_infections, 0.2));
    current_statement__ = 359;
    if (stan::math::logical_gt(seeding_time, 1)) {
      current_statement__ = 357;
      lp_accum__.add(stan::math::normal_lpdf<propto__>(initial_growth,
                       prior_growth, 0.2));
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real update_infectiousness(vector, vector, int, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>, std::is_integral<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>>
update_infectiousness(const T0__& infections_arg__, const T1__&
                      gt_rev_pmf_arg__, const T2__& seeding_time, const T3__&
                      index, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& infections = stan::math::to_ref(infections_arg__);
  const auto& gt_rev_pmf = stan::math::to_ref(gt_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int gt_length = std::numeric_limits<int>::min();
    current_statement__ = 361;
    gt_length = stan::math::num_elements(gt_rev_pmf);
    int inf_start = std::numeric_limits<int>::min();
    current_statement__ = 362;
    inf_start = stan::math::max(1, (((index + seeding_time) - gt_length) + 1));
    int inf_end = std::numeric_limits<int>::min();
    current_statement__ = 363;
    inf_end = (index + seeding_time);
    int pmf_accessed = std::numeric_limits<int>::min();
    current_statement__ = 364;
    pmf_accessed = stan::math::min(gt_length, (index + seeding_time));
    local_scalar_t__ new_inf = DUMMY_VAR__;
    current_statement__ = 365;
    new_inf = stan::math::dot_product(
                stan::model::rvalue(infections, "infections",
                  stan::model::index_min_max(inf_start, inf_end)),
                stan::math::tail(gt_rev_pmf, pmf_accessed));
    current_statement__ = 366;
    return new_inf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* vector
   generate_infections(vector, int, vector, array[] real, array[] real, 
                       int, int)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              std::is_integral<T5__>, std::is_integral<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>,
                stan::base_type_t<T4__>>,-1,1>
generate_infections(const T0__& oR_arg__, const T1__& uot, const T2__&
                    gt_rev_pmf_arg__, const T3__& initial_infections,
                    const T4__& initial_growth, const T5__& pop, const T6__&
                    ht, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& oR = stan::math::to_ref(oR_arg__);
  const auto& gt_rev_pmf = stan::math::to_ref(gt_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ot = std::numeric_limits<int>::min();
    current_statement__ = 368;
    ot = stan::math::num_elements(oR);
    int nht = std::numeric_limits<int>::min();
    current_statement__ = 369;
    nht = (ot - ht);
    int t = std::numeric_limits<int>::min();
    current_statement__ = 370;
    t = (ot + uot);
    current_statement__ = 371;
    stan::math::validate_non_negative_index("R", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> R =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 372;
    stan::model::assign(R, oR, "assigning variable R");
    local_scalar_t__ exp_adj_Rt = DUMMY_VAR__;
    current_statement__ = 374;
    stan::math::validate_non_negative_index("infections", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> infections =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 375;
    stan::model::assign(infections, stan::math::rep_vector(0, t),
      "assigning variable infections");
    current_statement__ = 376;
    stan::math::validate_non_negative_index("cum_infections", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> cum_infections =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 378;
    stan::math::validate_non_negative_index("infectiousness", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> infectiousness =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 380;
    stan::model::assign(infections,
      stan::math::exp(
        stan::model::rvalue(initial_infections, "initial_infections",
          stan::model::index_uni(1))), "assigning variable infections",
      stan::model::index_uni(1));
    current_statement__ = 386;
    if (stan::math::logical_gt(uot, 1)) {
      local_scalar_t__ growth = DUMMY_VAR__;
      current_statement__ = 381;
      growth = stan::math::exp(
                 stan::model::rvalue(initial_growth, "initial_growth",
                   stan::model::index_uni(1)));
      current_statement__ = 384;
      for (int s = 2; s <= uot; ++s) {
        current_statement__ = 382;
        stan::model::assign(infections,
          (stan::model::rvalue(infections, "infections",
             stan::model::index_uni((s - 1))) * growth),
          "assigning variable infections", stan::model::index_uni(s));
      }
    }
    current_statement__ = 389;
    if (pop) {
      current_statement__ = 387;
      stan::model::assign(cum_infections,
        stan::math::sum(
          stan::model::rvalue(infections, "infections",
            stan::model::index_min_max(1, uot))),
        "assigning variable cum_infections", stan::model::index_uni(1));
    }
    current_statement__ = 402;
    for (int s = 1; s <= ot; ++s) {
      current_statement__ = 390;
      stan::model::assign(infectiousness,
        update_infectiousness(infections, gt_rev_pmf, uot, s, pstream__),
        "assigning variable infectiousness", stan::model::index_uni(s));
      current_statement__ = 397;
      if ((stan::math::primitive_value(pop) &&
          stan::math::primitive_value(stan::math::logical_gt(s, nht)))) {
        current_statement__ = 393;
        exp_adj_Rt = stan::math::exp(
                       ((-(stan::model::rvalue(R, "R",
                             stan::model::index_uni(s))) *
                       stan::model::rvalue(infectiousness, "infectiousness",
                         stan::model::index_uni(s))) / (pop -
                       stan::model::rvalue(cum_infections, "cum_infections",
                         stan::model::index_uni(nht)))));
        current_statement__ = 394;
        exp_adj_Rt = (stan::math::logical_gt(exp_adj_Rt, 1) ? 1 : exp_adj_Rt);
        current_statement__ = 395;
        stan::model::assign(infections, ((pop -
          stan::model::rvalue(cum_infections, "cum_infections",
            stan::model::index_uni(s))) * (1 - exp_adj_Rt)),
          "assigning variable infections", stan::model::index_uni((s + uot)));
      } else {
        current_statement__ = 391;
        stan::model::assign(infections,
          (stan::model::rvalue(R, "R", stan::model::index_uni(s)) *
          stan::model::rvalue(infectiousness, "infectiousness",
            stan::model::index_uni(s))), "assigning variable infections",
          stan::model::index_uni((s + uot)));
      }
      current_statement__ = 400;
      if ((stan::math::primitive_value(pop) &&
          stan::math::primitive_value(stan::math::logical_lt(s, ot)))) {
        current_statement__ = 398;
        stan::model::assign(cum_infections,
          (stan::model::rvalue(cum_infections, "cum_infections",
             stan::model::index_uni(s)) +
          stan::model::rvalue(infections, "infections",
            stan::model::index_uni((s + uot)))),
          "assigning variable cum_infections",
          stan::model::index_uni((s + 1)));
      }
    }
    current_statement__ = 403;
    return infections;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector deconvolve_infections(vector, vector, int, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>, std::is_integral<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
deconvolve_infections(const T0__& shifted_cases_arg__, const T1__&
                      noise_arg__, const T2__& fixed, const T3__& prior,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& shifted_cases = stan::math::to_ref(shifted_cases_arg__);
  const auto& noise = stan::math::to_ref(noise_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 405;
    t = stan::math::num_elements(shifted_cases);
    current_statement__ = 406;
    stan::math::validate_non_negative_index("infections", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> infections =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 407;
    stan::model::assign(infections, stan::math::rep_vector(1e-5, t),
      "assigning variable infections");
    current_statement__ = 425;
    if (stan::math::logical_negation(fixed)) {
      current_statement__ = 410;
      stan::math::validate_non_negative_index("exp_noise", "t", t);
      Eigen::Matrix<local_scalar_t__,-1,1> exp_noise =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
      current_statement__ = 411;
      stan::model::assign(exp_noise, stan::math::exp(noise),
        "assigning variable exp_noise");
      current_statement__ = 423;
      if (stan::math::logical_eq(prior, 1)) {
        current_statement__ = 421;
        stan::model::assign(infections,
          stan::math::add(stan::model::deep_copy(infections),
            stan::math::elt_multiply(shifted_cases, exp_noise)),
          "assigning variable infections");
      } else {
        current_statement__ = 420;
        if (stan::math::logical_eq(prior, 0)) {
          current_statement__ = 418;
          stan::model::assign(infections,
            stan::math::add(stan::model::deep_copy(infections), exp_noise),
            "assigning variable infections");
        } else {
          current_statement__ = 417;
          if (stan::math::logical_eq(prior, 2)) {
            current_statement__ = 412;
            stan::model::assign(infections,
              (stan::model::rvalue(infections, "infections",
                 stan::model::index_uni(1)) +
              (stan::model::rvalue(shifted_cases, "shifted_cases",
                 stan::model::index_uni(1)) *
              stan::model::rvalue(exp_noise, "exp_noise",
                stan::model::index_uni(1)))),
              "assigning variable infections", stan::model::index_uni(1));
            current_statement__ = 415;
            for (int i = 2; i <= t; ++i) {
              current_statement__ = 413;
              stan::model::assign(infections,
                (stan::model::rvalue(infections, "infections",
                   stan::model::index_uni((i - 1))) *
                stan::model::rvalue(exp_noise, "exp_noise",
                  stan::model::index_uni(i))),
                "assigning variable infections", stan::model::index_uni(i));
            }
          }
        }
      }
    } else {
      current_statement__ = 408;
      stan::model::assign(infections,
        stan::math::add(stan::model::deep_copy(infections), shifted_cases),
        "assigning variable infections");
    }
    current_statement__ = 426;
    return infections;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector day_of_week_effect(vector, array[] int, vector)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
day_of_week_effect(const T0__& reports_arg__, const T1__& day_of_week,
                   const T2__& effect_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  const auto& effect = stan::math::to_ref(effect_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int wl = std::numeric_limits<int>::min();
    current_statement__ = 428;
    wl = stan::math::num_elements(effect);
    current_statement__ = 429;
    stan::math::validate_non_negative_index("scaled_effect", "wl", wl);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_effect =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(wl, DUMMY_VAR__);
    current_statement__ = 430;
    stan::model::assign(scaled_effect, stan::math::multiply(wl, effect),
      "assigning variable scaled_effect");
    current_statement__ = 431;
    return stan::math::elt_multiply(reports,
             stan::model::rvalue(scaled_effect, "scaled_effect",
               stan::model::index_multi(day_of_week)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector scale_obs(vector, real)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
scale_obs(const T0__& reports_arg__, const T1__& frac_obs, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 433;
    t = stan::math::num_elements(reports);
    current_statement__ = 434;
    stan::math::validate_non_negative_index("scaled_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> scaled_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 436;
    stan::model::assign(scaled_reports,
      stan::math::multiply(reports, frac_obs),
      "assigning variable scaled_reports");
    current_statement__ = 437;
    return scaled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector truncate_obs(vector, vector, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              std::is_integral<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
truncate_obs(const T0__& reports_arg__, const T1__& trunc_rev_cmf_arg__,
             const T2__& reconstruct, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  const auto& trunc_rev_cmf = stan::math::to_ref(trunc_rev_cmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 439;
    t = stan::math::num_elements(reports);
    int trunc_max = std::numeric_limits<int>::min();
    current_statement__ = 440;
    trunc_max = stan::math::num_elements(trunc_rev_cmf);
    current_statement__ = 441;
    stan::math::validate_non_negative_index("trunc_reports", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> trunc_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 442;
    stan::model::assign(trunc_reports, reports,
      "assigning variable trunc_reports");
    int joint_max = std::numeric_limits<int>::min();
    current_statement__ = 443;
    joint_max = stan::math::min(t, trunc_max);
    int first_t = std::numeric_limits<int>::min();
    current_statement__ = 444;
    first_t = ((t - joint_max) + 1);
    int first_trunc = std::numeric_limits<int>::min();
    current_statement__ = 445;
    first_trunc = ((trunc_max - joint_max) + 1);
    current_statement__ = 450;
    if (reconstruct) {
      current_statement__ = 448;
      stan::model::assign(trunc_reports,
        stan::math::elt_divide(
          stan::model::deep_copy(
            stan::model::rvalue(trunc_reports, "trunc_reports",
              stan::model::index_min_max(first_t, t))),
          stan::model::rvalue(trunc_rev_cmf, "trunc_rev_cmf",
            stan::model::index_min_max(first_trunc, trunc_max))),
        "assigning variable trunc_reports",
        stan::model::index_min_max(first_t, t));
    } else {
      current_statement__ = 446;
      stan::model::assign(trunc_reports,
        stan::math::elt_multiply(
          stan::model::deep_copy(
            stan::model::rvalue(trunc_reports, "trunc_reports",
              stan::model::index_min_max(first_t, t))),
          stan::model::rvalue(trunc_rev_cmf, "trunc_rev_cmf",
            stan::model::index_min_max(first_trunc, trunc_max))),
        "assigning variable trunc_reports",
        stan::model::index_min_max(first_t, t));
    }
    current_statement__ = 451;
    return trunc_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* void
   truncation_lp(array[] real, array[] real, array[] real, array[] real,
                 array[] real, array[] real)
 */
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T0__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T0__>>>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::is_std_vector<T4__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T4__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T4__>>>,
                              stan::is_std_vector<T5__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T5__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T5__>>>>*>
void
truncation_lp(const T0__& truncation_mean, const T1__& truncation_sd,
              const T2__& trunc_mean_mean, const T3__& trunc_mean_sd,
              const T4__& trunc_sd_mean, const T5__& trunc_sd_sd, T_lp__&
              lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int truncation = std::numeric_limits<int>::min();
    current_statement__ = 453;
    truncation = stan::math::num_elements(truncation_mean);
    current_statement__ = 461;
    if (truncation) {
      current_statement__ = 456;
      if (stan::math::logical_gt(
            stan::model::rvalue(trunc_mean_sd, "trunc_mean_sd",
              stan::model::index_uni(1)), 0)) {
        current_statement__ = 454;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(truncation_mean,
                         trunc_mean_mean, trunc_mean_sd));
      }
      current_statement__ = 459;
      if (stan::math::logical_gt(
            stan::model::rvalue(trunc_sd_sd, "trunc_sd_sd",
              stan::model::index_uni(1)), 0)) {
        current_statement__ = 457;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(truncation_sd,
                         trunc_sd_mean, trunc_sd_sd));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* void
   report_lp(array[] int, array[] int, vector, array[] real, real, real, 
             int, real, int)
 */
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T_lp__,
          typename T_lp_accum__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_std_vector<T3__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T3__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T3__>>>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>,
                              stan::math::disjunction<stan::is_autodiff<T5__>,
                                                      std::is_floating_point<T5__>>,
                              std::is_integral<T6__>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              std::is_integral<T8__>>*>
void
report_lp(const T0__& cases, const T1__& cases_time, const T2__&
          reports_arg__, const T3__& rep_phi, const T4__& phi_mean,
          const T5__& phi_sd, const T6__& model_type, const T7__& weight,
          const T8__& accumulate, T_lp__& lp__, T_lp_accum__& lp_accum__,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__, T5__, T7__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 463;
    n = (stan::math::num_elements(cases_time) - accumulate);
    current_statement__ = 464;
    stan::math::validate_non_negative_index("obs_reports", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> obs_reports =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 466;
    stan::math::validate_non_negative_index("obs_cases", "n", n);
    std::vector<int> obs_cases =
      std::vector<int>(n, std::numeric_limits<int>::min());
    current_statement__ = 486;
    if (accumulate) {
      int t = std::numeric_limits<int>::min();
      current_statement__ = 471;
      t = stan::math::num_elements(reports);
      int i = std::numeric_limits<int>::min();
      current_statement__ = 472;
      i = 0;
      int current_obs = std::numeric_limits<int>::min();
      current_statement__ = 473;
      current_obs = 0;
      current_statement__ = 474;
      stan::model::assign(obs_reports, stan::math::rep_vector(0, n),
        "assigning variable obs_reports");
      current_statement__ = 483;
      while ((stan::math::primitive_value(stan::math::logical_lte(i, t)) &&
             stan::math::primitive_value(
               stan::math::logical_lte(current_obs, n)))) {
        current_statement__ = 477;
        if (stan::math::logical_gt(current_obs, 0)) {
          current_statement__ = 475;
          stan::model::assign(obs_reports,
            (stan::model::rvalue(obs_reports, "obs_reports",
               stan::model::index_uni(current_obs)) +
            stan::model::rvalue(reports, "reports", stan::model::index_uni(i))),
            "assigning variable obs_reports",
            stan::model::index_uni(current_obs));
        }
        current_statement__ = 480;
        if (stan::math::logical_eq(i,
              stan::model::rvalue(cases_time, "cases_time",
                stan::model::index_uni((current_obs + 1))))) {
          current_statement__ = 478;
          current_obs = (current_obs + 1);
        }
        current_statement__ = 481;
        i = (i + 1);
      }
      current_statement__ = 484;
      stan::model::assign(obs_cases,
        stan::model::rvalue(cases, "cases",
          stan::model::index_min_max(2, (n + 1))),
        "assigning variable obs_cases");
    } else {
      current_statement__ = 468;
      stan::model::assign(obs_reports,
        stan::model::rvalue(reports, "reports",
          stan::model::index_multi(cases_time)),
        "assigning variable obs_reports");
      current_statement__ = 469;
      stan::model::assign(obs_cases, cases, "assigning variable obs_cases");
    }
    current_statement__ = 504;
    if (model_type) {
      local_scalar_t__ dispersion = DUMMY_VAR__;
      current_statement__ = 493;
      dispersion = stan::math::inv_square(
                     (stan::math::logical_gt(phi_sd, 0) ? stan::model::rvalue(
                                                            rep_phi,
                                                            "rep_phi",
                                                            stan::model::index_uni(
                                                              model_type)) : phi_mean));
      current_statement__ = 497;
      if (stan::math::logical_gt(phi_sd, 0)) {
        current_statement__ = 494;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(rep_phi, "rep_phi",
                           stan::model::index_uni(model_type)), phi_mean,
                         phi_sd));
        current_statement__ = 495;
        if (stan::math::logical_lt(
              stan::model::rvalue(rep_phi, "rep_phi",
                stan::model::index_uni(model_type)), 0)) {
          current_statement__ = 495;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 495;
          lp_accum__.add(-(stan::math::normal_lccdf(0, phi_mean, phi_sd)));
        }
      }
      current_statement__ = 502;
      if (stan::math::logical_eq(weight, 1)) {
        current_statement__ = 500;
        lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(obs_cases,
                         obs_reports, dispersion));
      } else {
        current_statement__ = 498;
        lp_accum__.add((stan::math::neg_binomial_2_lpmf<false>(obs_cases,
                          obs_reports, dispersion) * weight));
      }
    } else {
      current_statement__ = 491;
      if (stan::math::logical_eq(weight, 1)) {
        current_statement__ = 489;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(obs_cases,
                         obs_reports));
      } else {
        current_statement__ = 487;
        lp_accum__.add((stan::math::poisson_lpmf<false>(obs_cases,
                          obs_reports) * weight));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector report_log_lik(array[] int, vector, array[] real, int, real)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_std_vector<T2__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T2__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T2__>>>,
                              std::is_integral<T3__>,
                              stan::math::disjunction<stan::is_autodiff<T4__>,
                                                      std::is_floating_point<T4__>>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T4__>,-1,1>
report_log_lik(const T0__& cases, const T1__& reports_arg__, const T2__&
               rep_phi, const T3__& model_type, const T4__& weight,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T4__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 506;
    t = stan::math::num_elements(reports);
    current_statement__ = 507;
    stan::math::validate_non_negative_index("log_lik", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> log_lik =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 518;
    if (stan::math::logical_eq(model_type, 0)) {
      current_statement__ = 516;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 514;
        stan::model::assign(log_lik,
          (stan::math::poisson_lpmf<false>(
             stan::model::rvalue(cases, "cases", stan::model::index_uni(i)),
             stan::model::rvalue(reports, "reports",
               stan::model::index_uni(i))) * weight),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
    } else {
      local_scalar_t__ dispersion = DUMMY_VAR__;
      current_statement__ = 509;
      dispersion = stan::math::inv_square(
                     stan::model::rvalue(rep_phi, "rep_phi",
                       stan::model::index_uni(model_type)));
      current_statement__ = 512;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 510;
        stan::model::assign(log_lik,
          (stan::math::neg_binomial_2_lpmf<false>(
             stan::model::rvalue(cases, "cases", stan::model::index_uni(i)),
             stan::model::rvalue(reports, "reports",
               stan::model::index_uni(i)), dispersion) * weight),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
    }
    current_statement__ = 519;
    return log_lik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// array[] int report_rng(vector, array[] real, int)
template <typename T0__, typename T1__, typename T2__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_std_vector<T1__>,
                              stan::math::disjunction<stan::is_autodiff<
                                                      stan::value_type_t<T1__>>,
                                                      std::is_floating_point<
                                                      stan::value_type_t<T1__>>>,
                              std::is_integral<T2__>>*>
std::vector<int>
report_rng(const T0__& reports_arg__, const T1__& rep_phi, const T2__&
           model_type, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& reports = stan::math::to_ref(reports_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 521;
    t = stan::math::num_elements(reports);
    current_statement__ = 522;
    stan::math::validate_non_negative_index("sampled_reports", "t", t);
    std::vector<int> sampled_reports =
      std::vector<int>(t, std::numeric_limits<int>::min());
    local_scalar_t__ dispersion = DUMMY_VAR__;
    current_statement__ = 524;
    dispersion = 1e5;
    current_statement__ = 527;
    if (model_type) {
      current_statement__ = 525;
      dispersion = stan::math::inv_square(
                     stan::model::rvalue(rep_phi, "rep_phi",
                       stan::model::index_uni(model_type)));
    }
    current_statement__ = 538;
    for (int s = 1; s <= t; ++s) {
      current_statement__ = 536;
      if (stan::math::logical_lt(
            stan::model::rvalue(reports, "reports", stan::model::index_uni(s)),
            1e-8)) {
        current_statement__ = 534;
        stan::model::assign(sampled_reports, 0,
          "assigning variable sampled_reports", stan::model::index_uni(s));
      } else {
        current_statement__ = 532;
        if (stan::math::logical_gt(dispersion, 1e4)) {
          current_statement__ = 530;
          stan::model::assign(sampled_reports,
            stan::math::poisson_rng(
              (stan::math::logical_gt(
                 stan::model::rvalue(reports, "reports",
                   stan::model::index_uni(s)), 1e8) ? 1e8 : stan::model::rvalue(
                                                              reports,
                                                              "reports",
                                                              stan::model::index_uni(
                                                                s))),
              base_rng__), "assigning variable sampled_reports",
            stan::model::index_uni(s));
        } else {
          current_statement__ = 528;
          stan::model::assign(sampled_reports,
            stan::math::neg_binomial_2_rng(
              (stan::math::logical_gt(
                 stan::model::rvalue(reports, "reports",
                   stan::model::index_uni(s)), 1e8) ? 1e8 : stan::model::rvalue(
                                                              reports,
                                                              "reports",
                                                              stan::model::index_uni(
                                                                s))),
              dispersion, base_rng__), "assigning variable sampled_reports",
            stan::model::index_uni(s));
        }
      }
    }
    current_statement__ = 539;
    return sampled_reports;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector calculate_Rt(vector, int, vector, int)
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              std::is_integral<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T2__>>,-1,1>
calculate_Rt(const T0__& infections_arg__, const T1__& seeding_time,
             const T2__& gt_rev_pmf_arg__, const T3__& smooth, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& infections = stan::math::to_ref(infections_arg__);
  const auto& gt_rev_pmf = stan::math::to_ref(gt_rev_pmf_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 541;
    t = stan::math::num_elements(infections);
    int ot = std::numeric_limits<int>::min();
    current_statement__ = 542;
    ot = (t - seeding_time);
    current_statement__ = 543;
    stan::math::validate_non_negative_index("R", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> R =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 545;
    stan::math::validate_non_negative_index("sR", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> sR =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 547;
    stan::math::validate_non_negative_index("infectiousness", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> infectiousness =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 548;
    stan::model::assign(infectiousness, stan::math::rep_vector(1e-5, ot),
      "assigning variable infectiousness");
    current_statement__ = 552;
    for (int s = 1; s <= ot; ++s) {
      current_statement__ = 549;
      stan::model::assign(infectiousness,
        (stan::model::rvalue(infectiousness, "infectiousness",
           stan::model::index_uni(s)) +
        update_infectiousness(infections, gt_rev_pmf, seeding_time, s,
          pstream__)), "assigning variable infectiousness",
        stan::model::index_uni(s));
      current_statement__ = 550;
      stan::model::assign(R,
        (stan::model::rvalue(infections, "infections",
           stan::model::index_uni((s + seeding_time))) /
        stan::model::rvalue(infectiousness, "infectiousness",
          stan::model::index_uni(s))), "assigning variable R",
        stan::model::index_uni(s));
    }
    current_statement__ = 565;
    if (smooth) {
      current_statement__ = 563;
      for (int s = 1; s <= ot; ++s) {
        local_scalar_t__ window = DUMMY_VAR__;
        current_statement__ = 555;
        window = 0;
        current_statement__ = 556;
        stan::model::assign(sR, 0, "assigning variable sR",
          stan::model::index_uni(s));
        current_statement__ = 560;
        for (int i = stan::math::max(1, (s - smooth)); i <=
             stan::math::min(ot, (s + smooth)); ++i) {
          current_statement__ = 557;
          stan::model::assign(sR,
            (stan::model::rvalue(sR, "sR", stan::model::index_uni(s)) +
            stan::model::rvalue(R, "R", stan::model::index_uni(i))),
            "assigning variable sR", stan::model::index_uni(s));
          current_statement__ = 558;
          window = (window + 1);
        }
        current_statement__ = 561;
        stan::model::assign(sR,
          (stan::model::rvalue(sR, "sR", stan::model::index_uni(s)) /
          window), "assigning variable sR", stan::model::index_uni(s));
      }
    } else {
      current_statement__ = 553;
      stan::model::assign(sR, R, "assigning variable sR");
    }
    current_statement__ = 566;
    return sR;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector calculate_growth(vector, int)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
calculate_growth(const T0__& infections_arg__, const T1__& seeding_time,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& infections = stan::math::to_ref(infections_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int t = std::numeric_limits<int>::min();
    current_statement__ = 568;
    t = stan::math::num_elements(infections);
    int ot = std::numeric_limits<int>::min();
    current_statement__ = 569;
    ot = (t - seeding_time);
    current_statement__ = 570;
    stan::math::validate_non_negative_index("log_inf", "t", t);
    Eigen::Matrix<local_scalar_t__,-1,1> log_inf =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(t, DUMMY_VAR__);
    current_statement__ = 571;
    stan::model::assign(log_inf, stan::math::log(infections),
      "assigning variable log_inf");
    current_statement__ = 572;
    stan::math::validate_non_negative_index("growth", "ot", ot);
    Eigen::Matrix<local_scalar_t__,-1,1> growth =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ot, DUMMY_VAR__);
    current_statement__ = 573;
    stan::model::assign(growth,
      stan::math::subtract(
        stan::model::rvalue(log_inf, "log_inf",
          stan::model::index_min_max((seeding_time + 1), t)),
        stan::model::rvalue(log_inf, "log_inf",
          stan::model::index_min_max(seeding_time, (t - 1)))),
      "assigning variable growth");
    current_statement__ = 574;
    return growth;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_simulate_infections final : public model_base_crtp<model_simulate_infections> {
private:
  int n;
  int t;
  int seeding_time;
  int future_time;
  std::vector<std::vector<double>> initial_infections;
  std::vector<std::vector<double>> initial_growth;
  Eigen::Matrix<double,-1,-1> R_data__;
  int pop;
  int gt_id;
  int delay_n;
  int delay_n_p;
  int delay_n_np;
  std::vector<int> delay_max;
  std::vector<int> delay_dist;
  int delay_np_pmf_length;
  Eigen::Matrix<double,-1,1> delay_np_pmf_data__;
  std::vector<int> delay_np_pmf_groups;
  std::vector<int> delay_weight;
  int delay_params_length;
  std::vector<Eigen::Matrix<double,-1,1>> delay_params;
  std::vector<int> delay_params_groups;
  int delay_types;
  std::vector<int> delay_types_p;
  std::vector<int> delay_types_id;
  std::vector<int> delay_types_groups;
  int delay_id;
  std::vector<int> day_of_week;
  int week_effect;
  std::vector<std::vector<double>> day_of_week_simplex;
  int obs_scale;
  std::vector<std::vector<double>> frac_obs;
  int model_type;
  std::vector<std::vector<double>> rep_phi;
  int trunc_id;
  std::vector<int> delay_type_max;
  int reports_2dim__;
  int imputed_reports_2dim__;
  int r_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delay_np_pmf{nullptr, 0};
public:
  ~model_simulate_infections() {}
  model_simulate_infections(stan::io::var_context& context__, unsigned int
                            random_seed__ = 0, std::ostream*
                            pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_simulate_infections_namespace::model_simulate_infections";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 31;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 31;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 32;
      context__.validate_dims("data initialization", "t", "int",
        std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      current_statement__ = 32;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 33;
      context__.validate_dims("data initialization", "seeding_time", "int",
        std::vector<size_t>{});
      seeding_time = std::numeric_limits<int>::min();
      current_statement__ = 33;
      seeding_time = context__.vals_i("seeding_time")[(1 - 1)];
      current_statement__ = 34;
      context__.validate_dims("data initialization", "future_time", "int",
        std::vector<size_t>{});
      future_time = std::numeric_limits<int>::min();
      current_statement__ = 34;
      future_time = context__.vals_i("future_time")[(1 - 1)];
      current_statement__ = 35;
      stan::math::validate_non_negative_index("initial_infections", "n", n);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "initial_infections",
        "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(1)});
      initial_infections = std::vector<std::vector<double>>(n,
                             std::vector<double>(1,
                               std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> initial_infections_flat__;
        current_statement__ = 36;
        initial_infections_flat__ = context__.vals_r("initial_infections");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(initial_infections,
              initial_infections_flat__[(pos__ - 1)],
              "assigning variable initial_infections",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      stan::math::validate_non_negative_index("initial_growth", "n", n);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("initial_growth",
        "seeding_time > 1 ? 1 : 0",
        (stan::math::logical_gt(seeding_time, 1) ? 1 : 0));
      current_statement__ = 39;
      context__.validate_dims("data initialization", "initial_growth",
        "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(
            (stan::math::logical_gt(seeding_time, 1) ? 1 : 0))});
      initial_growth = std::vector<std::vector<double>>(n,
                         std::vector<double>((stan::math::logical_gt(
                                                seeding_time, 1) ? 1 : 0),
                           std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> initial_growth_flat__;
        current_statement__ = 39;
        initial_growth_flat__ = context__.vals_r("initial_growth");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <=
             (stan::math::logical_gt(seeding_time, 1) ? 1 : 0); ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(initial_growth, initial_growth_flat__[(pos__
              - 1)], "assigning variable initial_growth",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 40;
      stan::math::validate_non_negative_index("R", "n", n);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("R", "t - seeding_time", (t -
        seeding_time));
      current_statement__ = 42;
      context__.validate_dims("data initialization", "R", "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>((t - seeding_time))});
      R_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, (t - seeding_time),
                   std::numeric_limits<double>::quiet_NaN());
      new (&R) Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_data__.data(), n, (t
        - seeding_time));
      {
        std::vector<local_scalar_t__> R_flat__;
        current_statement__ = 42;
        R_flat__ = context__.vals_r("R");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= (t - seeding_time); ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(R, R_flat__[(pos__ - 1)],
              "assigning variable R", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 43;
      context__.validate_dims("data initialization", "pop", "int",
        std::vector<size_t>{});
      pop = std::numeric_limits<int>::min();
      current_statement__ = 43;
      pop = context__.vals_i("pop")[(1 - 1)];
      current_statement__ = 44;
      context__.validate_dims("data initialization", "gt_id", "int",
        std::vector<size_t>{});
      gt_id = std::numeric_limits<int>::min();
      current_statement__ = 44;
      gt_id = context__.vals_i("gt_id")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "gt_id", gt_id, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "delay_n", "int",
        std::vector<size_t>{});
      delay_n = std::numeric_limits<int>::min();
      current_statement__ = 45;
      delay_n = context__.vals_i("delay_n")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "delay_n", delay_n, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "delay_n_p", "int",
        std::vector<size_t>{});
      delay_n_p = std::numeric_limits<int>::min();
      current_statement__ = 46;
      delay_n_p = context__.vals_i("delay_n_p")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "delay_n_p", delay_n_p,
        0);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "delay_n_np", "int",
        std::vector<size_t>{});
      delay_n_np = std::numeric_limits<int>::min();
      current_statement__ = 47;
      delay_n_np = context__.vals_i("delay_n_np")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "delay_n_np",
        delay_n_np, 0);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("delay_max", "delay_n_p",
        delay_n_p);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "delay_max", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_max = std::vector<int>(delay_n_p,
                    std::numeric_limits<int>::min());
      current_statement__ = 49;
      delay_max = context__.vals_i("delay_max");
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "delay_max", delay_max,
        1);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("delay_dist", "delay_n_p",
        delay_n_p);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "delay_dist", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_dist = std::vector<int>(delay_n_p,
                     std::numeric_limits<int>::min());
      current_statement__ = 51;
      delay_dist = context__.vals_i("delay_dist");
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "delay_dist",
        delay_dist, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "delay_np_pmf_length",
        "int", std::vector<size_t>{});
      delay_np_pmf_length = std::numeric_limits<int>::min();
      current_statement__ = 52;
      delay_np_pmf_length = context__.vals_i("delay_np_pmf_length")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf_length",
        delay_np_pmf_length, 0);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("delay_np_pmf",
        "delay_np_pmf_length", delay_np_pmf_length);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "delay_np_pmf",
        "double",
        std::vector<size_t>{static_cast<size_t>(delay_np_pmf_length)});
      delay_np_pmf_data__ = Eigen::Matrix<double,-1,1>::Constant(delay_np_pmf_length,
                              std::numeric_limits<double>::quiet_NaN());
      new (&delay_np_pmf)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delay_np_pmf_data__.data(),
        delay_np_pmf_length);
      {
        std::vector<local_scalar_t__> delay_np_pmf_flat__;
        current_statement__ = 54;
        delay_np_pmf_flat__ = context__.vals_r("delay_np_pmf");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= delay_np_pmf_length; ++sym1__) {
          stan::model::assign(delay_np_pmf, delay_np_pmf_flat__[(pos__ - 1)],
            "assigning variable delay_np_pmf", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf",
        delay_np_pmf, 0);
      current_statement__ = 54;
      stan::math::check_less_or_equal(function__, "delay_np_pmf",
        delay_np_pmf, 1);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("delay_np_pmf_groups",
        "delay_n_np + 1", (delay_n_np + 1));
      current_statement__ = 56;
      context__.validate_dims("data initialization", "delay_np_pmf_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_n_np + 1))});
      delay_np_pmf_groups = std::vector<int>((delay_n_np + 1),
                              std::numeric_limits<int>::min());
      current_statement__ = 56;
      delay_np_pmf_groups = context__.vals_i("delay_np_pmf_groups");
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "delay_np_pmf_groups",
        delay_np_pmf_groups, 1);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("delay_weight", "delay_n_p",
        delay_n_p);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "delay_weight", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n_p)});
      delay_weight = std::vector<int>(delay_n_p,
                       std::numeric_limits<int>::min());
      current_statement__ = 58;
      delay_weight = context__.vals_i("delay_weight");
      current_statement__ = 59;
      context__.validate_dims("data initialization", "delay_params_length",
        "int", std::vector<size_t>{});
      delay_params_length = std::numeric_limits<int>::min();
      current_statement__ = 59;
      delay_params_length = context__.vals_i("delay_params_length")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "delay_params_length",
        delay_params_length, 0);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("delay_params", "n", n);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("delay_params",
        "delay_params_length", delay_params_length);
      current_statement__ = 62;
      context__.validate_dims("data initialization", "delay_params",
        "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(delay_params_length)});
      delay_params = std::vector<Eigen::Matrix<double,-1,1>>(n,
                       Eigen::Matrix<double,-1,1>::Constant(delay_params_length,
                         std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> delay_params_flat__;
        current_statement__ = 62;
        delay_params_flat__ = context__.vals_r("delay_params");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= delay_params_length; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(delay_params, delay_params_flat__[(pos__ -
              1)], "assigning variable delay_params",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 63;
      stan::math::validate_non_negative_index("delay_params_groups",
        "delay_n_p + 1", (delay_n_p + 1));
      current_statement__ = 64;
      context__.validate_dims("data initialization", "delay_params_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_n_p + 1))});
      delay_params_groups = std::vector<int>((delay_n_p + 1),
                              std::numeric_limits<int>::min());
      current_statement__ = 64;
      delay_params_groups = context__.vals_i("delay_params_groups");
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "delay_params_groups",
        delay_params_groups, 0);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "delay_types", "int",
        std::vector<size_t>{});
      delay_types = std::numeric_limits<int>::min();
      current_statement__ = 65;
      delay_types = context__.vals_i("delay_types")[(1 - 1)];
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "delay_types",
        delay_types, 0);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("delay_types_p", "delay_n",
        delay_n);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "delay_types_p", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n)});
      delay_types_p = std::vector<int>(delay_n,
                        std::numeric_limits<int>::min());
      current_statement__ = 67;
      delay_types_p = context__.vals_i("delay_types_p");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "delay_types_p",
        delay_types_p, 0);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("delay_types_id", "delay_n",
        delay_n);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "delay_types_id", "int",
        std::vector<size_t>{static_cast<size_t>(delay_n)});
      delay_types_id = std::vector<int>(delay_n,
                         std::numeric_limits<int>::min());
      current_statement__ = 69;
      delay_types_id = context__.vals_i("delay_types_id");
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "delay_types_id",
        delay_types_id, 0);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("delay_types_groups",
        "delay_types + 1", (delay_types + 1));
      current_statement__ = 71;
      context__.validate_dims("data initialization", "delay_types_groups",
        "int", std::vector<size_t>{static_cast<size_t>((delay_types + 1))});
      delay_types_groups = std::vector<int>((delay_types + 1),
                             std::numeric_limits<int>::min());
      current_statement__ = 71;
      delay_types_groups = context__.vals_i("delay_types_groups");
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "delay_types_groups",
        delay_types_groups, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "delay_id", "int",
        std::vector<size_t>{});
      delay_id = std::numeric_limits<int>::min();
      current_statement__ = 72;
      delay_id = context__.vals_i("delay_id")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "delay_id", delay_id, 0);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("day_of_week",
        "t - seeding_time", (t - seeding_time));
      current_statement__ = 74;
      context__.validate_dims("data initialization", "day_of_week", "int",
        std::vector<size_t>{static_cast<size_t>((t - seeding_time))});
      day_of_week = std::vector<int>((t - seeding_time),
                      std::numeric_limits<int>::min());
      current_statement__ = 74;
      day_of_week = context__.vals_i("day_of_week");
      current_statement__ = 75;
      context__.validate_dims("data initialization", "week_effect", "int",
        std::vector<size_t>{});
      week_effect = std::numeric_limits<int>::min();
      current_statement__ = 75;
      week_effect = context__.vals_i("week_effect")[(1 - 1)];
      current_statement__ = 76;
      stan::math::validate_non_negative_index("day_of_week_simplex", "n", n);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("day_of_week_simplex",
        "week_effect", week_effect);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "day_of_week_simplex",
        "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(week_effect)});
      day_of_week_simplex = std::vector<std::vector<double>>(n,
                              std::vector<double>(week_effect,
                                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> day_of_week_simplex_flat__;
        current_statement__ = 78;
        day_of_week_simplex_flat__ = context__.vals_r("day_of_week_simplex");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= week_effect; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(day_of_week_simplex,
              day_of_week_simplex_flat__[(pos__ - 1)],
              "assigning variable day_of_week_simplex",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "day_of_week_simplex",
        day_of_week_simplex, 0);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "obs_scale", "int",
        std::vector<size_t>{});
      obs_scale = std::numeric_limits<int>::min();
      current_statement__ = 79;
      obs_scale = context__.vals_i("obs_scale")[(1 - 1)];
      current_statement__ = 80;
      stan::math::validate_non_negative_index("frac_obs", "n", n);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("frac_obs", "obs_scale",
        obs_scale);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "frac_obs", "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(obs_scale)});
      frac_obs = std::vector<std::vector<double>>(n,
                   std::vector<double>(obs_scale,
                     std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> frac_obs_flat__;
        current_statement__ = 82;
        frac_obs_flat__ = context__.vals_r("frac_obs");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= obs_scale; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(frac_obs, frac_obs_flat__[(pos__ - 1)],
              "assigning variable frac_obs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "frac_obs", frac_obs, 0);
      current_statement__ = 82;
      stan::math::check_less_or_equal(function__, "frac_obs", frac_obs, 1);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "model_type", "int",
        std::vector<size_t>{});
      model_type = std::numeric_limits<int>::min();
      current_statement__ = 83;
      model_type = context__.vals_i("model_type")[(1 - 1)];
      current_statement__ = 84;
      stan::math::validate_non_negative_index("rep_phi", "n", n);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("rep_phi", "model_type",
        model_type);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "rep_phi", "double",
        std::vector<size_t>{static_cast<size_t>(n),
          static_cast<size_t>(model_type)});
      rep_phi = std::vector<std::vector<double>>(n,
                  std::vector<double>(model_type,
                    std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> rep_phi_flat__;
        current_statement__ = 86;
        rep_phi_flat__ = context__.vals_r("rep_phi");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= model_type; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(rep_phi, rep_phi_flat__[(pos__ - 1)],
              "assigning variable rep_phi", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 86;
      stan::math::check_greater_or_equal(function__, "rep_phi", rep_phi, 0);
      current_statement__ = 87;
      context__.validate_dims("data initialization", "trunc_id", "int",
        std::vector<size_t>{});
      trunc_id = std::numeric_limits<int>::min();
      current_statement__ = 87;
      trunc_id = context__.vals_i("trunc_id")[(1 - 1)];
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "trunc_id", trunc_id, 0);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("delay_type_max",
        "delay_types", delay_types);
      current_statement__ = 89;
      delay_type_max = std::vector<int>(delay_types,
                         std::numeric_limits<int>::min());
      current_statement__ = 89;
      stan::model::assign(delay_type_max,
        get_delay_type_max(delay_types, delay_types_p, delay_types_id,
          delay_types_groups, delay_max, delay_np_pmf_groups, pstream__),
        "assigning variable delay_type_max");
      current_statement__ = 90;
      stan::math::validate_non_negative_index("infections", "n", n);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("infections", "t", t);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("reports", "n", n);
      current_statement__ = 93;
      reports_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 93;
      reports_2dim__ = (t - seeding_time);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("reports", "t - seeding_time",
        reports_2dim__);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("imputed_reports", "n", n);
      current_statement__ = 95;
      imputed_reports_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 95;
      imputed_reports_2dim__ = (t - seeding_time);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("imputed_reports",
        "t - seeding_time", imputed_reports_2dim__);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("r", "n", n);
      current_statement__ = 97;
      r_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 97;
      r_2dim__ = ((t - seeding_time) - 1);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("r", "t - seeding_time - 1",
        r_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
  }
  inline std::string model_name() const final {
    return "model_simulate_infections";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.35.0",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_simulate_infections_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_simulate_infections_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_simulate_infections_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> infections =
        Eigen::Matrix<double,-1,-1>::Constant(n, t,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> reports =
        Eigen::Matrix<double,-1,-1>::Constant(n, reports_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<int>> imputed_reports =
        std::vector<std::vector<int>>(n,
          std::vector<int>(imputed_reports_2dim__,
            std::numeric_limits<int>::min()));
      Eigen::Matrix<double,-1,-1> r =
        Eigen::Matrix<double,-1,-1>::Constant(n, r_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 30;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 5;
        stan::math::validate_non_negative_index("gt_rev_pmf",
          "delay_type_max[gt_id] + 1",
          (stan::model::rvalue(delay_type_max, "delay_type_max",
             stan::model::index_uni(gt_id)) + 1));
        Eigen::Matrix<double,-1,1> gt_rev_pmf =
          Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(
                                                  delay_type_max,
                                                  "delay_type_max",
                                                  stan::model::index_uni(
                                                    gt_id)) + 1),
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 7;
        stan::model::assign(gt_rev_pmf,
          get_delay_rev_pmf(gt_id,
            (stan::model::rvalue(delay_type_max, "delay_type_max",
               stan::model::index_uni(gt_id)) + 1), delay_types_p,
            delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
            delay_np_pmf_groups,
            stan::model::rvalue(delay_params, "delay_params",
              stan::model::index_uni(i)), delay_params_groups, delay_dist, 1,
            1, 0, pstream__), "assigning variable gt_rev_pmf");
        current_statement__ = 8;
        stan::model::assign(infections,
          stan::math::to_row_vector(
            generate_infections(
              stan::math::to_vector(
                stan::model::rvalue(R, "R", stan::model::index_uni(i))),
              seeding_time, gt_rev_pmf,
              stan::model::rvalue(initial_infections, "initial_infections",
                stan::model::index_uni(i)),
              stan::model::rvalue(initial_growth, "initial_growth",
                stan::model::index_uni(i)), pop, future_time, pstream__)),
          "assigning variable infections", stan::model::index_uni(i));
        current_statement__ = 15;
        if (delay_id) {
          current_statement__ = 11;
          stan::math::validate_non_negative_index("delay_rev_pmf",
            "delay_type_max[delay_id] + 1",
            (stan::model::rvalue(delay_type_max, "delay_type_max",
               stan::model::index_uni(delay_id)) + 1));
          Eigen::Matrix<double,-1,1> delay_rev_pmf =
            Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(
                                                    delay_type_max,
                                                    "delay_type_max",
                                                    stan::model::index_uni(
                                                      delay_id)) + 1),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 12;
          stan::model::assign(delay_rev_pmf,
            get_delay_rev_pmf(delay_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(delay_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups,
              stan::model::rvalue(delay_params, "delay_params",
                stan::model::index_uni(i)), delay_params_groups, delay_dist,
              0, 1, 0, pstream__), "assigning variable delay_rev_pmf");
          current_statement__ = 13;
          stan::model::assign(reports,
            stan::math::to_row_vector(
              convolve_to_report(
                stan::math::to_vector(
                  stan::model::rvalue(infections, "infections",
                    stan::model::index_uni(i))), delay_rev_pmf, seeding_time,
                pstream__)), "assigning variable reports",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 9;
          stan::model::assign(reports,
            stan::math::to_row_vector(
              stan::model::rvalue(infections, "infections",
                stan::model::index_uni(i),
                stan::model::index_min_max((seeding_time + 1), t))),
            "assigning variable reports", stan::model::index_uni(i));
        }
        current_statement__ = 18;
        if (stan::math::logical_gt(week_effect, 1)) {
          current_statement__ = 16;
          stan::model::assign(reports,
            stan::math::to_row_vector(
              day_of_week_effect(
                stan::math::to_vector(
                  stan::model::deep_copy(
                    stan::model::rvalue(reports, "reports",
                      stan::model::index_uni(i)))), day_of_week,
                stan::math::to_vector(
                  stan::model::rvalue(day_of_week_simplex,
                    "day_of_week_simplex", stan::model::index_uni(i))),
                pstream__)), "assigning variable reports",
            stan::model::index_uni(i));
        }
        current_statement__ = 23;
        if (trunc_id) {
          current_statement__ = 19;
          stan::math::validate_non_negative_index("trunc_rev_cmf",
            "delay_type_max[trunc_id] + 1",
            (stan::model::rvalue(delay_type_max, "delay_type_max",
               stan::model::index_uni(trunc_id)) + 1));
          Eigen::Matrix<double,-1,1> trunc_rev_cmf =
            Eigen::Matrix<double,-1,1>::Constant((stan::model::rvalue(
                                                    delay_type_max,
                                                    "delay_type_max",
                                                    stan::model::index_uni(
                                                      trunc_id)) + 1),
              std::numeric_limits<double>::quiet_NaN());
          current_statement__ = 20;
          stan::model::assign(trunc_rev_cmf,
            get_delay_rev_pmf(trunc_id,
              (stan::model::rvalue(delay_type_max, "delay_type_max",
                 stan::model::index_uni(trunc_id)) + 1), delay_types_p,
              delay_types_id, delay_types_groups, delay_max, delay_np_pmf,
              delay_np_pmf_groups,
              stan::model::rvalue(delay_params, "delay_params",
                stan::model::index_uni(i)), delay_params_groups, delay_dist,
              0, 1, 1, pstream__), "assigning variable trunc_rev_cmf");
          current_statement__ = 21;
          stan::model::assign(reports,
            stan::math::to_row_vector(
              truncate_obs(
                stan::math::to_vector(
                  stan::model::deep_copy(
                    stan::model::rvalue(reports, "reports",
                      stan::model::index_uni(i)))), trunc_rev_cmf, 0,
                pstream__)), "assigning variable reports",
            stan::model::index_uni(i));
        }
        current_statement__ = 26;
        if (obs_scale) {
          current_statement__ = 24;
          stan::model::assign(reports,
            stan::math::to_row_vector(
              scale_obs(
                stan::math::to_vector(
                  stan::model::deep_copy(
                    stan::model::rvalue(reports, "reports",
                      stan::model::index_uni(i)))),
                stan::model::rvalue(frac_obs, "frac_obs",
                  stan::model::index_uni(i), stan::model::index_uni(1)),
                pstream__)), "assigning variable reports",
            stan::model::index_uni(i));
        }
        current_statement__ = 27;
        stan::model::assign(imputed_reports,
          report_rng(
            stan::math::to_vector(
              stan::model::rvalue(reports, "reports",
                stan::model::index_uni(i))),
            stan::model::rvalue(rep_phi, "rep_phi", stan::model::index_uni(i)),
            model_type, base_rng__, pstream__),
          "assigning variable imputed_reports", stan::model::index_uni(i));
        current_statement__ = 28;
        stan::model::assign(r,
          stan::math::to_row_vector(
            calculate_growth(
              stan::math::to_vector(
                stan::model::rvalue(infections, "infections",
                  stan::model::index_uni(i))), (seeding_time + 1), pstream__)),
          "assigning variable r", stan::model::index_uni(i));
      }
      out__.write(infections);
      out__.write(reports);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= imputed_reports_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          out__.write(imputed_reports[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"infections", "reports", "imputed_reports", "r"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(t)},
             std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(reports_2dim__)},
             std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(imputed_reports_2dim__)},
             std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(r_2dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "infections" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= reports_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "reports" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= imputed_reports_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "imputed_reports" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= r_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "r" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "infections" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= reports_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "reports" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= imputed_reports_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "imputed_reports" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= r_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "r" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"infections\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(t) + "},\"block\":\"generated_quantities\"},{\"name\":\"reports\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(reports_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"imputed_reports\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(imputed_reports_2dim__) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"},{\"name\":\"r\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(r_2dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"infections\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(t) + "},\"block\":\"generated_quantities\"},{\"name\":\"reports\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(reports_2dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"imputed_reports\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(imputed_reports_2dim__) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"},{\"name\":\"r\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(r_2dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((((n * t)
      + (n * reports_2dim__)) + (n * imputed_reports_2dim__)) + (n *
      r_2dim__)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = 0;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((((n * t)
      + (n * reports_2dim__)) + (n * imputed_reports_2dim__)) + (n *
      r_2dim__)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_simulate_infections_namespace::model_simulate_infections;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_simulate_infections_namespace::profiles__;
}
#endif
#endif
